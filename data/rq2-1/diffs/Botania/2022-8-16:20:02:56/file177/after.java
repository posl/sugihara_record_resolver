/*
 * This class is distributed as part of the Botania Mod.
 * Get the Source Code in github:
 * https://github.com/Vazkii/Botania
 *
 * Botania is Open Source and distributed under the
 * Botania License: http://botaniamod.net/license.php
 */
package vazkii.botania.common.block;

import net.minecraft.core.BlockSource;
import net.minecraft.core.Position;
import net.minecraft.core.Registry;
import net.minecraft.core.dispenser.AbstractProjectileDispenseBehavior;
import net.minecraft.core.dispenser.DispenseItemBehavior;
import net.minecraft.core.dispenser.OptionalDispenseItemBehavior;
import net.minecraft.core.dispenser.ShearsDispenseItemBehavior;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.projectile.Projectile;
import net.minecraft.world.item.ArmorItem;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.Rarity;
import net.minecraft.world.item.StandingAndWallBlockItem;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.DispenserBlock;
import net.minecraft.world.level.block.RotatedPillarBlock;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.StairBlock;
import net.minecraft.world.level.block.WallBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.Material;

import org.jetbrains.annotations.NotNull;

import vazkii.botania.api.block.IPetalApothecary;
import vazkii.botania.api.state.BotaniaStateProps;
import vazkii.botania.api.state.enums.AlfPortalState;
import vazkii.botania.api.state.enums.LuminizerVariant;
import vazkii.botania.common.block.corporea.*;
import vazkii.botania.common.block.decor.*;
import vazkii.botania.common.block.decor.stairs.BlockModStairs;
import vazkii.botania.common.block.dispenser.*;
import vazkii.botania.common.block.mana.*;
import vazkii.botania.common.block.string.*;
import vazkii.botania.common.entity.EntityEnderAirBottle;
import vazkii.botania.common.entity.EntityVineBall;
import vazkii.botania.common.item.ModItems;
import vazkii.botania.common.item.block.ItemBlockTinyPotato;
import vazkii.botania.common.item.block.ItemBlockWithSpecialRenderer;
import vazkii.botania.common.lib.LibBlockNames;
import vazkii.botania.mixin.AccessorDispenserBlock;
import vazkii.botania.xplat.IXplatAbstractions;

import java.util.Locale;
import java.util.function.BiConsumer;

import static vazkii.botania.common.lib.ResourceLocationHelper.prefix;

public final class ModBlocks {
	private static final BlockBehaviour.StateArgumentPredicate<EntityType<?>> NO_SPAWN = (state, world, pos, et) -> false;
	private static final BlockBehaviour.StatePredicate NO_SUFFOCATION = (state, world, pos) -> false;

	public static final Block whiteFlower = new BlockModFlower(DyeColor.WHITE, BlockBehaviour.Properties.of(Material.PLANT).noCollission().strength(0).sound(SoundType.GRASS));
	public static final Block orangeFlower = new BlockModFlower(DyeColor.ORANGE, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block magentaFlower = new BlockModFlower(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block lightBlueFlower = new BlockModFlower(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block yellowFlower = new BlockModFlower(DyeColor.YELLOW, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block limeFlower = new BlockModFlower(DyeColor.LIME, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block pinkFlower = new BlockModFlower(DyeColor.PINK, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block grayFlower = new BlockModFlower(DyeColor.GRAY, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block lightGrayFlower = new BlockModFlower(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block cyanFlower = new BlockModFlower(DyeColor.CYAN, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block purpleFlower = new BlockModFlower(DyeColor.PURPLE, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block blueFlower = new BlockModFlower(DyeColor.BLUE, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block brownFlower = new BlockModFlower(DyeColor.BROWN, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block greenFlower = new BlockModFlower(DyeColor.GREEN, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block redFlower = new BlockModFlower(DyeColor.RED, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block blackFlower = new BlockModFlower(DyeColor.BLACK, BlockBehaviour.Properties.copy(whiteFlower));

	public static final Block whiteShinyFlower = new BlockShinyFlower(DyeColor.WHITE, BlockBehaviour.Properties.copy(whiteFlower).lightLevel(s -> 15));
	public static final Block orangeShinyFlower = new BlockShinyFlower(DyeColor.ORANGE, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block magentaShinyFlower = new BlockShinyFlower(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block lightBlueShinyFlower = new BlockShinyFlower(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block yellowShinyFlower = new BlockShinyFlower(DyeColor.YELLOW, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block limeShinyFlower = new BlockShinyFlower(DyeColor.LIME, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block pinkShinyFlower = new BlockShinyFlower(DyeColor.PINK, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block grayShinyFlower = new BlockShinyFlower(DyeColor.GRAY, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block lightGrayShinyFlower = new BlockShinyFlower(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block cyanShinyFlower = new BlockShinyFlower(DyeColor.CYAN, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block purpleShinyFlower = new BlockShinyFlower(DyeColor.PURPLE, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block blueShinyFlower = new BlockShinyFlower(DyeColor.BLUE, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block brownShinyFlower = new BlockShinyFlower(DyeColor.BROWN, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block greenShinyFlower = new BlockShinyFlower(DyeColor.GREEN, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block redShinyFlower = new BlockShinyFlower(DyeColor.RED, BlockBehaviour.Properties.copy(whiteShinyFlower));
	public static final Block blackShinyFlower = new BlockShinyFlower(DyeColor.BLACK, BlockBehaviour.Properties.copy(whiteShinyFlower));

	public static final Block whiteBuriedPetals = new BlockBuriedPetals(DyeColor.WHITE, BlockBehaviour.Properties.copy(whiteFlower).lightLevel(s -> 4));
	public static final Block orangeBuriedPetals = new BlockBuriedPetals(DyeColor.ORANGE, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block magentaBuriedPetals = new BlockBuriedPetals(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block lightBlueBuriedPetals = new BlockBuriedPetals(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block yellowBuriedPetals = new BlockBuriedPetals(DyeColor.YELLOW, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block limeBuriedPetals = new BlockBuriedPetals(DyeColor.LIME, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block pinkBuriedPetals = new BlockBuriedPetals(DyeColor.PINK, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block grayBuriedPetals = new BlockBuriedPetals(DyeColor.GRAY, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block lightGrayBuriedPetals = new BlockBuriedPetals(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block cyanBuriedPetals = new BlockBuriedPetals(DyeColor.CYAN, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block purpleBuriedPetals = new BlockBuriedPetals(DyeColor.PURPLE, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block blueBuriedPetals = new BlockBuriedPetals(DyeColor.BLUE, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block brownBuriedPetals = new BlockBuriedPetals(DyeColor.BROWN, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block greenBuriedPetals = new BlockBuriedPetals(DyeColor.GREEN, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block redBuriedPetals = new BlockBuriedPetals(DyeColor.RED, BlockBehaviour.Properties.copy(whiteBuriedPetals));
	public static final Block blackBuriedPetals = new BlockBuriedPetals(DyeColor.BLACK, BlockBehaviour.Properties.copy(whiteBuriedPetals));

	public static final BlockBehaviour.Properties FLOATING_PROPS = BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F).sound(SoundType.GRAVEL).lightLevel(s -> 15);
	public static final Block whiteFloatingFlower = new BlockFloatingFlower(DyeColor.WHITE, FLOATING_PROPS);
	public static final Block orangeFloatingFlower = new BlockFloatingFlower(DyeColor.ORANGE, FLOATING_PROPS);
	public static final Block magentaFloatingFlower = new BlockFloatingFlower(DyeColor.MAGENTA, FLOATING_PROPS);
	public static final Block lightBlueFloatingFlower = new BlockFloatingFlower(DyeColor.LIGHT_BLUE, FLOATING_PROPS);
	public static final Block yellowFloatingFlower = new BlockFloatingFlower(DyeColor.YELLOW, FLOATING_PROPS);
	public static final Block limeFloatingFlower = new BlockFloatingFlower(DyeColor.LIME, FLOATING_PROPS);
	public static final Block pinkFloatingFlower = new BlockFloatingFlower(DyeColor.PINK, FLOATING_PROPS);
	public static final Block grayFloatingFlower = new BlockFloatingFlower(DyeColor.GRAY, FLOATING_PROPS);
	public static final Block lightGrayFloatingFlower = new BlockFloatingFlower(DyeColor.LIGHT_GRAY, FLOATING_PROPS);
	public static final Block cyanFloatingFlower = new BlockFloatingFlower(DyeColor.CYAN, FLOATING_PROPS);
	public static final Block purpleFloatingFlower = new BlockFloatingFlower(DyeColor.PURPLE, FLOATING_PROPS);
	public static final Block blueFloatingFlower = new BlockFloatingFlower(DyeColor.BLUE, FLOATING_PROPS);
	public static final Block brownFloatingFlower = new BlockFloatingFlower(DyeColor.BROWN, FLOATING_PROPS);
	public static final Block greenFloatingFlower = new BlockFloatingFlower(DyeColor.GREEN, FLOATING_PROPS);
	public static final Block redFloatingFlower = new BlockFloatingFlower(DyeColor.RED, FLOATING_PROPS);
	public static final Block blackFloatingFlower = new BlockFloatingFlower(DyeColor.BLACK, FLOATING_PROPS);

	public static final Block petalBlockWhite = new BlockPetalBlock(DyeColor.WHITE, BlockBehaviour.Properties.of(Material.PLANT).strength(0.4F).sound(SoundType.GRASS));
	public static final Block petalBlockOrange = new BlockPetalBlock(DyeColor.ORANGE, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockMagenta = new BlockPetalBlock(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockLightBlue = new BlockPetalBlock(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockYellow = new BlockPetalBlock(DyeColor.YELLOW, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockLime = new BlockPetalBlock(DyeColor.LIME, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockPink = new BlockPetalBlock(DyeColor.PINK, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockGray = new BlockPetalBlock(DyeColor.GRAY, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockSilver = new BlockPetalBlock(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockCyan = new BlockPetalBlock(DyeColor.CYAN, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockPurple = new BlockPetalBlock(DyeColor.PURPLE, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockBlue = new BlockPetalBlock(DyeColor.BLUE, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockBrown = new BlockPetalBlock(DyeColor.BROWN, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockGreen = new BlockPetalBlock(DyeColor.GREEN, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockRed = new BlockPetalBlock(DyeColor.RED, BlockBehaviour.Properties.copy(petalBlockWhite));
	public static final Block petalBlockBlack = new BlockPetalBlock(DyeColor.BLACK, BlockBehaviour.Properties.copy(petalBlockWhite));

	public static final Block whiteMushroom = new BlockModMushroom(DyeColor.WHITE, BlockBehaviour.Properties.copy(whiteFlower).lightLevel(s -> 3));
	public static final Block orangeMushroom = new BlockModMushroom(DyeColor.ORANGE, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block magentaMushroom = new BlockModMushroom(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block lightBlueMushroom = new BlockModMushroom(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block yellowMushroom = new BlockModMushroom(DyeColor.YELLOW, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block limeMushroom = new BlockModMushroom(DyeColor.LIME, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block pinkMushroom = new BlockModMushroom(DyeColor.PINK, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block grayMushroom = new BlockModMushroom(DyeColor.GRAY, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block lightGrayMushroom = new BlockModMushroom(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block cyanMushroom = new BlockModMushroom(DyeColor.CYAN, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block purpleMushroom = new BlockModMushroom(DyeColor.PURPLE, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block blueMushroom = new BlockModMushroom(DyeColor.BLUE, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block brownMushroom = new BlockModMushroom(DyeColor.BROWN, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block greenMushroom = new BlockModMushroom(DyeColor.GREEN, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block redMushroom = new BlockModMushroom(DyeColor.RED, BlockBehaviour.Properties.copy(whiteMushroom));
	public static final Block blackMushroom = new BlockModMushroom(DyeColor.BLACK, BlockBehaviour.Properties.copy(whiteMushroom));

	public static final Block doubleFlowerWhite = new BlockModDoubleFlower(DyeColor.WHITE, BlockBehaviour.Properties.copy(whiteFlower));
	public static final Block doubleFlowerOrange = new BlockModDoubleFlower(DyeColor.ORANGE, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerMagenta = new BlockModDoubleFlower(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerLightBlue = new BlockModDoubleFlower(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerYellow = new BlockModDoubleFlower(DyeColor.YELLOW, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerLime = new BlockModDoubleFlower(DyeColor.LIME, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerPink = new BlockModDoubleFlower(DyeColor.PINK, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerGray = new BlockModDoubleFlower(DyeColor.GRAY, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerLightGray = new BlockModDoubleFlower(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerCyan = new BlockModDoubleFlower(DyeColor.CYAN, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerPurple = new BlockModDoubleFlower(DyeColor.PURPLE, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerBlue = new BlockModDoubleFlower(DyeColor.BLUE, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerBrown = new BlockModDoubleFlower(DyeColor.BROWN, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerGreen = new BlockModDoubleFlower(DyeColor.GREEN, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerRed = new BlockModDoubleFlower(DyeColor.RED, BlockBehaviour.Properties.copy(doubleFlowerWhite));
	public static final Block doubleFlowerBlack = new BlockModDoubleFlower(DyeColor.BLACK, BlockBehaviour.Properties.copy(doubleFlowerWhite));

	public static final Block defaultAltar = new BlockAltar(BlockAltar.Variant.DEFAULT, BlockBehaviour.Properties.of(Material.STONE).strength(3.5F).sound(SoundType.STONE)
			.requiresCorrectToolForDrops()
			.lightLevel(s -> s.getValue(BlockAltar.FLUID) == IPetalApothecary.State.LAVA ? 15 : 0));
	public static final Block mossyAltar = new BlockAltar(BlockAltar.Variant.MOSSY, BlockBehaviour.Properties.copy(defaultAltar));
	public static final Block forestAltar = new BlockAltar(BlockAltar.Variant.FOREST, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.TUFF));
	public static final Block plainsAltar = new BlockAltar(BlockAltar.Variant.PLAINS, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.CALCITE));
	public static final Block mountainAltar = new BlockAltar(BlockAltar.Variant.MOUNTAIN, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.DEEPSLATE_TILES));
	public static final Block fungalAltar = new BlockAltar(BlockAltar.Variant.FUNGAL, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.DEEPSLATE_BRICKS));
	public static final Block swampAltar = new BlockAltar(BlockAltar.Variant.SWAMP, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.DEEPSLATE_TILES));
	public static final Block desertAltar = new BlockAltar(BlockAltar.Variant.DESERT, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.DEEPSLATE));
	public static final Block taigaAltar = new BlockAltar(BlockAltar.Variant.TAIGA, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.DEEPSLATE));
	public static final Block mesaAltar = new BlockAltar(BlockAltar.Variant.MESA, BlockBehaviour.Properties.copy(defaultAltar).sound(SoundType.CALCITE));

	public static final Block livingrock = new BlockMod(BlockBehaviour.Properties.of(Material.STONE).strength(2, 10).sound(SoundType.STONE).requiresCorrectToolForDrops());
	public static final Block livingrockBrick = new BlockMod(BlockBehaviour.Properties.copy(livingrock));
	public static final Block livingrockBrickChiseled = new BlockMod(BlockBehaviour.Properties.copy(livingrock));
	public static final Block livingrockBrickCracked = new BlockMod(BlockBehaviour.Properties.copy(livingrock));
	public static final Block livingrockBrickMossy = new BlockMod(BlockBehaviour.Properties.copy(livingrock));

	public static final Block livingwoodLog = new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(2).sound(SoundType.WOOD)); // TODO color
	public static final Block livingwoodLogStripped = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block livingwoodLogGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog).lightLevel(b -> 12));
	public static final Block livingwoodLogStrippedGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog).lightLevel(b -> 8));
	public static final Block livingwood = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block livingwoodStripped = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block livingwoodGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLogGlimmering));
	public static final Block livingwoodStrippedGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLogStrippedGlimmering));
	public static final Block livingwoodPlanks = new BlockMod(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block livingwoodPlanksMossy = new BlockMod(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block livingwoodFramed = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block livingwoodPatternFramed = new BlockMod(BlockBehaviour.Properties.copy(livingwoodLog));

	public static final Block dreamwoodLog = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block dreamwoodLogStripped = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block dreamwoodLogGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLogGlimmering));
	public static final Block dreamwoodLogStrippedGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLogStrippedGlimmering));
	public static final Block dreamwood = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block dreamwoodStripped = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLog));
	public static final Block dreamwoodGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLogGlimmering));
	public static final Block dreamwoodStrippedGlimmering = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwoodLogStrippedGlimmering));
	public static final Block dreamwoodPlanks = new BlockMod(BlockBehaviour.Properties.copy(livingwood));
	public static final Block dreamwoodPlanksMossy = new BlockMod(BlockBehaviour.Properties.copy(livingwood));
	public static final Block dreamwoodFramed = new RotatedPillarBlock(BlockBehaviour.Properties.copy(livingwood));
	public static final Block dreamwoodPatternFramed = new BlockMod(BlockBehaviour.Properties.copy(livingwood));

	public static final Block manaSpreader = new BlockSpreader(BlockSpreader.Variant.MANA, BlockBehaviour.Properties.copy(livingwood).isValidSpawn(NO_SPAWN));
	public static final Block redstoneSpreader = new BlockSpreader(BlockSpreader.Variant.REDSTONE, BlockBehaviour.Properties.copy(livingwood).isValidSpawn(NO_SPAWN));
	public static final Block elvenSpreader = new BlockSpreader(BlockSpreader.Variant.ELVEN, BlockBehaviour.Properties.copy(livingwood).isValidSpawn(NO_SPAWN));
	public static final Block gaiaSpreader = new BlockSpreader(BlockSpreader.Variant.GAIA, BlockBehaviour.Properties.copy(livingwood).isValidSpawn(NO_SPAWN));

	public static final Block manaPool = new BlockPool(BlockPool.Variant.DEFAULT, BlockBehaviour.Properties.copy(livingrock));
	public static final Block creativePool = new BlockPool(BlockPool.Variant.CREATIVE, BlockBehaviour.Properties.copy(livingrock));
	public static final Block dilutedPool = new BlockPool(BlockPool.Variant.DILUTED, BlockBehaviour.Properties.copy(livingrock));
	public static final Block fabulousPool = new BlockPool(BlockPool.Variant.FABULOUS, BlockBehaviour.Properties.copy(livingrock));
	public static final Block alchemyCatalyst = new BlockAlchemyCatalyst(BlockBehaviour.Properties.copy(livingrock));
	public static final Block conjurationCatalyst = new BlockConjurationCatalyst(BlockBehaviour.Properties.copy(livingrock));

	public static final Block manasteelBlock = new BlockMod(BlockBehaviour.Properties.of(Material.METAL).strength(3, 10).sound(SoundType.METAL).requiresCorrectToolForDrops());
	public static final Block terrasteelBlock = new BlockMod(BlockBehaviour.Properties.copy(manasteelBlock));
	public static final Block elementiumBlock = new BlockMod(BlockBehaviour.Properties.copy(manasteelBlock));
	public static final Block manaDiamondBlock = new BlockMod(BlockBehaviour.Properties.copy(manasteelBlock));
	public static final Block dragonstoneBlock = new BlockMod(BlockBehaviour.Properties.copy(manasteelBlock));

	public static final Block manaGlass = new BlockModGlass(BlockBehaviour.Properties.copy(Blocks.GLASS).lightLevel(s -> 15).isViewBlocking(NO_SUFFOCATION).isSuffocating(NO_SUFFOCATION).isValidSpawn(NO_SPAWN));
	public static final Block elfGlass = new BlockModGlass(BlockBehaviour.Properties.copy(manaGlass).isViewBlocking(NO_SUFFOCATION).isSuffocating(NO_SUFFOCATION).isValidSpawn(NO_SPAWN));
	public static final Block bifrost = new BlockBifrost(BlockBehaviour.Properties.of(Material.GLASS).strength(-1, 0.3F)
			.lightLevel(s -> 15).sound(SoundType.GLASS).noOcclusion().isViewBlocking(NO_SUFFOCATION).isSuffocating(NO_SUFFOCATION).isValidSpawn(NO_SPAWN));
	public static final Block bifrostPerm = new BlockBifrostPerm(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F)
			.lightLevel(s -> 15).sound(SoundType.GLASS).noOcclusion().isViewBlocking(NO_SUFFOCATION).isSuffocating(NO_SUFFOCATION).isValidSpawn(NO_SPAWN));

	public static final Block runeAltar = new BlockRuneAltar(BlockBehaviour.Properties.copy(livingrock).requiresCorrectToolForDrops());
	public static final Block enchanter = new BlockEnchanter(BlockBehaviour.Properties.of(Material.STONE).strength(3, 5).lightLevel(s -> 15).sound(SoundType.STONE));
	public static final Block brewery = new BlockBrewery(BlockBehaviour.Properties.copy(livingrock));
	public static final Block terraPlate = new BlockTerraPlate(BlockBehaviour.Properties.of(Material.METAL).strength(3, 10).sound(SoundType.METAL).requiresCorrectToolForDrops());
	public static final Block alfPortal = new BlockAlfPortal(BlockBehaviour.Properties.of(Material.WOOD).strength(10).sound(SoundType.WOOD)
			.lightLevel(s -> s.getValue(BotaniaStateProps.ALFPORTAL_STATE) != AlfPortalState.OFF ? 15 : 0));

	public static final Block manaPylon = new BlockPylon(BlockPylon.Variant.MANA, BlockBehaviour.Properties.of(Material.METAL).strength(5.5F).sound(SoundType.METAL).lightLevel(s -> 7).requiresCorrectToolForDrops());
	public static final Block naturaPylon = new BlockPylon(BlockPylon.Variant.NATURA, BlockBehaviour.Properties.copy(manaPylon));
	public static final Block gaiaPylon = new BlockPylon(BlockPylon.Variant.GAIA, BlockBehaviour.Properties.copy(manaPylon));

	public static final Block distributor = new BlockDistributor(BlockBehaviour.Properties.of(Material.STONE).strength(2, 10).sound(SoundType.STONE).requiresCorrectToolForDrops());
	public static final Block manaVoid = new BlockManaVoid(BlockBehaviour.Properties.of(Material.STONE).strength(2, 2000).sound(SoundType.STONE).requiresCorrectToolForDrops());
	public static final Block manaDetector = new BlockManaDetector(BlockBehaviour.Properties.copy(livingrock));
	public static final Block pistonRelay = new BlockPistonRelay(BlockBehaviour.Properties.of(Material.METAL).strength(2, 10).sound(SoundType.METAL).isValidSpawn(NO_SPAWN));
	public static final Block turntable = new BlockTurntable(BlockBehaviour.Properties.copy(livingwood));
	public static final Block tinyPlanet = new BlockTinyPlanet(BlockBehaviour.Properties.of(Material.STONE).strength(20, 100).sound(SoundType.STONE).requiresCorrectToolForDrops());
	public static final Block wildDrum = new BlockForestDrum(BlockForestDrum.Variant.WILD, BlockBehaviour.Properties.copy(livingwood));
	public static final Block gatheringDrum = new BlockForestDrum(BlockForestDrum.Variant.GATHERING, BlockBehaviour.Properties.copy(livingwood));
	public static final Block canopyDrum = new BlockForestDrum(BlockForestDrum.Variant.CANOPY, BlockBehaviour.Properties.copy(livingwood));
	public static final Block spawnerClaw = new BlockSpawnerClaw(BlockBehaviour.Properties.of(Material.METAL).strength(3).requiresCorrectToolForDrops());
	public static final Block rfGenerator = new BlockRFGenerator(BlockBehaviour.Properties.copy(livingrock));
	public static final Block prism = new BlockPrism(BlockBehaviour.Properties.copy(elfGlass).noCollission());
	public static final Block pump = new BlockPump(BlockBehaviour.Properties.copy(livingrock));
	public static final Block sparkChanger = new BlockSparkChanger(BlockBehaviour.Properties.copy(livingrock));
	public static final Block manaBomb = new BlockManaBomb(BlockBehaviour.Properties.of(Material.WOOD).strength(12).sound(SoundType.WOOD));
	public static final Block bellows = new BlockBellows(BlockBehaviour.Properties.copy(livingwood));

	public static final Block openCrate = new BlockOpenCrate(BlockBehaviour.Properties.copy(livingwood));
	public static final Block craftCrate = new BlockCraftyCrate(BlockBehaviour.Properties.copy(livingwood));
	public static final Block forestEye = new BlockForestEye(BlockBehaviour.Properties.of(Material.METAL).strength(5, 10).sound(SoundType.METAL).requiresCorrectToolForDrops());
	public static final Block solidVines = new BlockSolidVines(BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).strength(0.2F).sound(SoundType.VINE).noOcclusion());
	public static final Block abstrusePlatform = new BlockPlatform(BlockPlatform.Variant.ABSTRUSE, BlockBehaviour.Properties.of(Material.WOOD).strength(2, 5).sound(SoundType.WOOD).isValidSpawn(NO_SPAWN).noOcclusion().isViewBlocking(NO_SUFFOCATION).isSuffocating(NO_SUFFOCATION));
	public static final Block spectralPlatform = new BlockPlatform(BlockPlatform.Variant.SPECTRAL, BlockBehaviour.Properties.copy(abstrusePlatform));
	public static final Block infrangiblePlatform = new BlockPlatform(BlockPlatform.Variant.INFRANGIBLE, BlockBehaviour.Properties.of(Material.WOOD).strength(-1, Float.MAX_VALUE).sound(SoundType.WOOD).isValidSpawn(NO_SPAWN).noOcclusion());
	public static final Block tinyPotato = new BlockTinyPotato(BlockBehaviour.Properties.of(Material.WOOL).strength(0.25F));
	public static final Block enderEye = new BlockEnderEye(BlockBehaviour.Properties.copy(manasteelBlock));
	public static final Block redStringContainer = new BlockRedStringContainer(BlockBehaviour.Properties.copy(livingrock));
	public static final Block redStringDispenser = new BlockRedStringDispenser(BlockBehaviour.Properties.copy(livingrock));
	public static final Block redStringFertilizer = new BlockRedStringFertilizer(BlockBehaviour.Properties.copy(livingrock));
	public static final Block redStringComparator = new BlockRedStringComparator(BlockBehaviour.Properties.copy(livingrock));
	public static final Block redStringRelay = new BlockRedStringRelay(BlockBehaviour.Properties.copy(livingrock));
	public static final Block redStringInterceptor = new BlockRedStringInterceptor(BlockBehaviour.Properties.copy(livingrock));

	public static final Block corporeaIndex = new BlockCorporeaIndex(BlockBehaviour.Properties.of(Material.METAL).strength(5.5F).sound(SoundType.METAL).noOcclusion().requiresCorrectToolForDrops());
	public static final Block corporeaFunnel = new BlockCorporeaFunnel(BlockBehaviour.Properties.of(Material.METAL).strength(5.5F).sound(SoundType.METAL).requiresCorrectToolForDrops());
	public static final Block corporeaInterceptor = new BlockCorporeaInterceptor(BlockBehaviour.Properties.of(Material.METAL).strength(5.5F).sound(SoundType.METAL).requiresCorrectToolForDrops());
	public static final Block corporeaCrystalCube = new BlockCorporeaCrystalCube(BlockBehaviour.Properties.copy(corporeaInterceptor));
	public static final Block corporeaRetainer = new BlockCorporeaRetainer(BlockBehaviour.Properties.copy(corporeaInterceptor));

	public static final Block corporeaBlock = new BlockMod(BlockBehaviour.Properties.of(Material.METAL).strength(5.5F).sound(SoundType.METAL).requiresCorrectToolForDrops());
	public static final Block corporeaBrick = new BlockMod(BlockBehaviour.Properties.copy(corporeaBlock));
	public static final SlabBlock corporeaSlab = new SlabBlock(BlockBehaviour.Properties.copy(corporeaBlock));
	public static final StairBlock corporeaStairs = new BlockModStairs(corporeaBlock.defaultBlockState(), BlockBehaviour.Properties.copy(corporeaBlock));
	public static final SlabBlock corporeaBrickSlab = new SlabBlock(BlockBehaviour.Properties.copy(corporeaBrick));
	public static final StairBlock corporeaBrickStairs = new BlockModStairs(corporeaBrick.defaultBlockState(), BlockBehaviour.Properties.copy(corporeaBrick));
	public static final Block corporeaBrickWall = new WallBlock(BlockBehaviour.Properties.copy(corporeaBrick));

	public static final Block incensePlate = new BlockIncensePlate(BlockBehaviour.Properties.copy(livingwood));
	public static final Block hourglass = new BlockHourglass(BlockBehaviour.Properties.of(Material.METAL).strength(2).sound(SoundType.METAL));
	public static final Block ghostRail = new BlockGhostRail(BlockBehaviour.Properties.copy(Blocks.RAIL));
	public static final Block lightRelayDefault = new BlockLightRelay(LuminizerVariant.DEFAULT, BlockBehaviour.Properties.of(Material.GLASS).noCollission());
	public static final Block lightRelayDetector = new BlockLightRelay(LuminizerVariant.DETECTOR, BlockBehaviour.Properties.copy(lightRelayDefault));
	public static final Block lightRelayFork = new BlockLightRelay(LuminizerVariant.FORK, BlockBehaviour.Properties.copy(lightRelayDefault));
	public static final Block lightRelayToggle = new BlockLightRelay(LuminizerVariant.TOGGLE, BlockBehaviour.Properties.copy(lightRelayDefault));
	public static final Block lightLauncher = new BlockLightLauncher(BlockBehaviour.Properties.copy(livingwood));
	public static final Block cacophonium = new BlockCacophonium(BlockBehaviour.Properties.of(Material.WOOD).strength(0.8F));
	public static final Block cellBlock = new BlockCell(BlockBehaviour.Properties.of(Material.VEGETABLE).sound(SoundType.WOOL));
	public static final Block teruTeruBozu = new BlockTeruTeruBozu(BlockBehaviour.Properties.of(Material.WOOL));
	public static final Block avatar = new BlockAvatar(BlockBehaviour.Properties.copy(livingwood));
	public static final Block fakeAir = new BlockFakeAir(BlockBehaviour.Properties.of(Material.STRUCTURAL_AIR).air().randomTicks());
	public static final Block root = new BlockRoot(BlockBehaviour.Properties.of(Material.PLANT).strength(1.2F).sound(SoundType.WOOD));
	public static final Block felPumpkin = new BlockFelPumpkin(BlockBehaviour.Properties.copy(Blocks.CARVED_PUMPKIN));
	public static final Block cocoon = new BlockCocoon(BlockBehaviour.Properties.of(Material.WOOL).strength(3, 60).sound(SoundType.WOOL));
	public static final Block enchantedSoil = new BlockEnchantedSoil(BlockBehaviour.Properties.of(Material.GRASS).strength(0.6F).sound(SoundType.GRASS));
	public static final Block animatedTorch = new BlockAnimatedTorch(BlockBehaviour.Properties.of(Material.DECORATION).lightLevel(s -> 7).noOcclusion());
	public static final Block starfield = new BlockStarfield(BlockBehaviour.Properties.of(Material.METAL).strength(5, 2000).sound(SoundType.METAL));

	public static final Block azulejo0 = new BlockMod(BlockBehaviour.Properties.of(Material.STONE).strength(2, 5).sound(SoundType.STONE).requiresCorrectToolForDrops());
	public static final Block azulejo1 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo2 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo3 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo4 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo5 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo6 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo7 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo8 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo9 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo10 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo11 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo12 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo13 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo14 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block azulejo15 = new BlockMod(BlockBehaviour.Properties.copy(azulejo0));
	public static final Block manaFlame = new BlockManaFlame(BlockBehaviour.Properties.of(Material.DECORATION).sound(SoundType.WOOL).lightLevel(s -> 15).noCollission());
	public static final Block blazeBlock = new BlockMod(BlockBehaviour.Properties.copy(manasteelBlock).lightLevel(s -> 15));
	public static final Block gaiaHeadWall = new BlockGaiaHeadWall(BlockBehaviour.Properties.of(Material.DECORATION).strength(1));
	public static final Block gaiaHead = new BlockGaiaHead(BlockBehaviour.Properties.of(Material.DECORATION).strength(1));
	public static final Block shimmerrock = new BlockMod(BlockBehaviour.Properties.copy(livingrock));
	public static final Block shimmerwoodPlanks = new BlockMod(BlockBehaviour.Properties.copy(livingwood));
	public static final Block dryGrass = new BlockAltGrass(BlockAltGrass.Variant.DRY, BlockBehaviour.Properties.of(Material.GRASS).strength(0.6F).randomTicks().sound(SoundType.GRASS));
	public static final Block goldenGrass = new BlockAltGrass(BlockAltGrass.Variant.GOLDEN, BlockBehaviour.Properties.copy(dryGrass));
	public static final Block vividGrass = new BlockAltGrass(BlockAltGrass.Variant.VIVID, BlockBehaviour.Properties.copy(dryGrass));
	public static final Block scorchedGrass = new BlockAltGrass(BlockAltGrass.Variant.SCORCHED, BlockBehaviour.Properties.copy(dryGrass));
	public static final Block infusedGrass = new BlockAltGrass(BlockAltGrass.Variant.INFUSED, BlockBehaviour.Properties.copy(dryGrass));
	public static final Block mutatedGrass = new BlockAltGrass(BlockAltGrass.Variant.MUTATED, BlockBehaviour.Properties.copy(dryGrass));

	public static final Block motifDaybloom = new BlockMotifFlower(MobEffects.BLINDNESS, 15, BlockBehaviour.Properties.copy(Blocks.POPPY), true);
	public static final Block motifNightshade = new BlockMotifFlower(MobEffects.POISON, 20, BlockBehaviour.Properties.copy(Blocks.POPPY), true);
	public static final Block motifHydroangeas = new BlockMotifFlower(MobEffects.UNLUCK, 10, BlockBehaviour.Properties.copy(Blocks.POPPY), false);

	public static void registerBlocks(BiConsumer<Block, ResourceLocation> r) {
		r.accept(whiteFlower, prefix("white" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(orangeFlower, prefix("orange" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(magentaFlower, prefix("magenta" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(lightBlueFlower, prefix("light_blue" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(yellowFlower, prefix("yellow" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(limeFlower, prefix("lime" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(pinkFlower, prefix("pink" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(grayFlower, prefix("gray" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(lightGrayFlower, prefix("light_gray" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(cyanFlower, prefix("cyan" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(purpleFlower, prefix("purple" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(blueFlower, prefix("blue" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(brownFlower, prefix("brown" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(greenFlower, prefix("green" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(redFlower, prefix("red" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(blackFlower, prefix("black" + LibBlockNames.MYSTICAL_FLOWER_SUFFIX));
		r.accept(whiteShinyFlower, prefix("white" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(orangeShinyFlower, prefix("orange" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(magentaShinyFlower, prefix("magenta" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(lightBlueShinyFlower, prefix("light_blue" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(yellowShinyFlower, prefix("yellow" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(limeShinyFlower, prefix("lime" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(pinkShinyFlower, prefix("pink" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(grayShinyFlower, prefix("gray" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(lightGrayShinyFlower, prefix("light_gray" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(cyanShinyFlower, prefix("cyan" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(purpleShinyFlower, prefix("purple" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(blueShinyFlower, prefix("blue" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(brownShinyFlower, prefix("brown" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(greenShinyFlower, prefix("green" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(redShinyFlower, prefix("red" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(blackShinyFlower, prefix("black" + LibBlockNames.SHINY_FLOWER_SUFFIX));
		r.accept(whiteBuriedPetals, prefix("white" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(orangeBuriedPetals, prefix("orange" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(magentaBuriedPetals, prefix("magenta" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(lightBlueBuriedPetals, prefix("light_blue" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(yellowBuriedPetals, prefix("yellow" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(limeBuriedPetals, prefix("lime" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(pinkBuriedPetals, prefix("pink" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(grayBuriedPetals, prefix("gray" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(lightGrayBuriedPetals, prefix("light_gray" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(cyanBuriedPetals, prefix("cyan" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(purpleBuriedPetals, prefix("purple" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(blueBuriedPetals, prefix("blue" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(brownBuriedPetals, prefix("brown" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(greenBuriedPetals, prefix("green" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(redBuriedPetals, prefix("red" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(blackBuriedPetals, prefix("black" + LibBlockNames.BURIED_PETALS_SUFFIX));
		r.accept(whiteFloatingFlower, prefix("white" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(orangeFloatingFlower, prefix("orange" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(magentaFloatingFlower, prefix("magenta" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(lightBlueFloatingFlower, prefix("light_blue" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(yellowFloatingFlower, prefix("yellow" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(limeFloatingFlower, prefix("lime" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(pinkFloatingFlower, prefix("pink" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(grayFloatingFlower, prefix("gray" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(lightGrayFloatingFlower, prefix("light_gray" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(cyanFloatingFlower, prefix("cyan" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(purpleFloatingFlower, prefix("purple" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(blueFloatingFlower, prefix("blue" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(brownFloatingFlower, prefix("brown" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(greenFloatingFlower, prefix("green" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(redFloatingFlower, prefix("red" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(blackFloatingFlower, prefix("black" + LibBlockNames.FLOATING_FLOWER_SUFFIX));
		r.accept(petalBlockWhite, prefix("white" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockOrange, prefix("orange" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockMagenta, prefix("magenta" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockLightBlue, prefix("light_blue" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockYellow, prefix("yellow" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockLime, prefix("lime" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockPink, prefix("pink" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockGray, prefix("gray" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockSilver, prefix("light_gray" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockCyan, prefix("cyan" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockPurple, prefix("purple" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockBlue, prefix("blue" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockBrown, prefix("brown" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockGreen, prefix("green" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockRed, prefix("red" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(petalBlockBlack, prefix("black" + LibBlockNames.PETAL_BLOCK_SUFFIX));
		r.accept(whiteMushroom, prefix("white" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(orangeMushroom, prefix("orange" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(magentaMushroom, prefix("magenta" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(lightBlueMushroom, prefix("light_blue" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(yellowMushroom, prefix("yellow" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(limeMushroom, prefix("lime" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(pinkMushroom, prefix("pink" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(grayMushroom, prefix("gray" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(lightGrayMushroom, prefix("light_gray" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(cyanMushroom, prefix("cyan" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(purpleMushroom, prefix("purple" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(blueMushroom, prefix("blue" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(brownMushroom, prefix("brown" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(greenMushroom, prefix("green" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(redMushroom, prefix("red" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(blackMushroom, prefix("black" + LibBlockNames.MUSHROOM_SUFFIX));
		r.accept(doubleFlowerWhite, prefix("white" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerOrange, prefix("orange" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerMagenta, prefix("magenta" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerLightBlue, prefix("light_blue" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerYellow, prefix("yellow" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerLime, prefix("lime" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerPink, prefix("pink" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerGray, prefix("gray" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerLightGray, prefix("light_gray" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerCyan, prefix("cyan" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerPurple, prefix("purple" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerBlue, prefix("blue" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerBrown, prefix("brown" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerGreen, prefix("green" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerRed, prefix("red" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(doubleFlowerBlack, prefix("black" + LibBlockNames.DOUBLE_FLOWER_SUFFIX));
		r.accept(defaultAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.DEFAULT.name().toLowerCase(Locale.ROOT)));
		r.accept(forestAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.FOREST.name().toLowerCase(Locale.ROOT)));
		r.accept(plainsAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.PLAINS.name().toLowerCase(Locale.ROOT)));
		r.accept(mountainAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.MOUNTAIN.name().toLowerCase(Locale.ROOT)));
		r.accept(fungalAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.FUNGAL.name().toLowerCase(Locale.ROOT)));
		r.accept(swampAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.SWAMP.name().toLowerCase(Locale.ROOT)));
		r.accept(desertAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.DESERT.name().toLowerCase(Locale.ROOT)));
		r.accept(taigaAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.TAIGA.name().toLowerCase(Locale.ROOT)));
		r.accept(mesaAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.MESA.name().toLowerCase(Locale.ROOT)));
		r.accept(mossyAltar, prefix(LibBlockNames.APOTHECARY_PREFIX + BlockAltar.Variant.MOSSY.name().toLowerCase(Locale.ROOT)));
		r.accept(livingrock, prefix(LibBlockNames.LIVING_ROCK));
		r.accept(livingrockBrick, prefix(LibBlockNames.LIVING_ROCK_BRICK));
		r.accept(livingrockBrickChiseled, prefix(LibBlockNames.LIVING_ROCK_BRICK_CHISELED));
		r.accept(livingrockBrickCracked, prefix(LibBlockNames.LIVING_ROCK_BRICK_CRACKED));
		r.accept(livingrockBrickMossy, prefix(LibBlockNames.LIVING_ROCK_BRICK_MOSSY));
		r.accept(livingwoodLog, prefix(LibBlockNames.LIVING_WOOD_LOG));
		r.accept(livingwoodLogStripped, prefix(LibBlockNames.LIVING_WOOD_LOG_STRIPPED));
		r.accept(livingwoodLogGlimmering, prefix(LibBlockNames.LIVING_WOOD_LOG_GLIMMERING));
		r.accept(livingwoodLogStrippedGlimmering, prefix(LibBlockNames.LIVING_WOOD_LOG_GLIMMERING_STRIPPED));
		r.accept(livingwood, prefix(LibBlockNames.LIVING_WOOD));
		r.accept(livingwoodGlimmering, prefix(LibBlockNames.LIVING_WOOD_GLIMMERING));
		r.accept(livingwoodStripped, prefix(LibBlockNames.LIVING_WOOD_STRIPPED));
		r.accept(livingwoodStrippedGlimmering, prefix(LibBlockNames.LIVING_WOOD_GLIMMERING_STRIPPED));
		r.accept(livingwoodPlanks, prefix(LibBlockNames.LIVING_WOOD_PLANKS));
		r.accept(livingwoodPlanksMossy, prefix(LibBlockNames.LIVING_WOOD_PLANKS_MOSSY));
		r.accept(livingwoodFramed, prefix(LibBlockNames.LIVING_WOOD_FRAMED));
		r.accept(livingwoodPatternFramed, prefix(LibBlockNames.LIVING_WOOD_PATTERN_FRAMED));
		r.accept(dreamwoodLog, prefix(LibBlockNames.DREAM_WOOD_LOG));
		r.accept(dreamwoodLogGlimmering, prefix(LibBlockNames.DREAM_WOOD_LOG_GLIMMERING));
		r.accept(dreamwoodLogStripped, prefix(LibBlockNames.DREAM_WOOD_LOG_STRIPPED));
		r.accept(dreamwoodLogStrippedGlimmering, prefix(LibBlockNames.DREAM_WOOD_LOG_GLIMMERING_STRIPPED));
		r.accept(dreamwood, prefix(LibBlockNames.DREAM_WOOD));
		r.accept(dreamwoodGlimmering, prefix(LibBlockNames.DREAM_WOOD_GLIMMERING));
		r.accept(dreamwoodStripped, prefix(LibBlockNames.DREAM_WOOD_STRIPPED));
		r.accept(dreamwoodStrippedGlimmering, prefix(LibBlockNames.DREAM_WOOD_GLIMMERING_STRIPPED));
		r.accept(dreamwoodPlanks, prefix(LibBlockNames.DREAM_WOOD_PLANKS));
		r.accept(dreamwoodPlanksMossy, prefix(LibBlockNames.DREAM_WOOD_PLANKS_MOSSY));
		r.accept(dreamwoodFramed, prefix(LibBlockNames.DREAM_WOOD_FRAMED));
		r.accept(dreamwoodPatternFramed, prefix(LibBlockNames.DREAM_WOOD_PATTERN_FRAMED));
		r.accept(manaSpreader, prefix(LibBlockNames.SPREADER));
		r.accept(redstoneSpreader, prefix(LibBlockNames.SPREADER_REDSTONE));
		r.accept(elvenSpreader, prefix(LibBlockNames.SPREADER_ELVEN));
		r.accept(gaiaSpreader, prefix(LibBlockNames.SPREADER_GAIA));
		r.accept(manaPool, prefix(LibBlockNames.POOL));
		r.accept(creativePool, prefix(LibBlockNames.POOL_CREATIVE));
		r.accept(dilutedPool, prefix(LibBlockNames.POOL_DILUTED));
		r.accept(fabulousPool, prefix(LibBlockNames.POOL_FABULOUS));
		r.accept(alchemyCatalyst, prefix(LibBlockNames.ALCHEMY_CATALYST));
		r.accept(conjurationCatalyst, prefix(LibBlockNames.CONJURATION_CATALYST));
		r.accept(manasteelBlock, prefix(LibBlockNames.MANASTEEL_BLOCK));
		r.accept(terrasteelBlock, prefix(LibBlockNames.TERRASTEEL_BLOCK));
		r.accept(elementiumBlock, prefix(LibBlockNames.ELEMENTIUM_BLOCK));
		r.accept(manaDiamondBlock, prefix(LibBlockNames.MANA_DIAMOND_BLOCK));
		r.accept(dragonstoneBlock, prefix(LibBlockNames.DRAGONSTONE_BLOCK));
		r.accept(manaGlass, prefix(LibBlockNames.MANA_GLASS));
		r.accept(elfGlass, prefix(LibBlockNames.ELF_GLASS));
		r.accept(bifrost, prefix(LibBlockNames.BIFROST));
		r.accept(bifrostPerm, prefix(LibBlockNames.BIFROST_PERM));
		r.accept(runeAltar, prefix(LibBlockNames.RUNE_ALTAR));
		r.accept(enchanter, prefix(LibBlockNames.ENCHANTER));
		r.accept(brewery, prefix(LibBlockNames.BREWERY));
		r.accept(terraPlate, prefix(LibBlockNames.TERRA_PLATE));
		r.accept(alfPortal, prefix(LibBlockNames.ALF_PORTAL));
		r.accept(manaPylon, prefix(LibBlockNames.PYLON));
		r.accept(naturaPylon, prefix(LibBlockNames.PYLON_NATURA));
		r.accept(gaiaPylon, prefix(LibBlockNames.PYLON_GAIA));
		r.accept(distributor, prefix(LibBlockNames.DISTRIBUTOR));
		r.accept(manaVoid, prefix(LibBlockNames.MANA_VOID));
		r.accept(manaDetector, prefix(LibBlockNames.MANA_DETECTOR));
		r.accept(pistonRelay, prefix(LibBlockNames.PISTON_RELAY));
		r.accept(turntable, prefix(LibBlockNames.TURNTABLE));
		r.accept(tinyPlanet, prefix(LibBlockNames.TINY_PLANET));
		r.accept(wildDrum, prefix(LibBlockNames.DRUM_WILD));
		r.accept(gatheringDrum, prefix(LibBlockNames.DRUM_GATHERING));
		r.accept(canopyDrum, prefix(LibBlockNames.DRUM_CANOPY));
		r.accept(spawnerClaw, prefix(LibBlockNames.SPAWNER_CLAW));
		r.accept(rfGenerator, prefix(LibBlockNames.FLUXFIELD));
		r.accept(prism, prefix(LibBlockNames.PRISM));
		r.accept(pump, prefix(LibBlockNames.PUMP));
		r.accept(sparkChanger, prefix(LibBlockNames.SPARK_CHANGER));
		r.accept(manaBomb, prefix(LibBlockNames.MANA_BOMB));
		r.accept(bellows, prefix(LibBlockNames.BELLOWS));
		r.accept(openCrate, prefix(LibBlockNames.OPEN_CRATE));
		r.accept(craftCrate, prefix(LibBlockNames.CRAFT_CRATE));
		r.accept(forestEye, prefix(LibBlockNames.FOREST_EYE));
		r.accept(solidVines, prefix(LibBlockNames.SOLID_VINE));
		r.accept(abstrusePlatform, prefix(LibBlockNames.PLATFORM_ABSTRUSE));
		r.accept(spectralPlatform, prefix(LibBlockNames.PLATFORM_SPECTRAL));
		r.accept(infrangiblePlatform, prefix(LibBlockNames.PLATFORM_INFRANGIBLE));
		r.accept(tinyPotato, prefix(LibBlockNames.TINY_POTATO));
		r.accept(enderEye, prefix(LibBlockNames.ENDER_EYE_BLOCK));
		r.accept(redStringContainer, prefix(LibBlockNames.RED_STRING_CONTAINER));
		r.accept(redStringDispenser, prefix(LibBlockNames.RED_STRING_DISPENSER));
		r.accept(redStringFertilizer, prefix(LibBlockNames.RED_STRING_FERTILIZER));
		r.accept(redStringComparator, prefix(LibBlockNames.RED_STRING_COMPARATOR));
		r.accept(redStringRelay, prefix(LibBlockNames.RED_STRING_RELAY));
		r.accept(redStringInterceptor, prefix(LibBlockNames.RED_STRING_INTERCEPTOR));
		r.accept(corporeaIndex, prefix(LibBlockNames.CORPOREA_INDEX));
		r.accept(corporeaFunnel, prefix(LibBlockNames.CORPOREA_FUNNEL));
		r.accept(corporeaInterceptor, prefix(LibBlockNames.CORPOREA_INTERCEPTOR));
		r.accept(corporeaCrystalCube, prefix(LibBlockNames.CORPOREA_CRYSTAL_CUBE));
		r.accept(corporeaRetainer, prefix(LibBlockNames.CORPOREA_RETAINER));
		r.accept(corporeaBlock, prefix(LibBlockNames.CORPOREA_BLOCK));
		r.accept(corporeaSlab, prefix(LibBlockNames.CORPOREA_SLAB));
		r.accept(corporeaStairs, prefix(LibBlockNames.CORPOREA_STAIRS));
		r.accept(corporeaBrick, prefix(LibBlockNames.CORPOREA_BRICK));
		r.accept(corporeaBrickSlab, prefix(LibBlockNames.CORPOREA_BRICK + LibBlockNames.SLAB_SUFFIX));
		r.accept(corporeaBrickStairs, prefix(LibBlockNames.CORPOREA_BRICK + LibBlockNames.STAIR_SUFFIX));
		r.accept(corporeaBrickWall, prefix(LibBlockNames.CORPOREA_BRICK + LibBlockNames.WALL_SUFFIX));
		r.accept(incensePlate, prefix(LibBlockNames.INCENSE_PLATE));
		r.accept(hourglass, prefix(LibBlockNames.HOURGLASS));
		r.accept(ghostRail, prefix(LibBlockNames.GHOST_RAIL));
		r.accept(lightRelayDefault, prefix(LibBlockNames.LIGHT_RELAY));
		r.accept(lightRelayDetector, prefix("detector" + LibBlockNames.LIGHT_RELAY_SUFFIX));
		r.accept(lightRelayFork, prefix("fork" + LibBlockNames.LIGHT_RELAY_SUFFIX));
		r.accept(lightRelayToggle, prefix("toggle" + LibBlockNames.LIGHT_RELAY_SUFFIX));
		r.accept(lightLauncher, prefix(LibBlockNames.LIGHT_LAUNCHER));
		r.accept(cacophonium, prefix(LibBlockNames.CACOPHONIUM));
		r.accept(cellBlock, prefix(LibBlockNames.CELL_BLOCK));
		r.accept(teruTeruBozu, prefix(LibBlockNames.TERU_TERU_BOZU));
		r.accept(avatar, prefix(LibBlockNames.AVATAR));
		r.accept(fakeAir, prefix(LibBlockNames.FAKE_AIR));
		r.accept(root, prefix(LibBlockNames.ROOT));
		r.accept(felPumpkin, prefix(LibBlockNames.FEL_PUMPKIN));
		r.accept(cocoon, prefix(LibBlockNames.COCOON));
		r.accept(enchantedSoil, prefix(LibBlockNames.ENCHANTED_SOIL));
		r.accept(animatedTorch, prefix(LibBlockNames.ANIMATED_TORCH));
		r.accept(starfield, prefix(LibBlockNames.STARFIELD));
		r.accept(azulejo0, prefix(LibBlockNames.AZULEJO_PREFIX + 0));
		r.accept(azulejo1, prefix(LibBlockNames.AZULEJO_PREFIX + 1));
		r.accept(azulejo2, prefix(LibBlockNames.AZULEJO_PREFIX + 2));
		r.accept(azulejo3, prefix(LibBlockNames.AZULEJO_PREFIX + 3));
		r.accept(azulejo4, prefix(LibBlockNames.AZULEJO_PREFIX + 4));
		r.accept(azulejo5, prefix(LibBlockNames.AZULEJO_PREFIX + 5));
		r.accept(azulejo6, prefix(LibBlockNames.AZULEJO_PREFIX + 6));
		r.accept(azulejo7, prefix(LibBlockNames.AZULEJO_PREFIX + 7));
		r.accept(azulejo8, prefix(LibBlockNames.AZULEJO_PREFIX + 8));
		r.accept(azulejo9, prefix(LibBlockNames.AZULEJO_PREFIX + 9));
		r.accept(azulejo10, prefix(LibBlockNames.AZULEJO_PREFIX + 10));
		r.accept(azulejo11, prefix(LibBlockNames.AZULEJO_PREFIX + 11));
		r.accept(azulejo12, prefix(LibBlockNames.AZULEJO_PREFIX + 12));
		r.accept(azulejo13, prefix(LibBlockNames.AZULEJO_PREFIX + 13));
		r.accept(azulejo14, prefix(LibBlockNames.AZULEJO_PREFIX + 14));
		r.accept(azulejo15, prefix(LibBlockNames.AZULEJO_PREFIX + 15));
		r.accept(manaFlame, prefix(LibBlockNames.MANA_FLAME));
		r.accept(blazeBlock, prefix(LibBlockNames.BLAZE_BLOCK));
		r.accept(gaiaHeadWall, prefix(LibBlockNames.GAIA_WALL_HEAD));
		r.accept(gaiaHead, prefix(LibBlockNames.GAIA_HEAD));
		r.accept(shimmerrock, prefix(LibBlockNames.SHIMMERROCK));
		r.accept(shimmerwoodPlanks, prefix(LibBlockNames.SHIMMERWOOD_PLANKS));
		r.accept(dryGrass, prefix(BlockAltGrass.Variant.DRY.name().toLowerCase(Locale.ROOT) + LibBlockNames.ALT_GRASS_SUFFIX));
		r.accept(goldenGrass, prefix(BlockAltGrass.Variant.GOLDEN.name().toLowerCase(Locale.ROOT) + LibBlockNames.ALT_GRASS_SUFFIX));
		r.accept(vividGrass, prefix(BlockAltGrass.Variant.VIVID.name().toLowerCase(Locale.ROOT) + LibBlockNames.ALT_GRASS_SUFFIX));
		r.accept(scorchedGrass, prefix(BlockAltGrass.Variant.SCORCHED.name().toLowerCase(Locale.ROOT) + LibBlockNames.ALT_GRASS_SUFFIX));
		r.accept(infusedGrass, prefix(BlockAltGrass.Variant.INFUSED.name().toLowerCase(Locale.ROOT) + LibBlockNames.ALT_GRASS_SUFFIX));
		r.accept(mutatedGrass, prefix(BlockAltGrass.Variant.MUTATED.name().toLowerCase(Locale.ROOT) + LibBlockNames.ALT_GRASS_SUFFIX));
		r.accept(motifDaybloom, prefix(LibBlockNames.MOTIF_DAYBLOOM));
		r.accept(motifNightshade, prefix(LibBlockNames.MOTIF_NIGHTSHADE));
		r.accept(motifHydroangeas, prefix(LibBlockNames.MOTIF_HYDROANGEAS));
	}

	public static void registerItemBlocks(BiConsumer<Item, ResourceLocation> r) {
		Item.Properties props = ModItems.defaultBuilder();
		r.accept(new BlockItem(whiteFlower, props), Registry.BLOCK.getKey(whiteFlower));
		r.accept(new BlockItem(orangeFlower, props), Registry.BLOCK.getKey(orangeFlower));
		r.accept(new BlockItem(magentaFlower, props), Registry.BLOCK.getKey(magentaFlower));
		r.accept(new BlockItem(lightBlueFlower, props), Registry.BLOCK.getKey(lightBlueFlower));
		r.accept(new BlockItem(yellowFlower, props), Registry.BLOCK.getKey(yellowFlower));
		r.accept(new BlockItem(limeFlower, props), Registry.BLOCK.getKey(limeFlower));
		r.accept(new BlockItem(pinkFlower, props), Registry.BLOCK.getKey(pinkFlower));
		r.accept(new BlockItem(grayFlower, props), Registry.BLOCK.getKey(grayFlower));
		r.accept(new BlockItem(lightGrayFlower, props), Registry.BLOCK.getKey(lightGrayFlower));
		r.accept(new BlockItem(cyanFlower, props), Registry.BLOCK.getKey(cyanFlower));
		r.accept(new BlockItem(purpleFlower, props), Registry.BLOCK.getKey(purpleFlower));
		r.accept(new BlockItem(blueFlower, props), Registry.BLOCK.getKey(blueFlower));
		r.accept(new BlockItem(brownFlower, props), Registry.BLOCK.getKey(brownFlower));
		r.accept(new BlockItem(greenFlower, props), Registry.BLOCK.getKey(greenFlower));
		r.accept(new BlockItem(redFlower, props), Registry.BLOCK.getKey(redFlower));
		r.accept(new BlockItem(blackFlower, props), Registry.BLOCK.getKey(blackFlower));
		r.accept(new BlockItem(whiteShinyFlower, props), Registry.BLOCK.getKey(whiteShinyFlower));
		r.accept(new BlockItem(orangeShinyFlower, props), Registry.BLOCK.getKey(orangeShinyFlower));
		r.accept(new BlockItem(magentaShinyFlower, props), Registry.BLOCK.getKey(magentaShinyFlower));
		r.accept(new BlockItem(lightBlueShinyFlower, props), Registry.BLOCK.getKey(lightBlueShinyFlower));
		r.accept(new BlockItem(yellowShinyFlower, props), Registry.BLOCK.getKey(yellowShinyFlower));
		r.accept(new BlockItem(limeShinyFlower, props), Registry.BLOCK.getKey(limeShinyFlower));
		r.accept(new BlockItem(pinkShinyFlower, props), Registry.BLOCK.getKey(pinkShinyFlower));
		r.accept(new BlockItem(grayShinyFlower, props), Registry.BLOCK.getKey(grayShinyFlower));
		r.accept(new BlockItem(lightGrayShinyFlower, props), Registry.BLOCK.getKey(lightGrayShinyFlower));
		r.accept(new BlockItem(cyanShinyFlower, props), Registry.BLOCK.getKey(cyanShinyFlower));
		r.accept(new BlockItem(purpleShinyFlower, props), Registry.BLOCK.getKey(purpleShinyFlower));
		r.accept(new BlockItem(blueShinyFlower, props), Registry.BLOCK.getKey(blueShinyFlower));
		r.accept(new BlockItem(brownShinyFlower, props), Registry.BLOCK.getKey(brownShinyFlower));
		r.accept(new BlockItem(greenShinyFlower, props), Registry.BLOCK.getKey(greenShinyFlower));
		r.accept(new BlockItem(redShinyFlower, props), Registry.BLOCK.getKey(redShinyFlower));
		r.accept(new BlockItem(blackShinyFlower, props), Registry.BLOCK.getKey(blackShinyFlower));
		r.accept(new BlockItem(whiteFloatingFlower, props), Registry.BLOCK.getKey(whiteFloatingFlower));
		r.accept(new BlockItem(orangeFloatingFlower, props), Registry.BLOCK.getKey(orangeFloatingFlower));
		r.accept(new BlockItem(magentaFloatingFlower, props), Registry.BLOCK.getKey(magentaFloatingFlower));
		r.accept(new BlockItem(lightBlueFloatingFlower, props), Registry.BLOCK.getKey(lightBlueFloatingFlower));
		r.accept(new BlockItem(yellowFloatingFlower, props), Registry.BLOCK.getKey(yellowFloatingFlower));
		r.accept(new BlockItem(limeFloatingFlower, props), Registry.BLOCK.getKey(limeFloatingFlower));
		r.accept(new BlockItem(pinkFloatingFlower, props), Registry.BLOCK.getKey(pinkFloatingFlower));
		r.accept(new BlockItem(grayFloatingFlower, props), Registry.BLOCK.getKey(grayFloatingFlower));
		r.accept(new BlockItem(lightGrayFloatingFlower, props), Registry.BLOCK.getKey(lightGrayFloatingFlower));
		r.accept(new BlockItem(cyanFloatingFlower, props), Registry.BLOCK.getKey(cyanFloatingFlower));
		r.accept(new BlockItem(purpleFloatingFlower, props), Registry.BLOCK.getKey(purpleFloatingFlower));
		r.accept(new BlockItem(blueFloatingFlower, props), Registry.BLOCK.getKey(blueFloatingFlower));
		r.accept(new BlockItem(brownFloatingFlower, props), Registry.BLOCK.getKey(brownFloatingFlower));
		r.accept(new BlockItem(greenFloatingFlower, props), Registry.BLOCK.getKey(greenFloatingFlower));
		r.accept(new BlockItem(redFloatingFlower, props), Registry.BLOCK.getKey(redFloatingFlower));
		r.accept(new BlockItem(blackFloatingFlower, props), Registry.BLOCK.getKey(blackFloatingFlower));
		r.accept(new BlockItem(petalBlockWhite, props), Registry.BLOCK.getKey(petalBlockWhite));
		r.accept(new BlockItem(petalBlockOrange, props), Registry.BLOCK.getKey(petalBlockOrange));
		r.accept(new BlockItem(petalBlockMagenta, props), Registry.BLOCK.getKey(petalBlockMagenta));
		r.accept(new BlockItem(petalBlockLightBlue, props), Registry.BLOCK.getKey(petalBlockLightBlue));
		r.accept(new BlockItem(petalBlockYellow, props), Registry.BLOCK.getKey(petalBlockYellow));
		r.accept(new BlockItem(petalBlockLime, props), Registry.BLOCK.getKey(petalBlockLime));
		r.accept(new BlockItem(petalBlockPink, props), Registry.BLOCK.getKey(petalBlockPink));
		r.accept(new BlockItem(petalBlockGray, props), Registry.BLOCK.getKey(petalBlockGray));
		r.accept(new BlockItem(petalBlockSilver, props), Registry.BLOCK.getKey(petalBlockSilver));
		r.accept(new BlockItem(petalBlockCyan, props), Registry.BLOCK.getKey(petalBlockCyan));
		r.accept(new BlockItem(petalBlockPurple, props), Registry.BLOCK.getKey(petalBlockPurple));
		r.accept(new BlockItem(petalBlockBlue, props), Registry.BLOCK.getKey(petalBlockBlue));
		r.accept(new BlockItem(petalBlockBrown, props), Registry.BLOCK.getKey(petalBlockBrown));
		r.accept(new BlockItem(petalBlockGreen, props), Registry.BLOCK.getKey(petalBlockGreen));
		r.accept(new BlockItem(petalBlockRed, props), Registry.BLOCK.getKey(petalBlockRed));
		r.accept(new BlockItem(petalBlockBlack, props), Registry.BLOCK.getKey(petalBlockBlack));
		r.accept(new BlockItem(whiteMushroom, props), Registry.BLOCK.getKey(whiteMushroom));
		r.accept(new BlockItem(orangeMushroom, props), Registry.BLOCK.getKey(orangeMushroom));
		r.accept(new BlockItem(magentaMushroom, props), Registry.BLOCK.getKey(magentaMushroom));
		r.accept(new BlockItem(lightBlueMushroom, props), Registry.BLOCK.getKey(lightBlueMushroom));
		r.accept(new BlockItem(yellowMushroom, props), Registry.BLOCK.getKey(yellowMushroom));
		r.accept(new BlockItem(limeMushroom, props), Registry.BLOCK.getKey(limeMushroom));
		r.accept(new BlockItem(pinkMushroom, props), Registry.BLOCK.getKey(pinkMushroom));
		r.accept(new BlockItem(grayMushroom, props), Registry.BLOCK.getKey(grayMushroom));
		r.accept(new BlockItem(lightGrayMushroom, props), Registry.BLOCK.getKey(lightGrayMushroom));
		r.accept(new BlockItem(cyanMushroom, props), Registry.BLOCK.getKey(cyanMushroom));
		r.accept(new BlockItem(purpleMushroom, props), Registry.BLOCK.getKey(purpleMushroom));
		r.accept(new BlockItem(blueMushroom, props), Registry.BLOCK.getKey(blueMushroom));
		r.accept(new BlockItem(brownMushroom, props), Registry.BLOCK.getKey(brownMushroom));
		r.accept(new BlockItem(greenMushroom, props), Registry.BLOCK.getKey(greenMushroom));
		r.accept(new BlockItem(redMushroom, props), Registry.BLOCK.getKey(redMushroom));
		r.accept(new BlockItem(blackMushroom, props), Registry.BLOCK.getKey(blackMushroom));
		r.accept(new BlockItem(doubleFlowerWhite, props), Registry.BLOCK.getKey(doubleFlowerWhite));
		r.accept(new BlockItem(doubleFlowerOrange, props), Registry.BLOCK.getKey(doubleFlowerOrange));
		r.accept(new BlockItem(doubleFlowerMagenta, props), Registry.BLOCK.getKey(doubleFlowerMagenta));
		r.accept(new BlockItem(doubleFlowerLightBlue, props), Registry.BLOCK.getKey(doubleFlowerLightBlue));
		r.accept(new BlockItem(doubleFlowerYellow, props), Registry.BLOCK.getKey(doubleFlowerYellow));
		r.accept(new BlockItem(doubleFlowerLime, props), Registry.BLOCK.getKey(doubleFlowerLime));
		r.accept(new BlockItem(doubleFlowerPink, props), Registry.BLOCK.getKey(doubleFlowerPink));
		r.accept(new BlockItem(doubleFlowerGray, props), Registry.BLOCK.getKey(doubleFlowerGray));
		r.accept(new BlockItem(doubleFlowerLightGray, props), Registry.BLOCK.getKey(doubleFlowerLightGray));
		r.accept(new BlockItem(doubleFlowerCyan, props), Registry.BLOCK.getKey(doubleFlowerCyan));
		r.accept(new BlockItem(doubleFlowerPurple, props), Registry.BLOCK.getKey(doubleFlowerPurple));
		r.accept(new BlockItem(doubleFlowerBlue, props), Registry.BLOCK.getKey(doubleFlowerBlue));
		r.accept(new BlockItem(doubleFlowerBrown, props), Registry.BLOCK.getKey(doubleFlowerBrown));
		r.accept(new BlockItem(doubleFlowerGreen, props), Registry.BLOCK.getKey(doubleFlowerGreen));
		r.accept(new BlockItem(doubleFlowerRed, props), Registry.BLOCK.getKey(doubleFlowerRed));
		r.accept(new BlockItem(doubleFlowerBlack, props), Registry.BLOCK.getKey(doubleFlowerBlack));
		r.accept(new BlockItem(defaultAltar, props), Registry.BLOCK.getKey(defaultAltar));
		r.accept(new BlockItem(forestAltar, props), Registry.BLOCK.getKey(forestAltar));
		r.accept(new BlockItem(plainsAltar, props), Registry.BLOCK.getKey(plainsAltar));
		r.accept(new BlockItem(mountainAltar, props), Registry.BLOCK.getKey(mountainAltar));
		r.accept(new BlockItem(fungalAltar, props), Registry.BLOCK.getKey(fungalAltar));
		r.accept(new BlockItem(swampAltar, props), Registry.BLOCK.getKey(swampAltar));
		r.accept(new BlockItem(desertAltar, props), Registry.BLOCK.getKey(desertAltar));
		r.accept(new BlockItem(taigaAltar, props), Registry.BLOCK.getKey(taigaAltar));
		r.accept(new BlockItem(mesaAltar, props), Registry.BLOCK.getKey(mesaAltar));
		r.accept(new BlockItem(mossyAltar, props), Registry.BLOCK.getKey(mossyAltar));
		r.accept(new BlockItem(livingrock, props), Registry.BLOCK.getKey(livingrock));
		r.accept(new BlockItem(livingrockBrick, props), Registry.BLOCK.getKey(livingrockBrick));
		r.accept(new BlockItem(livingrockBrickChiseled, props), Registry.BLOCK.getKey(livingrockBrickChiseled));
		r.accept(new BlockItem(livingrockBrickCracked, props), Registry.BLOCK.getKey(livingrockBrickCracked));
		r.accept(new BlockItem(livingrockBrickMossy, props), Registry.BLOCK.getKey(livingrockBrickMossy));
		r.accept(new BlockItem(livingwoodLog, props), Registry.BLOCK.getKey(livingwoodLog));
		r.accept(new BlockItem(livingwoodLogStripped, props), Registry.BLOCK.getKey(livingwoodLogStripped));
		r.accept(new BlockItem(livingwoodLogGlimmering, props), Registry.BLOCK.getKey(livingwoodLogGlimmering));
		r.accept(new BlockItem(livingwoodLogStrippedGlimmering, props), Registry.BLOCK.getKey(livingwoodLogStrippedGlimmering));
		r.accept(new BlockItem(livingwood, props), Registry.BLOCK.getKey(livingwood));
		r.accept(new BlockItem(livingwoodStripped, props), Registry.BLOCK.getKey(livingwoodStripped));
		r.accept(new BlockItem(livingwoodStrippedGlimmering, props), Registry.BLOCK.getKey(livingwoodStrippedGlimmering));
		r.accept(new BlockItem(livingwoodPlanks, props), Registry.BLOCK.getKey(livingwoodPlanks));
		r.accept(new BlockItem(livingwoodPlanksMossy, props), Registry.BLOCK.getKey(livingwoodPlanksMossy));
		r.accept(new BlockItem(livingwoodFramed, props), Registry.BLOCK.getKey(livingwoodFramed));
		r.accept(new BlockItem(livingwoodPatternFramed, props), Registry.BLOCK.getKey(livingwoodPatternFramed));
		r.accept(new BlockItem(livingwoodGlimmering, props), Registry.BLOCK.getKey(livingwoodGlimmering));
		r.accept(new BlockItem(dreamwoodLog, props), Registry.BLOCK.getKey(dreamwoodLog));
		r.accept(new BlockItem(dreamwoodLogGlimmering, props), Registry.BLOCK.getKey(dreamwoodLogGlimmering));
		r.accept(new BlockItem(dreamwoodLogStripped, props), Registry.BLOCK.getKey(dreamwoodLogStripped));
		r.accept(new BlockItem(dreamwoodLogStrippedGlimmering, props), Registry.BLOCK.getKey(dreamwoodLogStrippedGlimmering));
		r.accept(new BlockItem(dreamwood, props), Registry.BLOCK.getKey(dreamwood));
		r.accept(new BlockItem(dreamwoodStripped, props), Registry.BLOCK.getKey(dreamwoodStripped));
		r.accept(new BlockItem(dreamwoodStrippedGlimmering, props), Registry.BLOCK.getKey(dreamwoodStrippedGlimmering));
		r.accept(new BlockItem(dreamwoodPlanks, props), Registry.BLOCK.getKey(dreamwoodPlanks));
		r.accept(new BlockItem(dreamwoodPlanksMossy, props), Registry.BLOCK.getKey(dreamwoodPlanksMossy));
		r.accept(new BlockItem(dreamwoodFramed, props), Registry.BLOCK.getKey(dreamwoodFramed));
		r.accept(new BlockItem(dreamwoodPatternFramed, props), Registry.BLOCK.getKey(dreamwoodPatternFramed));
		r.accept(new BlockItem(dreamwoodGlimmering, props), Registry.BLOCK.getKey(dreamwoodGlimmering));
		r.accept(new BlockItem(manaSpreader, props), Registry.BLOCK.getKey(manaSpreader));
		r.accept(new BlockItem(redstoneSpreader, props), Registry.BLOCK.getKey(redstoneSpreader));
		r.accept(new BlockItem(elvenSpreader, props), Registry.BLOCK.getKey(elvenSpreader));
		r.accept(new BlockItem(gaiaSpreader, props), Registry.BLOCK.getKey(gaiaSpreader));
		r.accept(new BlockItem(manaPool, props), Registry.BLOCK.getKey(manaPool));
		r.accept(new BlockItem(creativePool, ModItems.defaultBuilder().rarity(Rarity.EPIC)), Registry.BLOCK.getKey(creativePool));
		r.accept(new BlockItem(dilutedPool, props), Registry.BLOCK.getKey(dilutedPool));
		r.accept(new BlockItem(fabulousPool, props), Registry.BLOCK.getKey(fabulousPool));
		r.accept(new BlockItem(alchemyCatalyst, props), Registry.BLOCK.getKey(alchemyCatalyst));
		r.accept(new BlockItem(conjurationCatalyst, props), Registry.BLOCK.getKey(conjurationCatalyst));
		r.accept(new BlockItem(manasteelBlock, props), Registry.BLOCK.getKey(manasteelBlock));
		r.accept(new BlockItem(terrasteelBlock, ModItems.defaultBuilder().rarity(Rarity.UNCOMMON)), Registry.BLOCK.getKey(terrasteelBlock));
		r.accept(new BlockItem(elementiumBlock, props), Registry.BLOCK.getKey(elementiumBlock));
		r.accept(new BlockItem(manaDiamondBlock, props), Registry.BLOCK.getKey(manaDiamondBlock));
		r.accept(new BlockItem(dragonstoneBlock, props), Registry.BLOCK.getKey(dragonstoneBlock));
		r.accept(new BlockItem(manaGlass, props), Registry.BLOCK.getKey(manaGlass));
		r.accept(new BlockItem(elfGlass, props), Registry.BLOCK.getKey(elfGlass));
		r.accept(new BlockItem(bifrostPerm, props), Registry.BLOCK.getKey(bifrostPerm));
		r.accept(new BlockItem(runeAltar, props), Registry.BLOCK.getKey(runeAltar));
		r.accept(new BlockItem(enchanter, props), Registry.BLOCK.getKey(enchanter));
		r.accept(new ItemBlockWithSpecialRenderer(brewery, props), Registry.BLOCK.getKey(brewery));
		r.accept(new BlockItem(terraPlate, props), Registry.BLOCK.getKey(terraPlate));
		r.accept(new BlockItem(alfPortal, ModItems.defaultBuilder().rarity(Rarity.UNCOMMON)), Registry.BLOCK.getKey(alfPortal));

		r.accept(new ItemBlockWithSpecialRenderer(manaPylon, props), Registry.BLOCK.getKey(manaPylon));
		r.accept(new ItemBlockWithSpecialRenderer(naturaPylon, props), Registry.BLOCK.getKey(naturaPylon));
		r.accept(new ItemBlockWithSpecialRenderer(gaiaPylon, props), Registry.BLOCK.getKey(gaiaPylon));
		r.accept(new BlockItem(distributor, props), Registry.BLOCK.getKey(distributor));
		r.accept(new BlockItem(manaVoid, props), Registry.BLOCK.getKey(manaVoid));
		r.accept(new BlockItem(manaDetector, props), Registry.BLOCK.getKey(manaDetector));
		r.accept(new BlockItem(pistonRelay, props), Registry.BLOCK.getKey(pistonRelay));
		r.accept(new BlockItem(turntable, props), Registry.BLOCK.getKey(turntable));
		r.accept(new BlockItem(tinyPlanet, props), Registry.BLOCK.getKey(tinyPlanet));
		r.accept(new BlockItem(wildDrum, props), Registry.BLOCK.getKey(wildDrum));
		r.accept(new BlockItem(gatheringDrum, props), Registry.BLOCK.getKey(gatheringDrum));
		r.accept(new BlockItem(canopyDrum, props), Registry.BLOCK.getKey(canopyDrum));
		r.accept(new BlockItem(spawnerClaw, props), Registry.BLOCK.getKey(spawnerClaw));
		r.accept(new BlockItem(rfGenerator, props), Registry.BLOCK.getKey(rfGenerator));
		r.accept(new BlockItem(prism, props), Registry.BLOCK.getKey(prism));
		r.accept(new BlockItem(pump, props), Registry.BLOCK.getKey(pump));
		r.accept(new BlockItem(sparkChanger, props), Registry.BLOCK.getKey(sparkChanger));
		r.accept(new BlockItem(manaBomb, props), Registry.BLOCK.getKey(manaBomb));
		r.accept(new ItemBlockWithSpecialRenderer(bellows, props), Registry.BLOCK.getKey(bellows));
		r.accept(new BlockItem(openCrate, props), Registry.BLOCK.getKey(openCrate));
		r.accept(new BlockItem(craftCrate, props), Registry.BLOCK.getKey(craftCrate));
		r.accept(new BlockItem(forestEye, props), Registry.BLOCK.getKey(forestEye));
		r.accept(new BlockItem(abstrusePlatform, props), Registry.BLOCK.getKey(abstrusePlatform));
		r.accept(new BlockItem(spectralPlatform, props), Registry.BLOCK.getKey(spectralPlatform));
		r.accept(new BlockItem(infrangiblePlatform, ModItems.defaultBuilder().rarity(Rarity.EPIC)), Registry.BLOCK.getKey(infrangiblePlatform));
		r.accept(new ItemBlockTinyPotato(tinyPotato, ModItems.defaultBuilder().rarity(Rarity.UNCOMMON)), Registry.BLOCK.getKey(tinyPotato));
		r.accept(new BlockItem(enderEye, props), Registry.BLOCK.getKey(enderEye));
		r.accept(new BlockItem(redStringContainer, props), Registry.BLOCK.getKey(redStringContainer));
		r.accept(new BlockItem(redStringDispenser, props), Registry.BLOCK.getKey(redStringDispenser));
		r.accept(new BlockItem(redStringFertilizer, props), Registry.BLOCK.getKey(redStringFertilizer));
		r.accept(new BlockItem(redStringComparator, props), Registry.BLOCK.getKey(redStringComparator));
		r.accept(new BlockItem(redStringRelay, props), Registry.BLOCK.getKey(redStringRelay));
		r.accept(new BlockItem(redStringInterceptor, props), Registry.BLOCK.getKey(redStringInterceptor));
		r.accept(new ItemBlockWithSpecialRenderer(corporeaIndex, props), Registry.BLOCK.getKey(corporeaIndex));
		r.accept(new BlockItem(corporeaFunnel, props), Registry.BLOCK.getKey(corporeaFunnel));
		r.accept(new BlockItem(corporeaInterceptor, props), Registry.BLOCK.getKey(corporeaInterceptor));
		r.accept(new BlockItem(corporeaCrystalCube, props), Registry.BLOCK.getKey(corporeaCrystalCube));
		r.accept(new BlockItem(corporeaRetainer, props), Registry.BLOCK.getKey(corporeaRetainer));
		r.accept(new BlockItem(corporeaBlock, props), Registry.BLOCK.getKey(corporeaBlock));
		r.accept(new BlockItem(corporeaSlab, props), Registry.BLOCK.getKey(corporeaSlab));
		r.accept(new BlockItem(corporeaStairs, props), Registry.BLOCK.getKey(corporeaStairs));
		r.accept(new BlockItem(corporeaBrick, props), Registry.BLOCK.getKey(corporeaBrick));
		r.accept(new BlockItem(corporeaBrickSlab, props), Registry.BLOCK.getKey(corporeaBrickSlab));
		r.accept(new BlockItem(corporeaBrickStairs, props), Registry.BLOCK.getKey(corporeaBrickStairs));
		r.accept(new BlockItem(corporeaBrickWall, props), Registry.BLOCK.getKey(corporeaBrickWall));
		r.accept(new BlockItem(incensePlate, props), Registry.BLOCK.getKey(incensePlate));
		r.accept(new ItemBlockWithSpecialRenderer(hourglass, props), Registry.BLOCK.getKey(hourglass));
		r.accept(new BlockItem(ghostRail, props), Registry.BLOCK.getKey(ghostRail));
		r.accept(new BlockItem(lightRelayDefault, props), Registry.BLOCK.getKey(lightRelayDefault));
		r.accept(new BlockItem(lightRelayDetector, props), Registry.BLOCK.getKey(lightRelayDetector));
		r.accept(new BlockItem(lightRelayFork, props), Registry.BLOCK.getKey(lightRelayFork));
		r.accept(new BlockItem(lightRelayToggle, props), Registry.BLOCK.getKey(lightRelayToggle));
		r.accept(new BlockItem(lightLauncher, props), Registry.BLOCK.getKey(lightLauncher));
		r.accept(new BlockItem(cacophonium, props), Registry.BLOCK.getKey(cacophonium));
		r.accept(new BlockItem(cellBlock, props), Registry.BLOCK.getKey(cellBlock));
		r.accept(new ItemBlockWithSpecialRenderer(teruTeruBozu, props), Registry.BLOCK.getKey(teruTeruBozu));
		r.accept(new ItemBlockWithSpecialRenderer(avatar, props), Registry.BLOCK.getKey(avatar));
		r.accept(new BlockItem(root, props), Registry.BLOCK.getKey(root));
		r.accept(new BlockItem(felPumpkin, props), Registry.BLOCK.getKey(felPumpkin));
		r.accept(new BlockItem(cocoon, props), Registry.BLOCK.getKey(cocoon));
		r.accept(new BlockItem(enchantedSoil, ModItems.defaultBuilder().rarity(Rarity.RARE)), Registry.BLOCK.getKey(enchantedSoil));
		r.accept(new BlockItem(animatedTorch, props), Registry.BLOCK.getKey(animatedTorch));
		r.accept(new BlockItem(starfield, props), Registry.BLOCK.getKey(starfield));
		r.accept(new BlockItem(azulejo0, props), Registry.BLOCK.getKey(azulejo0));
		r.accept(new BlockItem(azulejo1, props), Registry.BLOCK.getKey(azulejo1));
		r.accept(new BlockItem(azulejo2, props), Registry.BLOCK.getKey(azulejo2));
		r.accept(new BlockItem(azulejo3, props), Registry.BLOCK.getKey(azulejo3));
		r.accept(new BlockItem(azulejo4, props), Registry.BLOCK.getKey(azulejo4));
		r.accept(new BlockItem(azulejo5, props), Registry.BLOCK.getKey(azulejo5));
		r.accept(new BlockItem(azulejo6, props), Registry.BLOCK.getKey(azulejo6));
		r.accept(new BlockItem(azulejo7, props), Registry.BLOCK.getKey(azulejo7));
		r.accept(new BlockItem(azulejo8, props), Registry.BLOCK.getKey(azulejo8));
		r.accept(new BlockItem(azulejo9, props), Registry.BLOCK.getKey(azulejo9));
		r.accept(new BlockItem(azulejo10, props), Registry.BLOCK.getKey(azulejo10));
		r.accept(new BlockItem(azulejo11, props), Registry.BLOCK.getKey(azulejo11));
		r.accept(new BlockItem(azulejo12, props), Registry.BLOCK.getKey(azulejo12));
		r.accept(new BlockItem(azulejo13, props), Registry.BLOCK.getKey(azulejo13));
		r.accept(new BlockItem(azulejo14, props), Registry.BLOCK.getKey(azulejo14));
		r.accept(new BlockItem(azulejo15, props), Registry.BLOCK.getKey(azulejo15));
		r.accept(new ItemBlockBlaze(blazeBlock, props), Registry.BLOCK.getKey(blazeBlock));
		r.accept(new StandingAndWallBlockItem(gaiaHead, gaiaHeadWall, ModItems.defaultBuilder().rarity(Rarity.UNCOMMON)), Registry.BLOCK.getKey(gaiaHead));
		r.accept(new BlockItem(shimmerrock, props), Registry.BLOCK.getKey(shimmerrock));
		r.accept(new BlockItem(shimmerwoodPlanks, props), Registry.BLOCK.getKey(shimmerwoodPlanks));
		r.accept(new BlockItem(dryGrass, props), Registry.BLOCK.getKey(dryGrass));
		r.accept(new BlockItem(goldenGrass, props), Registry.BLOCK.getKey(goldenGrass));
		r.accept(new BlockItem(vividGrass, props), Registry.BLOCK.getKey(vividGrass));
		r.accept(new BlockItem(scorchedGrass, props), Registry.BLOCK.getKey(scorchedGrass));
		r.accept(new BlockItem(infusedGrass, props), Registry.BLOCK.getKey(infusedGrass));
		r.accept(new BlockItem(mutatedGrass, props), Registry.BLOCK.getKey(mutatedGrass));
		r.accept(new BlockItem(motifDaybloom, props), Registry.BLOCK.getKey(motifDaybloom));
		r.accept(new BlockItem(motifNightshade, props), Registry.BLOCK.getKey(motifNightshade));
		r.accept(new BlockItem(motifHydroangeas, props), Registry.BLOCK.getKey(motifHydroangeas));
	}

	public static void addDispenserBehaviours() {
		DispenserBlock.registerBehavior(ModItems.twigWand, new BehaviourWand());
		DispenserBlock.registerBehavior(ModItems.dreamwoodWand, new BehaviourWand());
		DispenserBlock.registerBehavior(ModItems.obedienceStick, new BehaviourStick());
		DispenserBlock.registerBehavior(ModItems.poolMinecart, new BehaviourPoolMinecart());
		DispenserBlock.registerBehavior(ModBlocks.felPumpkin, new BehaviourFelPumpkin());
		DispenserBlock.registerBehavior(ModItems.spark, new BehaviourManaSpark());
		DispenserBlock.registerBehavior(ModBlocks.gaiaHead, new OptionalDispenseItemBehavior() {
			@NotNull
			@Override
			protected ItemStack execute(@NotNull BlockSource source, @NotNull ItemStack stack) {
				setSuccess(ArmorItem.dispenseArmor(source, stack));
				return stack;
			}
		});

		DispenseItemBehavior behavior = new BehaviourCorporeaSpark();
		DispenserBlock.registerBehavior(ModItems.corporeaSpark, behavior);
		DispenserBlock.registerBehavior(ModItems.corporeaSparkMaster, behavior);
		DispenserBlock.registerBehavior(ModItems.corporeaSparkCreative, behavior);
		DispenserBlock.registerBehavior(ModItems.enderAirBottle, new AbstractProjectileDispenseBehavior() {
			@NotNull
			@Override
			protected Projectile getProjectile(@NotNull Level world, @NotNull Position pos, @NotNull ItemStack stack) {
				return new EntityEnderAirBottle(pos.x(), pos.y(), pos.z(), world);
			}
		});

		behavior = AccessorDispenserBlock.getDispenserRegistry().get(Items.GLASS_BOTTLE);
		DispenserBlock.registerBehavior(Items.GLASS_BOTTLE, new BehaviourEnderAirBottling(behavior));

		DispenserBlock.registerBehavior(ModItems.manasteelShears, new ShearsDispenseItemBehavior());
		DispenserBlock.registerBehavior(ModItems.elementiumShears, new ShearsDispenseItemBehavior());
		DispenserBlock.registerBehavior(ModItems.vineBall, new AbstractProjectileDispenseBehavior() {
			@NotNull
			@Override
			protected Projectile getProjectile(@NotNull Level world, @NotNull Position pos, @NotNull ItemStack stack) {
				return new EntityVineBall(pos.x(), pos.y(), pos.z(), world);
			}
		});

		SeedBehaviours.init();
	}

	public static void addAxeStripping() {
		IXplatAbstractions xplat = IXplatAbstractions.INSTANCE;
		xplat.addAxeStripping(livingwoodLog, livingwoodLogStripped);
		xplat.addAxeStripping(livingwoodLogGlimmering, livingwoodLogStrippedGlimmering);
		xplat.addAxeStripping(livingwood, livingwoodStripped);
		xplat.addAxeStripping(livingwoodGlimmering, livingwoodStrippedGlimmering);
		xplat.addAxeStripping(dreamwoodLog, dreamwoodLogStripped);
		xplat.addAxeStripping(dreamwoodLogGlimmering, dreamwoodLogStrippedGlimmering);
		xplat.addAxeStripping(dreamwood, dreamwoodStripped);
		xplat.addAxeStripping(dreamwoodGlimmering, dreamwoodStrippedGlimmering);

		xplat.addAxeStripping(ModFluffBlocks.livingwoodStairs, ModFluffBlocks.livingwoodStrippedStairs);
		xplat.addAxeStripping(ModFluffBlocks.livingwoodSlab, ModFluffBlocks.livingwoodStrippedSlab);
		xplat.addAxeStripping(ModFluffBlocks.livingwoodWall, ModFluffBlocks.livingwoodStrippedWall);
		xplat.addAxeStripping(ModFluffBlocks.dreamwoodStairs, ModFluffBlocks.dreamwoodStrippedStairs);
		xplat.addAxeStripping(ModFluffBlocks.dreamwoodSlab, ModFluffBlocks.dreamwoodStrippedSlab);
		xplat.addAxeStripping(ModFluffBlocks.dreamwoodWall, ModFluffBlocks.dreamwoodStrippedWall);
	}

	public static Block getFlower(DyeColor color) {
		return switch (color) {
			case WHITE -> whiteFlower;
			case ORANGE -> orangeFlower;
			case MAGENTA -> magentaFlower;
			case LIGHT_BLUE -> lightBlueFlower;
			case YELLOW -> yellowFlower;
			case LIME -> limeFlower;
			case PINK -> pinkFlower;
			case GRAY -> grayFlower;
			case LIGHT_GRAY -> lightGrayFlower;
			case CYAN -> cyanFlower;
			case PURPLE -> purpleFlower;
			case BLUE -> blueFlower;
			case BROWN -> brownFlower;
			case GREEN -> greenFlower;
			case RED -> redFlower;
			case BLACK -> blackFlower;
		};
	}

	public static Block getMushroom(DyeColor color) {
		return switch (color) {
			case WHITE -> whiteMushroom;
			case ORANGE -> orangeMushroom;
			case MAGENTA -> magentaMushroom;
			case LIGHT_BLUE -> lightBlueMushroom;
			case YELLOW -> yellowMushroom;
			case LIME -> limeMushroom;
			case PINK -> pinkMushroom;
			case GRAY -> grayMushroom;
			case LIGHT_GRAY -> lightGrayMushroom;
			case CYAN -> cyanMushroom;
			case PURPLE -> purpleMushroom;
			case BLUE -> blueMushroom;
			case BROWN -> brownMushroom;
			case GREEN -> greenMushroom;
			case RED -> redMushroom;
			case BLACK -> blackMushroom;
		};
	}

	public static Block getBuriedPetal(DyeColor color) {
		return switch (color) {
			case WHITE -> whiteBuriedPetals;
			case ORANGE -> orangeBuriedPetals;
			case MAGENTA -> magentaBuriedPetals;
			case LIGHT_BLUE -> lightBlueBuriedPetals;
			case YELLOW -> yellowBuriedPetals;
			case LIME -> limeBuriedPetals;
			case PINK -> pinkBuriedPetals;
			case GRAY -> grayBuriedPetals;
			case LIGHT_GRAY -> lightGrayBuriedPetals;
			case CYAN -> cyanBuriedPetals;
			case PURPLE -> purpleBuriedPetals;
			case BLUE -> blueBuriedPetals;
			case BROWN -> brownBuriedPetals;
			case GREEN -> greenBuriedPetals;
			case RED -> redBuriedPetals;
			case BLACK -> blackBuriedPetals;
		};
	}

	public static Block getShinyFlower(DyeColor color) {
		return switch (color) {
			case WHITE -> whiteShinyFlower;
			case ORANGE -> orangeShinyFlower;
			case MAGENTA -> magentaShinyFlower;
			case LIGHT_BLUE -> lightBlueShinyFlower;
			case YELLOW -> yellowShinyFlower;
			case LIME -> limeShinyFlower;
			case PINK -> pinkShinyFlower;
			case GRAY -> grayShinyFlower;
			case LIGHT_GRAY -> lightGrayShinyFlower;
			case CYAN -> cyanShinyFlower;
			case PURPLE -> purpleShinyFlower;
			case BLUE -> blueShinyFlower;
			case BROWN -> brownShinyFlower;
			case GREEN -> greenShinyFlower;
			case RED -> redShinyFlower;
			case BLACK -> blackShinyFlower;
		};
	}

	public static Block getFloatingFlower(DyeColor color) {
		return switch (color) {
			case WHITE -> whiteFloatingFlower;
			case ORANGE -> orangeFloatingFlower;
			case MAGENTA -> magentaFloatingFlower;
			case LIGHT_BLUE -> lightBlueFloatingFlower;
			case YELLOW -> yellowFloatingFlower;
			case LIME -> limeFloatingFlower;
			case PINK -> pinkFloatingFlower;
			case GRAY -> grayFloatingFlower;
			case LIGHT_GRAY -> lightGrayFloatingFlower;
			case CYAN -> cyanFloatingFlower;
			case PURPLE -> purpleFloatingFlower;
			case BLUE -> blueFloatingFlower;
			case BROWN -> brownFloatingFlower;
			case GREEN -> greenFloatingFlower;
			case RED -> redFloatingFlower;
			case BLACK -> blackFloatingFlower;
		};
	}

	public static Block getDoubleFlower(DyeColor color) {
		return switch (color) {
			case WHITE -> doubleFlowerWhite;
			case ORANGE -> doubleFlowerOrange;
			case MAGENTA -> doubleFlowerMagenta;
			case LIGHT_BLUE -> doubleFlowerLightBlue;
			case YELLOW -> doubleFlowerYellow;
			case LIME -> doubleFlowerLime;
			case PINK -> doubleFlowerPink;
			case GRAY -> doubleFlowerGray;
			case LIGHT_GRAY -> doubleFlowerLightGray;
			case CYAN -> doubleFlowerCyan;
			case PURPLE -> doubleFlowerPurple;
			case BLUE -> doubleFlowerBlue;
			case BROWN -> doubleFlowerBrown;
			case GREEN -> doubleFlowerGreen;
			case RED -> doubleFlowerRed;
			case BLACK -> doubleFlowerBlack;
		};
	}

	public static Block getPetalBlock(DyeColor color) {
		return switch (color) {
			case WHITE -> petalBlockWhite;
			case ORANGE -> petalBlockOrange;
			case MAGENTA -> petalBlockMagenta;
			case LIGHT_BLUE -> petalBlockLightBlue;
			case YELLOW -> petalBlockYellow;
			case LIME -> petalBlockLime;
			case PINK -> petalBlockPink;
			case GRAY -> petalBlockGray;
			case LIGHT_GRAY -> petalBlockSilver;
			case CYAN -> petalBlockCyan;
			case PURPLE -> petalBlockPurple;
			case BLUE -> petalBlockBlue;
			case BROWN -> petalBlockBrown;
			case GREEN -> petalBlockGreen;
			case RED -> petalBlockRed;
			case BLACK -> petalBlockBlack;
		};
	}
}
