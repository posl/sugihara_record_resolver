// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calcite/record_scheme.proto

package io.activej.dataflow.proto.calcite;

public final class RecordSchemeProto {
  private RecordSchemeProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface RecordSchemeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dataflow.calcite.RecordScheme)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @return A list containing the fieldNames.
     */
    java.util.List<java.lang.String>
        getFieldNamesList();
    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @return The count of fieldNames.
     */
    int getFieldNamesCount();
    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @param index The index of the element to return.
     * @return The fieldNames at the given index.
     */
    java.lang.String getFieldNames(int index);
    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the fieldNames at the given index.
     */
    com.google.protobuf.ByteString
        getFieldNamesBytes(int index);

    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    java.util.List<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType> 
        getTypesList();
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType getTypes(int index);
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    int getTypesCount();
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    java.util.List<? extends io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder> 
        getTypesOrBuilderList();
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder getTypesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dataflow.calcite.RecordScheme}
   */
  public static final class RecordScheme extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dataflow.calcite.RecordScheme)
      RecordSchemeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RecordScheme.newBuilder() to construct.
    private RecordScheme(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RecordScheme() {
      fieldNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      types_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RecordScheme();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RecordScheme(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                fieldNames_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              fieldNames_.add(s);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                types_ = new java.util.ArrayList<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType>();
                mutable_bitField0_ |= 0x00000002;
              }
              types_.add(
                  input.readMessage(io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          fieldNames_ = fieldNames_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          types_ = java.util.Collections.unmodifiableList(types_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.activej.dataflow.proto.calcite.RecordSchemeProto.internal_static_dataflow_calcite_RecordScheme_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.activej.dataflow.proto.calcite.RecordSchemeProto.internal_static_dataflow_calcite_RecordScheme_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme.class, io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme.Builder.class);
    }

    public static final int FIELD_NAMES_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList fieldNames_;
    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @return A list containing the fieldNames.
     */
    public com.google.protobuf.ProtocolStringList
        getFieldNamesList() {
      return fieldNames_;
    }
    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @return The count of fieldNames.
     */
    public int getFieldNamesCount() {
      return fieldNames_.size();
    }
    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @param index The index of the element to return.
     * @return The fieldNames at the given index.
     */
    public java.lang.String getFieldNames(int index) {
      return fieldNames_.get(index);
    }
    /**
     * <pre>
     * Cannot use `map` here, as map only supports integral or string keys
     * </pre>
     *
     * <code>repeated string field_names = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the fieldNames at the given index.
     */
    public com.google.protobuf.ByteString
        getFieldNamesBytes(int index) {
      return fieldNames_.getByteString(index);
    }

    public static final int TYPES_FIELD_NUMBER = 2;
    private java.util.List<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType> types_;
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    @java.lang.Override
    public java.util.List<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType> getTypesList() {
      return types_;
    }
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder> 
        getTypesOrBuilderList() {
      return types_;
    }
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    @java.lang.Override
    public int getTypesCount() {
      return types_.size();
    }
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    @java.lang.Override
    public io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType getTypes(int index) {
      return types_.get(index);
    }
    /**
     * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
     */
    @java.lang.Override
    public io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder getTypesOrBuilder(
        int index) {
      return types_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < fieldNames_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, fieldNames_.getRaw(i));
      }
      for (int i = 0; i < types_.size(); i++) {
        output.writeMessage(2, types_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < fieldNames_.size(); i++) {
          dataSize += computeStringSizeNoTag(fieldNames_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getFieldNamesList().size();
      }
      for (int i = 0; i < types_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, types_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme)) {
        return super.equals(obj);
      }
      io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme other = (io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme) obj;

      if (!getFieldNamesList()
          .equals(other.getFieldNamesList())) return false;
      if (!getTypesList()
          .equals(other.getTypesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFieldNamesCount() > 0) {
        hash = (37 * hash) + FIELD_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getFieldNamesList().hashCode();
      }
      if (getTypesCount() > 0) {
        hash = (37 * hash) + TYPES_FIELD_NUMBER;
        hash = (53 * hash) + getTypesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dataflow.calcite.RecordScheme}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dataflow.calcite.RecordScheme)
        io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordSchemeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.activej.dataflow.proto.calcite.RecordSchemeProto.internal_static_dataflow_calcite_RecordScheme_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.activej.dataflow.proto.calcite.RecordSchemeProto.internal_static_dataflow_calcite_RecordScheme_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme.class, io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme.Builder.class);
      }

      // Construct using io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTypesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        fieldNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (typesBuilder_ == null) {
          types_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          typesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.activej.dataflow.proto.calcite.RecordSchemeProto.internal_static_dataflow_calcite_RecordScheme_descriptor;
      }

      @java.lang.Override
      public io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme getDefaultInstanceForType() {
        return io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme.getDefaultInstance();
      }

      @java.lang.Override
      public io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme build() {
        io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme buildPartial() {
        io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme result = new io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          fieldNames_ = fieldNames_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.fieldNames_ = fieldNames_;
        if (typesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            types_ = java.util.Collections.unmodifiableList(types_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.types_ = types_;
        } else {
          result.types_ = typesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme) {
          return mergeFrom((io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme other) {
        if (other == io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme.getDefaultInstance()) return this;
        if (!other.fieldNames_.isEmpty()) {
          if (fieldNames_.isEmpty()) {
            fieldNames_ = other.fieldNames_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureFieldNamesIsMutable();
            fieldNames_.addAll(other.fieldNames_);
          }
          onChanged();
        }
        if (typesBuilder_ == null) {
          if (!other.types_.isEmpty()) {
            if (types_.isEmpty()) {
              types_ = other.types_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTypesIsMutable();
              types_.addAll(other.types_);
            }
            onChanged();
          }
        } else {
          if (!other.types_.isEmpty()) {
            if (typesBuilder_.isEmpty()) {
              typesBuilder_.dispose();
              typesBuilder_ = null;
              types_ = other.types_;
              bitField0_ = (bitField0_ & ~0x00000002);
              typesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTypesFieldBuilder() : null;
            } else {
              typesBuilder_.addAllMessages(other.types_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList fieldNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureFieldNamesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          fieldNames_ = new com.google.protobuf.LazyStringArrayList(fieldNames_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @return A list containing the fieldNames.
       */
      public com.google.protobuf.ProtocolStringList
          getFieldNamesList() {
        return fieldNames_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @return The count of fieldNames.
       */
      public int getFieldNamesCount() {
        return fieldNames_.size();
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @param index The index of the element to return.
       * @return The fieldNames at the given index.
       */
      public java.lang.String getFieldNames(int index) {
        return fieldNames_.get(index);
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the fieldNames at the given index.
       */
      public com.google.protobuf.ByteString
          getFieldNamesBytes(int index) {
        return fieldNames_.getByteString(index);
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @param index The index to set the value at.
       * @param value The fieldNames to set.
       * @return This builder for chaining.
       */
      public Builder setFieldNames(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFieldNamesIsMutable();
        fieldNames_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @param value The fieldNames to add.
       * @return This builder for chaining.
       */
      public Builder addFieldNames(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFieldNamesIsMutable();
        fieldNames_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @param values The fieldNames to add.
       * @return This builder for chaining.
       */
      public Builder addAllFieldNames(
          java.lang.Iterable<java.lang.String> values) {
        ensureFieldNamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fieldNames_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldNames() {
        fieldNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cannot use `map` here, as map only supports integral or string keys
       * </pre>
       *
       * <code>repeated string field_names = 1;</code>
       * @param value The bytes of the fieldNames to add.
       * @return This builder for chaining.
       */
      public Builder addFieldNamesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureFieldNamesIsMutable();
        fieldNames_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType> types_ =
        java.util.Collections.emptyList();
      private void ensureTypesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          types_ = new java.util.ArrayList<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType>(types_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder> typesBuilder_;

      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public java.util.List<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType> getTypesList() {
        if (typesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(types_);
        } else {
          return typesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public int getTypesCount() {
        if (typesBuilder_ == null) {
          return types_.size();
        } else {
          return typesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType getTypes(int index) {
        if (typesBuilder_ == null) {
          return types_.get(index);
        } else {
          return typesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder setTypes(
          int index, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType value) {
        if (typesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypesIsMutable();
          types_.set(index, value);
          onChanged();
        } else {
          typesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder setTypes(
          int index, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder builderForValue) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.set(index, builderForValue.build());
          onChanged();
        } else {
          typesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder addTypes(io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType value) {
        if (typesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypesIsMutable();
          types_.add(value);
          onChanged();
        } else {
          typesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder addTypes(
          int index, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType value) {
        if (typesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypesIsMutable();
          types_.add(index, value);
          onChanged();
        } else {
          typesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder addTypes(
          io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder builderForValue) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.add(builderForValue.build());
          onChanged();
        } else {
          typesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder addTypes(
          int index, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder builderForValue) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.add(index, builderForValue.build());
          onChanged();
        } else {
          typesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder addAllTypes(
          java.lang.Iterable<? extends io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType> values) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, types_);
          onChanged();
        } else {
          typesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder clearTypes() {
        if (typesBuilder_ == null) {
          types_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          typesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public Builder removeTypes(int index) {
        if (typesBuilder_ == null) {
          ensureTypesIsMutable();
          types_.remove(index);
          onChanged();
        } else {
          typesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder getTypesBuilder(
          int index) {
        return getTypesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder getTypesOrBuilder(
          int index) {
        if (typesBuilder_ == null) {
          return types_.get(index);  } else {
          return typesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public java.util.List<? extends io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder> 
           getTypesOrBuilderList() {
        if (typesBuilder_ != null) {
          return typesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(types_);
        }
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder addTypesBuilder() {
        return getTypesFieldBuilder().addBuilder(
            io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.getDefaultInstance());
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder addTypesBuilder(
          int index) {
        return getTypesFieldBuilder().addBuilder(
            index, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.getDefaultInstance());
      }
      /**
       * <code>repeated .dataflow.calcite.JavaType types = 2;</code>
       */
      public java.util.List<io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder> 
           getTypesBuilderList() {
        return getTypesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder> 
          getTypesFieldBuilder() {
        if (typesBuilder_ == null) {
          typesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaType.Builder, io.activej.dataflow.proto.calcite.JavaTypeProto.JavaTypeOrBuilder>(
                  types_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        return typesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dataflow.calcite.RecordScheme)
    }

    // @@protoc_insertion_point(class_scope:dataflow.calcite.RecordScheme)
    private static final io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme();
    }

    public static io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RecordScheme>
        PARSER = new com.google.protobuf.AbstractParser<RecordScheme>() {
      @java.lang.Override
      public RecordScheme parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RecordScheme(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RecordScheme> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RecordScheme> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.activej.dataflow.proto.calcite.RecordSchemeProto.RecordScheme getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dataflow_calcite_RecordScheme_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dataflow_calcite_RecordScheme_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033calcite/record_scheme.proto\022\020dataflow." +
      "calcite\032\027calcite/java_type.proto\"N\n\014Reco" +
      "rdScheme\022\023\n\013field_names\030\001 \003(\t\022)\n\005types\030\002" +
      " \003(\0132\032.dataflow.calcite.JavaTypeB8\n!io.a" +
      "ctivej.dataflow.proto.calciteB\021RecordSch" +
      "emeProtoP\000b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.activej.dataflow.proto.calcite.JavaTypeProto.getDescriptor(),
        });
    internal_static_dataflow_calcite_RecordScheme_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dataflow_calcite_RecordScheme_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dataflow_calcite_RecordScheme_descriptor,
        new java.lang.String[] { "FieldNames", "Types", });
    io.activej.dataflow.proto.calcite.JavaTypeProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
