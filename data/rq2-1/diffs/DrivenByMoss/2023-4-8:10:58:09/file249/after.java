// Written by Jürgen Moßgraber - mossgrabers.de
// (c) 2017-2023
// Licensed under LGPLv3 - http://www.gnu.org/licenses/lgpl-3.0.txt

package de.mossgrabers.controller.akai.acvs.controller;

/**
 * IDs for items on the touch screen to send them text and colors.
 *
 * @author Jürgen Moßgraber
 */
@SuppressWarnings("javadoc")
public enum ScreenItem
{
    TRACK1_SELECT(0, true, 0),
    TRACK2_SELECT(0, true, 1),
    TRACK3_SELECT(0, true, 2),
    TRACK4_SELECT(0, true, 3),
    TRACK5_SELECT(0, true, 4),
    TRACK6_SELECT(0, true, 5),
    TRACK7_SELECT(0, true, 6),
    TRACK8_SELECT(0, true, 7),

    TRACK1_TYPE(0, true, 8),
    TRACK2_TYPE(0, true, 9),
    TRACK3_TYPE(0, true, 10),
    TRACK4_TYPE(0, true, 11),
    TRACK5_TYPE(0, true, 12),
    TRACK6_TYPE(0, true, 13),
    TRACK7_TYPE(0, true, 14),
    TRACK8_TYPE(0, true, 15),

    TRACK1_CLIP_PROGRESS(0, false, 0),
    TRACK2_CLIP_PROGRESS(0, false, 1),
    TRACK3_CLIP_PROGRESS(0, false, 2),
    TRACK4_CLIP_PROGRESS(0, false, 3),
    TRACK5_CLIP_PROGRESS(0, false, 4),
    TRACK6_CLIP_PROGRESS(0, false, 5),
    TRACK7_CLIP_PROGRESS(0, false, 6),
    TRACK8_CLIP_PROGRESS(0, false, 7),

    TRACK_NUMBER_OF_SCENES(0, false, 8),

    CLIP1_COLOR(0, false, 24),
    CLIP2_COLOR(0, false, 25),
    CLIP3_COLOR(0, false, 26),
    CLIP4_COLOR(0, false, 27),
    CLIP5_COLOR(0, false, 28),
    CLIP6_COLOR(0, false, 29),
    CLIP7_COLOR(0, false, 30),
    CLIP8_COLOR(0, false, 31),
    CLIP9_COLOR(0, false, 32),
    CLIP10_COLOR(0, false, 33),
    CLIP11_COLOR(0, false, 34),
    CLIP12_COLOR(0, false, 35),
    CLIP13_COLOR(0, false, 36),
    CLIP14_COLOR(0, false, 37),
    CLIP15_COLOR(0, false, 38),
    CLIP16_COLOR(0, false, 39),
    CLIP17_COLOR(0, false, 40),
    CLIP18_COLOR(0, false, 41),
    CLIP19_COLOR(0, false, 42),
    CLIP20_COLOR(0, false, 43),
    CLIP21_COLOR(0, false, 44),
    CLIP22_COLOR(0, false, 45),
    CLIP23_COLOR(0, false, 46),
    CLIP24_COLOR(0, false, 47),
    CLIP25_COLOR(0, false, 48),
    CLIP26_COLOR(0, false, 49),
    CLIP27_COLOR(0, false, 50),
    CLIP28_COLOR(0, false, 51),
    CLIP29_COLOR(0, false, 52),
    CLIP30_COLOR(0, false, 53),
    CLIP31_COLOR(0, false, 54),
    CLIP32_COLOR(0, false, 55),
    CLIP33_COLOR(0, false, 56),
    CLIP34_COLOR(0, false, 57),
    CLIP35_COLOR(0, false, 58),
    CLIP36_COLOR(0, false, 59),
    CLIP37_COLOR(0, false, 60),
    CLIP38_COLOR(0, false, 61),
    CLIP39_COLOR(0, false, 62),
    CLIP40_COLOR(0, false, 63),
    CLIP41_COLOR(0, false, 64),
    CLIP42_COLOR(0, false, 65),
    CLIP43_COLOR(0, false, 66),
    CLIP44_COLOR(0, false, 67),
    CLIP45_COLOR(0, false, 68),
    CLIP46_COLOR(0, false, 69),
    CLIP47_COLOR(0, false, 70),
    CLIP48_COLOR(0, false, 71),
    CLIP49_COLOR(0, false, 72),
    CLIP50_COLOR(0, false, 73),
    CLIP51_COLOR(0, false, 74),
    CLIP52_COLOR(0, false, 75),
    CLIP53_COLOR(0, false, 76),
    CLIP54_COLOR(0, false, 77),
    CLIP55_COLOR(0, false, 78),
    CLIP56_COLOR(0, false, 79),
    CLIP57_COLOR(0, false, 80),
    CLIP58_COLOR(0, false, 81),
    CLIP59_COLOR(0, false, 82),
    CLIP60_COLOR(0, false, 83),
    CLIP61_COLOR(0, false, 84),
    CLIP62_COLOR(0, false, 85),
    CLIP63_COLOR(0, false, 86),
    CLIP64_COLOR(0, false, 87),

    CLIP1_STATE(0, true, 24),
    CLIP2_STATE(0, true, 25),
    CLIP3_STATE(0, true, 26),
    CLIP4_STATE(0, true, 27),
    CLIP5_STATE(0, true, 28),
    CLIP6_STATE(0, true, 29),
    CLIP7_STATE(0, true, 30),
    CLIP8_STATE(0, true, 31),
    CLIP9_STATE(0, true, 32),
    CLIP10_STATE(0, true, 33),
    CLIP11_STATE(0, true, 34),
    CLIP12_STATE(0, true, 35),
    CLIP13_STATE(0, true, 36),
    CLIP14_STATE(0, true, 37),
    CLIP15_STATE(0, true, 38),
    CLIP16_STATE(0, true, 39),
    CLIP17_STATE(0, true, 40),
    CLIP18_STATE(0, true, 41),
    CLIP19_STATE(0, true, 42),
    CLIP20_STATE(0, true, 43),
    CLIP21_STATE(0, true, 44),
    CLIP22_STATE(0, true, 45),
    CLIP23_STATE(0, true, 46),
    CLIP24_STATE(0, true, 47),
    CLIP25_STATE(0, true, 48),
    CLIP26_STATE(0, true, 49),
    CLIP27_STATE(0, true, 50),
    CLIP28_STATE(0, true, 51),
    CLIP29_STATE(0, true, 52),
    CLIP30_STATE(0, true, 53),
    CLIP31_STATE(0, true, 54),
    CLIP32_STATE(0, true, 55),
    CLIP33_STATE(0, true, 56),
    CLIP34_STATE(0, true, 57),
    CLIP35_STATE(0, true, 58),
    CLIP36_STATE(0, true, 59),
    CLIP37_STATE(0, true, 60),
    CLIP38_STATE(0, true, 61),
    CLIP39_STATE(0, true, 62),
    CLIP40_STATE(0, true, 63),
    CLIP41_STATE(0, true, 64),
    CLIP42_STATE(0, true, 65),
    CLIP43_STATE(0, true, 66),
    CLIP44_STATE(0, true, 67),
    CLIP45_STATE(0, true, 68),
    CLIP46_STATE(0, true, 69),
    CLIP47_STATE(0, true, 70),
    CLIP48_STATE(0, true, 71),
    CLIP49_STATE(0, true, 72),
    CLIP50_STATE(0, true, 73),
    CLIP51_STATE(0, true, 74),
    CLIP52_STATE(0, true, 75),
    CLIP53_STATE(0, true, 76),
    CLIP54_STATE(0, true, 77),
    CLIP55_STATE(0, true, 78),
    CLIP56_STATE(0, true, 79),
    CLIP57_STATE(0, true, 80),
    CLIP58_STATE(0, true, 81),
    CLIP59_STATE(0, true, 82),
    CLIP60_STATE(0, true, 83),
    CLIP61_STATE(0, true, 84),
    CLIP62_STATE(0, true, 85),
    CLIP63_STATE(0, true, 86),
    CLIP64_STATE(0, true, 87),

    SCENE1_LAUNCH_STATE(0, true, 88),
    SCENE2_LAUNCH_STATE(0, true, 89),
    SCENE3_LAUNCH_STATE(0, true, 90),
    SCENE4_LAUNCH_STATE(0, true, 91),
    SCENE5_LAUNCH_STATE(0, true, 92),
    SCENE6_LAUNCH_STATE(0, true, 93),
    SCENE7_LAUNCH_STATE(0, true, 94),
    SCENE8_LAUNCH_STATE(0, true, 95),

    SCENE1_SELECT(0, true, 96),
    SCENE2_SELECT(0, true, 97),
    SCENE3_SELECT(0, true, 98),
    SCENE4_SELECT(0, true, 99),
    SCENE5_SELECT(0, true, 100),
    SCENE6_SELECT(0, true, 101),
    SCENE7_SELECT(0, true, 102),
    SCENE8_SELECT(0, true, 103),

    TRACK1_SOLO(1, true, 0),
    TRACK2_SOLO(2, true, 0),
    TRACK3_SOLO(3, true, 0),
    TRACK4_SOLO(4, true, 0),
    TRACK5_SOLO(5, true, 0),
    TRACK6_SOLO(6, true, 0),
    TRACK7_SOLO(7, true, 0),
    TRACK8_SOLO(8, true, 0),

    TRACK1_MUTE(1, true, 1),
    TRACK2_MUTE(2, true, 1),
    TRACK3_MUTE(3, true, 1),
    TRACK4_MUTE(4, true, 1),
    TRACK5_MUTE(5, true, 1),
    TRACK6_MUTE(6, true, 1),
    TRACK7_MUTE(7, true, 1),
    TRACK8_MUTE(8, true, 1),

    TRACK1_SOLOMUTE(1, true, 2),
    TRACK2_SOLOMUTE(2, true, 2),
    TRACK3_SOLOMUTE(3, true, 2),
    TRACK4_SOLOMUTE(4, true, 2),
    TRACK5_SOLOMUTE(5, true, 2),
    TRACK6_SOLOMUTE(6, true, 2),
    TRACK7_SOLOMUTE(7, true, 2),
    TRACK8_SOLOMUTE(8, true, 2),

    TRACK1_CUE(1, true, 3),
    TRACK2_CUE(2, true, 3),
    TRACK3_CUE(3, true, 3),
    TRACK4_CUE(4, true, 3),
    TRACK5_CUE(5, true, 3),
    TRACK6_CUE(6, true, 3),
    TRACK7_CUE(7, true, 3),
    TRACK8_CUE(8, true, 3),

    TRACK1_CROSSFADER(1, true, 4),
    TRACK2_CROSSFADER(2, true, 4),
    TRACK3_CROSSFADER(3, true, 4),
    TRACK4_CROSSFADER(4, true, 4),
    TRACK5_CROSSFADER(5, true, 4),
    TRACK6_CROSSFADER(6, true, 4),
    TRACK7_CROSSFADER(7, true, 4),
    TRACK8_CROSSFADER(8, true, 4),

    TRACK1_REC_ARM(1, true, 5),
    TRACK2_REC_ARM(2, true, 5),
    TRACK3_REC_ARM(3, true, 5),
    TRACK4_REC_ARM(4, true, 5),
    TRACK5_REC_ARM(5, true, 5),
    TRACK6_REC_ARM(6, true, 5),
    TRACK7_REC_ARM(7, true, 5),
    TRACK8_REC_ARM(8, true, 5),

    TRACK1_LEVEL(1, false, 0),
    TRACK2_LEVEL(2, false, 0),
    TRACK3_LEVEL(3, false, 0),
    TRACK4_LEVEL(4, false, 0),
    TRACK5_LEVEL(5, false, 0),
    TRACK6_LEVEL(6, false, 0),
    TRACK7_LEVEL(7, false, 0),
    TRACK8_LEVEL(8, false, 0),

    TRACK1_PAN(1, false, 1),
    TRACK2_PAN(2, false, 1),
    TRACK3_PAN(3, false, 1),
    TRACK4_PAN(4, false, 1),
    TRACK5_PAN(5, false, 1),
    TRACK6_PAN(6, false, 1),
    TRACK7_PAN(7, false, 1),
    TRACK8_PAN(8, false, 1),

    TRACK_SENDS_NO(1, false, 2),

    TRACK1_SEND1_LEVEL(1, false, 3),
    TRACK2_SEND1_LEVEL(2, false, 3),
    TRACK3_SEND1_LEVEL(3, false, 3),
    TRACK4_SEND1_LEVEL(4, false, 3),
    TRACK5_SEND1_LEVEL(5, false, 3),
    TRACK6_SEND1_LEVEL(6, false, 3),
    TRACK7_SEND1_LEVEL(7, false, 3),
    TRACK8_SEND1_LEVEL(8, false, 3),

    TRACK1_SEND2_LEVEL(1, false, 4),
    TRACK2_SEND2_LEVEL(2, false, 4),
    TRACK3_SEND2_LEVEL(3, false, 4),
    TRACK4_SEND2_LEVEL(4, false, 4),
    TRACK5_SEND2_LEVEL(5, false, 4),
    TRACK6_SEND2_LEVEL(6, false, 4),
    TRACK7_SEND2_LEVEL(7, false, 4),
    TRACK8_SEND2_LEVEL(8, false, 4),

    TRACK1_SEND3_LEVEL(1, false, 5),
    TRACK2_SEND3_LEVEL(2, false, 5),
    TRACK3_SEND3_LEVEL(3, false, 5),
    TRACK4_SEND3_LEVEL(4, false, 5),
    TRACK5_SEND3_LEVEL(5, false, 5),
    TRACK6_SEND3_LEVEL(6, false, 5),
    TRACK7_SEND3_LEVEL(7, false, 5),
    TRACK8_SEND3_LEVEL(8, false, 5),

    TRACK1_SEND4_LEVEL(1, false, 6),
    TRACK2_SEND4_LEVEL(2, false, 6),
    TRACK3_SEND4_LEVEL(3, false, 6),
    TRACK4_SEND4_LEVEL(4, false, 6),
    TRACK5_SEND4_LEVEL(5, false, 6),
    TRACK6_SEND4_LEVEL(6, false, 6),
    TRACK7_SEND4_LEVEL(7, false, 6),
    TRACK8_SEND4_LEVEL(8, false, 6),

    TRACK1_VU_LEFT(1, false, 124),
    TRACK2_VU_LEFT(2, false, 124),
    TRACK3_VU_LEFT(3, false, 124),
    TRACK4_VU_LEFT(4, false, 124),
    TRACK5_VU_LEFT(5, false, 124),
    TRACK6_VU_LEFT(6, false, 124),
    TRACK7_VU_LEFT(7, false, 124),
    TRACK8_VU_LEFT(8, false, 124),

    TRACK1_VU_RIGHT(1, false, 125),
    TRACK2_VU_RIGHT(2, false, 125),
    TRACK3_VU_RIGHT(3, false, 125),
    TRACK4_VU_RIGHT(4, false, 125),
    TRACK5_VU_RIGHT(5, false, 125),
    TRACK6_VU_RIGHT(6, false, 125),
    TRACK7_VU_RIGHT(7, false, 125),
    TRACK8_VU_RIGHT(8, false, 125),

    TRACK1_VU_PEAK_LEFT(1, false, 126),
    TRACK2_VU_PEAK_LEFT(2, false, 126),
    TRACK3_VU_PEAK_LEFT(3, false, 126),
    TRACK4_VU_PEAK_LEFT(4, false, 126),
    TRACK5_VU_PEAK_LEFT(5, false, 126),
    TRACK6_VU_PEAK_LEFT(6, false, 126),
    TRACK7_VU_PEAK_LEFT(7, false, 126),
    TRACK8_VU_PEAK_LEFT(8, false, 126),

    TRACK1_VU_PEAK_RIGHT(1, false, 127),
    TRACK2_VU_PEAK_RIGHT(2, false, 127),
    TRACK3_VU_PEAK_RIGHT(3, false, 127),
    TRACK4_VU_PEAK_RIGHT(4, false, 127),
    TRACK5_VU_PEAK_RIGHT(5, false, 127),
    TRACK6_VU_PEAK_RIGHT(6, false, 127),
    TRACK7_VU_PEAK_RIGHT(7, false, 127),
    TRACK8_VU_PEAK_RIGHT(8, false, 127),

    DEVICE_PARAM1_VALUE(0x09, false, 0),
    DEVICE_PARAM2_VALUE(0x09, false, 1),
    DEVICE_PARAM3_VALUE(0x09, false, 2),
    DEVICE_PARAM4_VALUE(0x09, false, 3),
    DEVICE_PARAM5_VALUE(0x09, false, 4),
    DEVICE_PARAM6_VALUE(0x09, false, 5),
    DEVICE_PARAM7_VALUE(0x09, false, 6),
    DEVICE_PARAM8_VALUE(0x09, false, 7),

    DEVICE_COUNT(0x09, false, 16),

    CURRENT_DEVICE_INDEX(0x09, false, 17),
    CURRENT_DEVICE_ACTIVE(0x09, true, 0),

    DEVICE_PARAM1_ENABLED(0x09, true, 112),
    DEVICE_PARAM2_ENABLED(0x09, true, 113),
    DEVICE_PARAM3_ENABLED(0x09, true, 114),
    DEVICE_PARAM4_ENABLED(0x09, true, 115),
    DEVICE_PARAM5_ENABLED(0x09, true, 116),
    DEVICE_PARAM6_ENABLED(0x09, true, 117),
    DEVICE_PARAM7_ENABLED(0x09, true, 118),
    DEVICE_PARAM8_ENABLED(0x09, true, 119),

    MPC_METRONOME(0x0A, true, 0),
    MPC_CAPTURE_MIDI(0x0A, true, 1),
    MPC_ABLETON_LINK(0x0A, true, 2),
    MPC_ARRANGE_OVERDUB(0x0A, true, 3),
    MPC_ARRANGER_AUTOMATION_ARM(0x0A, true, 4),
    MPC_LOOP_SWITCH(0x0A, true, 5),
    MPC_LAUNCH_QUANTIZE(0x0A, true, 6),
    MPC_ARRANGEMENT_SESSION(0x0A, true, 7),
    MPC_FOLLOW(0x0A, true, 8),
    MPC_CLIP_DEVICE_VIEW(0x0A, true, 9),
    MPC_DEVICE_LOCK(0x0A, true, 10),
    MPC_DETAIL_VIEW(0x0A, true, 11),
    MPC_QUANTIZE_INTERVAL(0x0A, true, 15),
    MPC_CLIP_SCENE_LAUNCH(0x0A, true, 23),

    MPC_PAD1_STATE(0x0C, true, 0),
    MPC_PAD2_STATE(0x0C, true, 1),
    MPC_PAD3_STATE(0x0C, true, 2),
    MPC_PAD4_STATE(0x0C, true, 3),
    MPC_PAD5_STATE(0x0C, true, 4),
    MPC_PAD6_STATE(0x0C, true, 5),
    MPC_PAD7_STATE(0x0C, true, 6),
    MPC_PAD8_STATE(0x0C, true, 7),
    MPC_PAD9_STATE(0x0C, true, 8),
    MPC_PAD10_STATE(0x0C, true, 9),
    MPC_PAD11_STATE(0x0C, true, 10),
    MPC_PAD12_STATE(0x0C, true, 11),
    MPC_PAD13_STATE(0x0C, true, 12),
    MPC_PAD14_STATE(0x0C, true, 13),
    MPC_PAD15_STATE(0x0C, true, 14),
    MPC_PAD16_STATE(0x0C, true, 15),
    MPC_PAD17_STATE(0x0C, true, 16),
    MPC_PAD18_STATE(0x0C, true, 17),
    MPC_PAD19_STATE(0x0C, true, 18),
    MPC_PAD20_STATE(0x0C, true, 19),
    MPC_PAD21_STATE(0x0C, true, 20),
    MPC_PAD22_STATE(0x0C, true, 21),
    MPC_PAD23_STATE(0x0C, true, 22),
    MPC_PAD24_STATE(0x0C, true, 23),
    MPC_PAD25_STATE(0x0C, true, 24),
    MPC_PAD26_STATE(0x0C, true, 25),
    MPC_PAD27_STATE(0x0C, true, 26),
    MPC_PAD28_STATE(0x0C, true, 27),
    MPC_PAD29_STATE(0x0C, true, 28),
    MPC_PAD30_STATE(0x0C, true, 29),
    MPC_PAD31_STATE(0x0C, true, 30),
    MPC_PAD32_STATE(0x0C, true, 31),
    MPC_PAD33_STATE(0x0C, true, 32),
    MPC_PAD34_STATE(0x0C, true, 33),
    MPC_PAD35_STATE(0x0C, true, 34),
    MPC_PAD36_STATE(0x0C, true, 35),
    MPC_PAD37_STATE(0x0C, true, 36),
    MPC_PAD38_STATE(0x0C, true, 37),
    MPC_PAD39_STATE(0x0C, true, 38),
    MPC_PAD40_STATE(0x0C, true, 39),
    MPC_PAD41_STATE(0x0C, true, 40),
    MPC_PAD42_STATE(0x0C, true, 41),
    MPC_PAD43_STATE(0x0C, true, 42),
    MPC_PAD44_STATE(0x0C, true, 43),
    MPC_PAD45_STATE(0x0C, true, 44),
    MPC_PAD46_STATE(0x0C, true, 45),
    MPC_PAD47_STATE(0x0C, true, 46),
    MPC_PAD48_STATE(0x0C, true, 47),
    MPC_PAD49_STATE(0x0C, true, 48),
    MPC_PAD50_STATE(0x0C, true, 49),
    MPC_PAD51_STATE(0x0C, true, 50),
    MPC_PAD52_STATE(0x0C, true, 51),
    MPC_PAD53_STATE(0x0C, true, 52),
    MPC_PAD54_STATE(0x0C, true, 53),
    MPC_PAD55_STATE(0x0C, true, 54),
    MPC_PAD56_STATE(0x0C, true, 55),
    MPC_PAD57_STATE(0x0C, true, 56),
    MPC_PAD58_STATE(0x0C, true, 57),
    MPC_PAD59_STATE(0x0C, true, 58),
    MPC_PAD60_STATE(0x0C, true, 59),
    MPC_PAD61_STATE(0x0C, true, 60),
    MPC_PAD62_STATE(0x0C, true, 61),
    MPC_PAD63_STATE(0x0C, true, 62),
    MPC_PAD64_STATE(0x0C, true, 63),

    MPC_PAD1_COLOR(0x0C, false, 0),
    MPC_PAD2_COLOR(0x0C, false, 1),
    MPC_PAD3_COLOR(0x0C, false, 2),
    MPC_PAD4_COLOR(0x0C, false, 3),
    MPC_PAD5_COLOR(0x0C, false, 4),
    MPC_PAD6_COLOR(0x0C, false, 5),
    MPC_PAD7_COLOR(0x0C, false, 6),
    MPC_PAD8_COLOR(0x0C, false, 7),
    MPC_PAD9_COLOR(0x0C, false, 8),
    MPC_PAD10_COLOR(0x0C, false, 9),
    MPC_PAD11_COLOR(0x0C, false, 10),
    MPC_PAD12_COLOR(0x0C, false, 11),
    MPC_PAD13_COLOR(0x0C, false, 12),
    MPC_PAD14_COLOR(0x0C, false, 13),
    MPC_PAD15_COLOR(0x0C, false, 14),
    MPC_PAD16_COLOR(0x0C, false, 15),
    MPC_PAD17_COLOR(0x0C, false, 16),
    MPC_PAD18_COLOR(0x0C, false, 17),
    MPC_PAD19_COLOR(0x0C, false, 18),
    MPC_PAD20_COLOR(0x0C, false, 19),
    MPC_PAD21_COLOR(0x0C, false, 20),
    MPC_PAD22_COLOR(0x0C, false, 21),
    MPC_PAD23_COLOR(0x0C, false, 22),
    MPC_PAD24_COLOR(0x0C, false, 23),
    MPC_PAD25_COLOR(0x0C, false, 24),
    MPC_PAD26_COLOR(0x0C, false, 25),
    MPC_PAD27_COLOR(0x0C, false, 26),
    MPC_PAD28_COLOR(0x0C, false, 27),
    MPC_PAD29_COLOR(0x0C, false, 28),
    MPC_PAD30_COLOR(0x0C, false, 29),
    MPC_PAD31_COLOR(0x0C, false, 30),
    MPC_PAD32_COLOR(0x0C, false, 31),
    MPC_PAD33_COLOR(0x0C, false, 32),
    MPC_PAD34_COLOR(0x0C, false, 33),
    MPC_PAD35_COLOR(0x0C, false, 34),
    MPC_PAD36_COLOR(0x0C, false, 35),
    MPC_PAD37_COLOR(0x0C, false, 36),
    MPC_PAD38_COLOR(0x0C, false, 37),
    MPC_PAD39_COLOR(0x0C, false, 38),
    MPC_PAD40_COLOR(0x0C, false, 39),
    MPC_PAD41_COLOR(0x0C, false, 40),
    MPC_PAD42_COLOR(0x0C, false, 41),
    MPC_PAD43_COLOR(0x0C, false, 42),
    MPC_PAD44_COLOR(0x0C, false, 43),
    MPC_PAD45_COLOR(0x0C, false, 44),
    MPC_PAD46_COLOR(0x0C, false, 45),
    MPC_PAD47_COLOR(0x0C, false, 46),
    MPC_PAD48_COLOR(0x0C, false, 47),
    MPC_PAD49_COLOR(0x0C, false, 48),
    MPC_PAD50_COLOR(0x0C, false, 49),
    MPC_PAD51_COLOR(0x0C, false, 50),
    MPC_PAD52_COLOR(0x0C, false, 51),
    MPC_PAD53_COLOR(0x0C, false, 52),
    MPC_PAD54_COLOR(0x0C, false, 53),
    MPC_PAD55_COLOR(0x0C, false, 54),
    MPC_PAD56_COLOR(0x0C, false, 55),
    MPC_PAD57_COLOR(0x0C, false, 56),
    MPC_PAD58_COLOR(0x0C, false, 57),
    MPC_PAD59_COLOR(0x0C, false, 58),
    MPC_PAD60_COLOR(0x0C, false, 59),
    MPC_PAD61_COLOR(0x0C, false, 60),
    MPC_PAD62_COLOR(0x0C, false, 61),
    MPC_PAD63_COLOR(0x0C, false, 62),
    MPC_PAD64_COLOR(0x0C, false, 63),

    FORCE_PAD1_STATE(0x0C, true, 16),
    FORCE_PAD2_STATE(0x0C, true, 17),
    FORCE_PAD3_STATE(0x0C, true, 18),
    FORCE_PAD4_STATE(0x0C, true, 19),
    FORCE_PAD5_STATE(0x0C, true, 20),
    FORCE_PAD6_STATE(0x0C, true, 21),
    FORCE_PAD7_STATE(0x0C, true, 22),
    FORCE_PAD8_STATE(0x0C, true, 23),
    FORCE_PAD9_STATE(0x0C, true, 24),
    FORCE_PAD10_STATE(0x0C, true, 25),
    FORCE_PAD11_STATE(0x0C, true, 26),
    FORCE_PAD12_STATE(0x0C, true, 27),
    FORCE_PAD13_STATE(0x0C, true, 28),
    FORCE_PAD14_STATE(0x0C, true, 29),
    FORCE_PAD15_STATE(0x0C, true, 30),
    FORCE_PAD16_STATE(0x0C, true, 31),
    FORCE_PAD17_STATE(0x0C, true, 32),
    FORCE_PAD18_STATE(0x0C, true, 33),
    FORCE_PAD19_STATE(0x0C, true, 34),
    FORCE_PAD20_STATE(0x0C, true, 35),
    FORCE_PAD21_STATE(0x0C, true, 36),
    FORCE_PAD22_STATE(0x0C, true, 37),
    FORCE_PAD23_STATE(0x0C, true, 38),
    FORCE_PAD24_STATE(0x0C, true, 39),
    FORCE_PAD25_STATE(0x0C, true, 40),
    FORCE_PAD26_STATE(0x0C, true, 41),
    FORCE_PAD27_STATE(0x0C, true, 42),
    FORCE_PAD28_STATE(0x0C, true, 43),
    FORCE_PAD29_STATE(0x0C, true, 44),
    FORCE_PAD30_STATE(0x0C, true, 45),
    FORCE_PAD31_STATE(0x0C, true, 46),
    FORCE_PAD32_STATE(0x0C, true, 47),
    FORCE_PAD33_STATE(0x0C, true, 48),
    FORCE_PAD34_STATE(0x0C, true, 49),
    FORCE_PAD35_STATE(0x0C, true, 50),
    FORCE_PAD36_STATE(0x0C, true, 51),
    FORCE_PAD37_STATE(0x0C, true, 52),
    FORCE_PAD38_STATE(0x0C, true, 53),
    FORCE_PAD39_STATE(0x0C, true, 54),
    FORCE_PAD40_STATE(0x0C, true, 55),
    FORCE_PAD41_STATE(0x0C, true, 56),
    FORCE_PAD42_STATE(0x0C, true, 57),
    FORCE_PAD43_STATE(0x0C, true, 58),
    FORCE_PAD44_STATE(0x0C, true, 59),
    FORCE_PAD45_STATE(0x0C, true, 60),
    FORCE_PAD46_STATE(0x0C, true, 61),
    FORCE_PAD47_STATE(0x0C, true, 62),
    FORCE_PAD48_STATE(0x0C, true, 63),
    FORCE_PAD49_STATE(0x0C, true, 64),
    FORCE_PAD50_STATE(0x0C, true, 65),
    FORCE_PAD51_STATE(0x0C, true, 66),
    FORCE_PAD52_STATE(0x0C, true, 67),
    FORCE_PAD53_STATE(0x0C, true, 68),
    FORCE_PAD54_STATE(0x0C, true, 69),
    FORCE_PAD55_STATE(0x0C, true, 70),
    FORCE_PAD56_STATE(0x0C, true, 71),
    FORCE_PAD57_STATE(0x0C, true, 72),
    FORCE_PAD58_STATE(0x0C, true, 73),
    FORCE_PAD59_STATE(0x0C, true, 74),
    FORCE_PAD60_STATE(0x0C, true, 75),
    FORCE_PAD61_STATE(0x0C, true, 76),
    FORCE_PAD62_STATE(0x0C, true, 77),
    FORCE_PAD63_STATE(0x0C, true, 78),
    FORCE_PAD64_STATE(0x0C, true, 79),

    FORCE_PAD1_COLOR(0x0C, false, 40),
    FORCE_PAD2_COLOR(0x0C, false, 41),
    FORCE_PAD3_COLOR(0x0C, false, 42),
    FORCE_PAD4_COLOR(0x0C, false, 43),
    FORCE_PAD5_COLOR(0x0C, false, 44),
    FORCE_PAD6_COLOR(0x0C, false, 45),
    FORCE_PAD7_COLOR(0x0C, false, 46),
    FORCE_PAD8_COLOR(0x0C, false, 47),
    FORCE_PAD9_COLOR(0x0C, false, 48),
    FORCE_PAD10_COLOR(0x0C, false, 49),
    FORCE_PAD11_COLOR(0x0C, false, 50),
    FORCE_PAD12_COLOR(0x0C, false, 51),
    FORCE_PAD13_COLOR(0x0C, false, 52),
    FORCE_PAD14_COLOR(0x0C, false, 53),
    FORCE_PAD15_COLOR(0x0C, false, 54),
    FORCE_PAD16_COLOR(0x0C, false, 55),
    FORCE_PAD17_COLOR(0x0C, false, 56),
    FORCE_PAD18_COLOR(0x0C, false, 57),
    FORCE_PAD19_COLOR(0x0C, false, 58),
    FORCE_PAD20_COLOR(0x0C, false, 59),
    FORCE_PAD21_COLOR(0x0C, false, 60),
    FORCE_PAD22_COLOR(0x0C, false, 61),
    FORCE_PAD23_COLOR(0x0C, false, 62),
    FORCE_PAD24_COLOR(0x0C, false, 63),
    FORCE_PAD25_COLOR(0x0C, false, 64),
    FORCE_PAD26_COLOR(0x0C, false, 65),
    FORCE_PAD27_COLOR(0x0C, false, 66),
    FORCE_PAD28_COLOR(0x0C, false, 67),
    FORCE_PAD29_COLOR(0x0C, false, 68),
    FORCE_PAD30_COLOR(0x0C, false, 69),
    FORCE_PAD31_COLOR(0x0C, false, 70),
    FORCE_PAD32_COLOR(0x0C, false, 71),
    FORCE_PAD33_COLOR(0x0C, false, 72),
    FORCE_PAD34_COLOR(0x0C, false, 73),
    FORCE_PAD35_COLOR(0x0C, false, 74),
    FORCE_PAD36_COLOR(0x0C, false, 75),
    FORCE_PAD37_COLOR(0x0C, false, 76),
    FORCE_PAD38_COLOR(0x0C, false, 77),
    FORCE_PAD39_COLOR(0x0C, false, 78),
    FORCE_PAD40_COLOR(0x0C, false, 79),
    FORCE_PAD41_COLOR(0x0C, false, 80),
    FORCE_PAD42_COLOR(0x0C, false, 81),
    FORCE_PAD43_COLOR(0x0C, false, 82),
    FORCE_PAD44_COLOR(0x0C, false, 83),
    FORCE_PAD45_COLOR(0x0C, false, 84),
    FORCE_PAD46_COLOR(0x0C, false, 85),
    FORCE_PAD47_COLOR(0x0C, false, 86),
    FORCE_PAD48_COLOR(0x0C, false, 87),
    FORCE_PAD49_COLOR(0x0C, false, 88),
    FORCE_PAD50_COLOR(0x0C, false, 89),
    FORCE_PAD51_COLOR(0x0C, false, 90),
    FORCE_PAD52_COLOR(0x0C, false, 91),
    FORCE_PAD53_COLOR(0x0C, false, 92),
    FORCE_PAD54_COLOR(0x0C, false, 93),
    FORCE_PAD55_COLOR(0x0C, false, 94),
    FORCE_PAD56_COLOR(0x0C, false, 95),
    FORCE_PAD57_COLOR(0x0C, false, 96),
    FORCE_PAD58_COLOR(0x0C, false, 97),
    FORCE_PAD59_COLOR(0x0C, false, 98),
    FORCE_PAD60_COLOR(0x0C, false, 99),
    FORCE_PAD61_COLOR(0x0C, false, 100),
    FORCE_PAD62_COLOR(0x0C, false, 101),
    FORCE_PAD63_COLOR(0x0C, false, 102),
    FORCE_PAD64_COLOR(0x0C, false, 103),

    FORCE_TRACK1_COLOR(0x0C, false, 24),
    FORCE_TRACK2_COLOR(0x0C, false, 25),
    FORCE_TRACK3_COLOR(0x0C, false, 26),
    FORCE_TRACK4_COLOR(0x0C, false, 27),
    FORCE_TRACK5_COLOR(0x0C, false, 28),
    FORCE_TRACK6_COLOR(0x0C, false, 29),
    FORCE_TRACK7_COLOR(0x0C, false, 30),
    FORCE_TRACK8_COLOR(0x0C, false, 31),

    FORCE_TRACK1_ASSIGN(0x0C, false, 32),
    FORCE_TRACK2_ASSIGN(0x0C, false, 33),
    FORCE_TRACK3_ASSIGN(0x0C, false, 34),
    FORCE_TRACK4_ASSIGN(0x0C, false, 35),
    FORCE_TRACK5_ASSIGN(0x0C, false, 36),
    FORCE_TRACK6_ASSIGN(0x0C, false, 37),
    FORCE_TRACK7_ASSIGN(0x0C, false, 38),
    FORCE_TRACK8_ASSIGN(0x0C, false, 39),

    FORCE_SCENE1(0x0C, true, 80),
    FORCE_SCENE2(0x0C, true, 81),
    FORCE_SCENE3(0x0C, true, 82),
    FORCE_SCENE4(0x0C, true, 83),
    FORCE_SCENE5(0x0C, true, 84),
    FORCE_SCENE6(0x0C, true, 85),
    FORCE_SCENE7(0x0C, true, 86),
    FORCE_SCENE8(0x0C, true, 87),

    // Force & MPC-X

    KNOB_VALUE1(0x0D, false, 0),
    KNOB_VALUE2(0x0D, false, 1),
    KNOB_VALUE3(0x0D, false, 2),
    KNOB_VALUE4(0x0D, false, 3),
    KNOB_VALUE5(0x0D, false, 4),
    KNOB_VALUE6(0x0D, false, 5),
    KNOB_VALUE7(0x0D, false, 6),
    KNOB_VALUE8(0x0D, false, 7),
    KNOB_VALUE9(0x0D, false, 8),
    KNOB_VALUE10(0x0D, false, 9),
    KNOB_VALUE11(0x0D, false, 10),
    KNOB_VALUE12(0x0D, false, 11),
    KNOB_VALUE13(0x0D, false, 12),
    KNOB_VALUE14(0x0D, false, 13),
    KNOB_VALUE15(0x0D, false, 14),
    KNOB_VALUE16(0x0D, false, 15),

    KNOBSTYLE1_COLOR(0x0D, true, 16),
    KNOBSTYLE2_COLOR(0x0D, true, 17),
    KNOBSTYLE3_COLOR(0x0D, true, 18),
    KNOBSTYLE4_COLOR(0x0D, true, 19),
    KNOBSTYLE5_COLOR(0x0D, true, 20),
    KNOBSTYLE6_COLOR(0x0D, true, 21),
    KNOBSTYLE7_COLOR(0x0D, true, 22),
    KNOBSTYLE8_COLOR(0x0D, true, 23),
    KNOBSTYLE9_COLOR(0x0D, true, 24),
    KNOBSTYLE10_COLOR(0x0D, true, 25),
    KNOBSTYLE11_COLOR(0x0D, true, 26),
    KNOBSTYLE12_COLOR(0x0D, true, 27),
    KNOBSTYLE13_COLOR(0x0D, true, 28),
    KNOBSTYLE14_COLOR(0x0D, true, 29),
    KNOBSTYLE15_COLOR(0x0D, true, 30),
    KNOBSTYLE16_COLOR(0x0D, true, 31);


    private final int     channel;
    private final boolean isNote;
    private final int     noteCC;


    /**
     * Constructor.
     *
     * @param channel The MIDI channel
     * @param isNote True for note (otherwise CC)
     * @param noteCC The note or CC
     */
    private ScreenItem (final int channel, final boolean isNote, final int noteCC)
    {
        this.channel = channel;
        this.isNote = isNote;
        this.noteCC = noteCC;
    }


    /**
     * Get an offset item.
     *
     * @param item The base item
     * @param offset The offset
     * @return The offset item
     */
    public static ScreenItem get (final ScreenItem item, final int offset)
    {
        return ScreenItem.values ()[item.ordinal () + offset];
    }


    /**
     * Get the MIDI channel on which to send
     *
     * @return The MIDI channel
     */
    public int getChannel ()
    {
        return this.channel;
    }


    /**
     * Returns true if sent as a note otherwise as CC.
     *
     * @return True for note
     */
    public boolean isNote ()
    {
        return this.isNote;
    }


    /**
     * Get the note/CC message to use.
     *
     * @return The note or CC message
     */
    public int getNoteCC ()
    {
        return this.noteCC;
    }
}
