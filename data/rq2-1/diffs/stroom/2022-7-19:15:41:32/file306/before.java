/*
 * This file is generated by jOOQ.
 */
package stroom.explorer.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import stroom.explorer.impl.db.jooq.Indexes;
import stroom.explorer.impl.db.jooq.Keys;
import stroom.explorer.impl.db.jooq.Stroom;
import stroom.explorer.impl.db.jooq.tables.records.ExplorerPathRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExplorerPath extends TableImpl<ExplorerPathRecord> {

    private static final long serialVersionUID = -257334687;

    /**
     * The reference instance of <code>stroom.explorer_path</code>
     */
    public static final ExplorerPath EXPLORER_PATH = new ExplorerPath();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExplorerPathRecord> getRecordType() {
        return ExplorerPathRecord.class;
    }

    /**
     * The column <code>stroom.explorer_path.ancestor</code>.
     */
    public final TableField<ExplorerPathRecord, Integer> ANCESTOR = createField(DSL.name("ancestor"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.explorer_path.descendant</code>.
     */
    public final TableField<ExplorerPathRecord, Integer> DESCENDANT = createField(DSL.name("descendant"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.explorer_path.depth</code>.
     */
    public final TableField<ExplorerPathRecord, Integer> DEPTH = createField(DSL.name("depth"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.explorer_path.order_index</code>.
     */
    public final TableField<ExplorerPathRecord, Integer> ORDER_INDEX = createField(DSL.name("order_index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>stroom.explorer_path</code> table reference
     */
    public ExplorerPath() {
        this(DSL.name("explorer_path"), null);
    }

    /**
     * Create an aliased <code>stroom.explorer_path</code> table reference
     */
    public ExplorerPath(String alias) {
        this(DSL.name(alias), EXPLORER_PATH);
    }

    /**
     * Create an aliased <code>stroom.explorer_path</code> table reference
     */
    public ExplorerPath(Name alias) {
        this(alias, EXPLORER_PATH);
    }

    private ExplorerPath(Name alias, Table<ExplorerPathRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExplorerPath(Name alias, Table<ExplorerPathRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ExplorerPath(Table<O> child, ForeignKey<O, ExplorerPathRecord> key) {
        super(child, key, EXPLORER_PATH);
    }

    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXPLORER_PATH_EXPLORER_PATH_ANCESTOR_DEPTH_ORDER_INDEX, Indexes.EXPLORER_PATH_EXPLORER_PATH_DEPTH, Indexes.EXPLORER_PATH_EXPLORER_PATH_DESCENDANT, Indexes.EXPLORER_PATH_EXPLORER_PATH_DESCENDANT_DEPTH, Indexes.EXPLORER_PATH_PRIMARY);
    }

    @Override
    public UniqueKey<ExplorerPathRecord> getPrimaryKey() {
        return Keys.KEY_EXPLORER_PATH_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExplorerPathRecord>> getKeys() {
        return Arrays.<UniqueKey<ExplorerPathRecord>>asList(Keys.KEY_EXPLORER_PATH_PRIMARY);
    }

    @Override
    public ExplorerPath as(String alias) {
        return new ExplorerPath(DSL.name(alias), this);
    }

    @Override
    public ExplorerPath as(Name alias) {
        return new ExplorerPath(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExplorerPath rename(String name) {
        return new ExplorerPath(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExplorerPath rename(Name name) {
        return new ExplorerPath(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
