package stroom.statistics.impl.sql.search;

import stroom.util.shared.AbstractConfig;
import stroom.util.shared.IsStroomConfig;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


@JsonPropertyOrder(alphabetic = true)
public class SearchConfig extends AbstractConfig implements IsStroomConfig {

    private final int maxResults;
    private final int fetchSize;

    public SearchConfig() {
        maxResults = 100000;
        fetchSize = 5000;
    }

    @SuppressWarnings("unused")
    @JsonCreator
    public SearchConfig(@JsonProperty("maxResults") final int maxResults,
                        @JsonProperty("fetchSize") final int fetchSize) {
        this.maxResults = maxResults;
        this.fetchSize = fetchSize;
    }

    @JsonPropertyDescription("The maximum number of records that can be returned from the statistics DB in a " +
            "single query prior to aggregation")
    public int getMaxResults() {
        return maxResults;
    }

    @JsonPropertyDescription("Gives the JDBC driver a hint as to the number of rows that should be fetched from " +
            "the database when more rows are needed for ResultSet objects generated by this Statement. Depends " +
            "on 'useCursorFetch=true' being set in the JDBC connect string. If not set, the JDBC driver's default " +
            "will be used.")
    public int getFetchSize() {
        return fetchSize;
    }

    @Override
    public String toString() {
        return "SearchConfig{" +
                ", maxResults=" + maxResults +
                ", fetchSize=" + fetchSize +
                '}';
    }
}
