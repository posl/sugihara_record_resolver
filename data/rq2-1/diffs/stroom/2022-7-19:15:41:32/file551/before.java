/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables.records;


import stroom.proxy.repo.db.jooq.tables.ForwardAggregate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForwardAggregateRecord extends UpdatableRecordImpl<ForwardAggregateRecord> implements Record9<Long, Long, Integer, Long, Boolean, String, Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>forward_aggregate.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>forward_aggregate.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>forward_aggregate.update_time_ms</code>.
     */
    public void setUpdateTimeMs(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>forward_aggregate.update_time_ms</code>.
     */
    public Long getUpdateTimeMs() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>forward_aggregate.fk_forward_url_id</code>.
     */
    public void setFkForwardUrlId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>forward_aggregate.fk_forward_url_id</code>.
     */
    public Integer getFkForwardUrlId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>forward_aggregate.fk_aggregate_id</code>.
     */
    public void setFkAggregateId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>forward_aggregate.fk_aggregate_id</code>.
     */
    public Long getFkAggregateId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>forward_aggregate.success</code>.
     */
    public void setSuccess(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>forward_aggregate.success</code>.
     */
    public Boolean getSuccess() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>forward_aggregate.error</code>.
     */
    public void setError(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>forward_aggregate.error</code>.
     */
    public String getError() {
        return (String) get(5);
    }

    /**
     * Setter for <code>forward_aggregate.tries</code>.
     */
    public void setTries(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>forward_aggregate.tries</code>.
     */
    public Long getTries() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>forward_aggregate.new_position</code>.
     */
    public void setNewPosition(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>forward_aggregate.new_position</code>.
     */
    public Long getNewPosition() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>forward_aggregate.retry_position</code>.
     */
    public void setRetryPosition(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>forward_aggregate.retry_position</code>.
     */
    public Long getRetryPosition() {
        return (Long) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Integer, Long, Boolean, String, Long, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Long, Integer, Long, Boolean, String, Long, Long, Long> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ForwardAggregate.FORWARD_AGGREGATE.ID;
    }

    @Override
    public Field<Long> field2() {
        return ForwardAggregate.FORWARD_AGGREGATE.UPDATE_TIME_MS;
    }

    @Override
    public Field<Integer> field3() {
        return ForwardAggregate.FORWARD_AGGREGATE.FK_FORWARD_URL_ID;
    }

    @Override
    public Field<Long> field4() {
        return ForwardAggregate.FORWARD_AGGREGATE.FK_AGGREGATE_ID;
    }

    @Override
    public Field<Boolean> field5() {
        return ForwardAggregate.FORWARD_AGGREGATE.SUCCESS;
    }

    @Override
    public Field<String> field6() {
        return ForwardAggregate.FORWARD_AGGREGATE.ERROR;
    }

    @Override
    public Field<Long> field7() {
        return ForwardAggregate.FORWARD_AGGREGATE.TRIES;
    }

    @Override
    public Field<Long> field8() {
        return ForwardAggregate.FORWARD_AGGREGATE.NEW_POSITION;
    }

    @Override
    public Field<Long> field9() {
        return ForwardAggregate.FORWARD_AGGREGATE.RETRY_POSITION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getUpdateTimeMs();
    }

    @Override
    public Integer component3() {
        return getFkForwardUrlId();
    }

    @Override
    public Long component4() {
        return getFkAggregateId();
    }

    @Override
    public Boolean component5() {
        return getSuccess();
    }

    @Override
    public String component6() {
        return getError();
    }

    @Override
    public Long component7() {
        return getTries();
    }

    @Override
    public Long component8() {
        return getNewPosition();
    }

    @Override
    public Long component9() {
        return getRetryPosition();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getUpdateTimeMs();
    }

    @Override
    public Integer value3() {
        return getFkForwardUrlId();
    }

    @Override
    public Long value4() {
        return getFkAggregateId();
    }

    @Override
    public Boolean value5() {
        return getSuccess();
    }

    @Override
    public String value6() {
        return getError();
    }

    @Override
    public Long value7() {
        return getTries();
    }

    @Override
    public Long value8() {
        return getNewPosition();
    }

    @Override
    public Long value9() {
        return getRetryPosition();
    }

    @Override
    public ForwardAggregateRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value2(Long value) {
        setUpdateTimeMs(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value3(Integer value) {
        setFkForwardUrlId(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value4(Long value) {
        setFkAggregateId(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value5(Boolean value) {
        setSuccess(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value6(String value) {
        setError(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value7(Long value) {
        setTries(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value8(Long value) {
        setNewPosition(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord value9(Long value) {
        setRetryPosition(value);
        return this;
    }

    @Override
    public ForwardAggregateRecord values(Long value1, Long value2, Integer value3, Long value4, Boolean value5, String value6, Long value7, Long value8, Long value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ForwardAggregateRecord
     */
    public ForwardAggregateRecord() {
        super(ForwardAggregate.FORWARD_AGGREGATE);
    }

    /**
     * Create a detached, initialised ForwardAggregateRecord
     */
    public ForwardAggregateRecord(Long id, Long updateTimeMs, Integer fkForwardUrlId, Long fkAggregateId, Boolean success, String error, Long tries, Long newPosition, Long retryPosition) {
        super(ForwardAggregate.FORWARD_AGGREGATE);

        setId(id);
        setUpdateTimeMs(updateTimeMs);
        setFkForwardUrlId(fkForwardUrlId);
        setFkAggregateId(fkAggregateId);
        setSuccess(success);
        setError(error);
        setTries(tries);
        setNewPosition(newPosition);
        setRetryPosition(retryPosition);
    }
}
