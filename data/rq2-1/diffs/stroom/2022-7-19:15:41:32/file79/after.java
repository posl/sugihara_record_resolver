/*
 * This file is generated by jOOQ.
 */
package stroom.cluster.lock.impl.db.jooq.tables.records;


import stroom.cluster.lock.impl.db.jooq.tables.ClusterLock;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClusterLockRecord extends UpdatableRecordImpl<ClusterLockRecord> implements Record3<Integer, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>stroom.cluster_lock.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.cluster_lock.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.cluster_lock.version</code>.
     */
    public void setVersion(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.cluster_lock.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>stroom.cluster_lock.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.cluster_lock.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ClusterLock.CLUSTER_LOCK.ID;
    }

    @Override
    public Field<Integer> field2() {
        return ClusterLock.CLUSTER_LOCK.VERSION;
    }

    @Override
    public Field<String> field3() {
        return ClusterLock.CLUSTER_LOCK.NAME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public ClusterLockRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ClusterLockRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public ClusterLockRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public ClusterLockRecord values(Integer value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClusterLockRecord
     */
    public ClusterLockRecord() {
        super(ClusterLock.CLUSTER_LOCK);
    }

    /**
     * Create a detached, initialised ClusterLockRecord
     */
    public ClusterLockRecord(Integer id, Integer version, String name) {
        super(ClusterLock.CLUSTER_LOCK);

        setId(id);
        setVersion(version);
        setName(name);
    }
}
