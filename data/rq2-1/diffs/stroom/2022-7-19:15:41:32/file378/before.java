/*
 * This file is generated by jOOQ.
 */
package stroom.meta.impl.db.jooq.tables.records;


import stroom.meta.impl.db.jooq.tables.MetaKey;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaKeyRecord extends UpdatableRecordImpl<MetaKeyRecord> implements Record3<Integer, String, Byte> {

    private static final long serialVersionUID = 435941021;

    /**
     * Setter for <code>stroom.meta_key.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.meta_key.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.meta_key.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.meta_key.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>stroom.meta_key.field_type</code>.
     */
    public void setFieldType(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.meta_key.field_type</code>.
     */
    public Byte getFieldType() {
        return (Byte) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Byte> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return MetaKey.META_KEY.ID;
    }

    @Override
    public Field<String> field2() {
        return MetaKey.META_KEY.NAME;
    }

    @Override
    public Field<Byte> field3() {
        return MetaKey.META_KEY.FIELD_TYPE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Byte component3() {
        return getFieldType();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Byte value3() {
        return getFieldType();
    }

    @Override
    public MetaKeyRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MetaKeyRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public MetaKeyRecord value3(Byte value) {
        setFieldType(value);
        return this;
    }

    @Override
    public MetaKeyRecord values(Integer value1, String value2, Byte value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MetaKeyRecord
     */
    public MetaKeyRecord() {
        super(MetaKey.META_KEY);
    }

    /**
     * Create a detached, initialised MetaKeyRecord
     */
    public MetaKeyRecord(Integer id, String name, Byte fieldType) {
        super(MetaKey.META_KEY);

        set(0, id);
        set(1, name);
        set(2, fieldType);
    }
}
