/*
 * This file is generated by jOOQ.
 */
package stroom.annotation.impl.db.jooq.tables;


import stroom.annotation.impl.db.jooq.Keys;
import stroom.annotation.impl.db.jooq.Stroom;
import stroom.annotation.impl.db.jooq.tables.records.AnnotationEntryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnnotationEntry extends TableImpl<AnnotationEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.annotation_entry</code>
     */
    public static final AnnotationEntry ANNOTATION_ENTRY = new AnnotationEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationEntryRecord> getRecordType() {
        return AnnotationEntryRecord.class;
    }

    /**
     * The column <code>stroom.annotation_entry.id</code>.
     */
    public final TableField<AnnotationEntryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_entry.version</code>.
     */
    public final TableField<AnnotationEntryRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.create_time_ms</code>.
     */
    public final TableField<AnnotationEntryRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.create_user</code>.
     */
    public final TableField<AnnotationEntryRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.update_time_ms</code>.
     */
    public final TableField<AnnotationEntryRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.update_user</code>.
     */
    public final TableField<AnnotationEntryRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.fk_annotation_id</code>.
     */
    public final TableField<AnnotationEntryRecord, Long> FK_ANNOTATION_ID = createField(DSL.name("fk_annotation_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.type</code>.
     */
    public final TableField<AnnotationEntryRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.data</code>.
     */
    public final TableField<AnnotationEntryRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    private AnnotationEntry(Name alias, Table<AnnotationEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnnotationEntry(Name alias, Table<AnnotationEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.annotation_entry</code> table reference
     */
    public AnnotationEntry(String alias) {
        this(DSL.name(alias), ANNOTATION_ENTRY);
    }

    /**
     * Create an aliased <code>stroom.annotation_entry</code> table reference
     */
    public AnnotationEntry(Name alias) {
        this(alias, ANNOTATION_ENTRY);
    }

    /**
     * Create a <code>stroom.annotation_entry</code> table reference
     */
    public AnnotationEntry() {
        this(DSL.name("annotation_entry"), null);
    }

    public <O extends Record> AnnotationEntry(Table<O> child, ForeignKey<O, AnnotationEntryRecord> key) {
        super(child, key, ANNOTATION_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnnotationEntryRecord, Long> getIdentity() {
        return (Identity<AnnotationEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnotationEntryRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_ENTRY_PRIMARY;
    }

    @Override
    public List<ForeignKey<AnnotationEntryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANNOTATION_ENTRY_FK_ANNOTATION_ID);
    }

    private transient Annotation _annotation;

    /**
     * Get the implicit join path to the <code>stroom.annotation</code> table.
     */
    public Annotation annotation() {
        if (_annotation == null)
            _annotation = new Annotation(this, Keys.ANNOTATION_ENTRY_FK_ANNOTATION_ID);

        return _annotation;
    }

    @Override
    public TableField<AnnotationEntryRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public AnnotationEntry as(String alias) {
        return new AnnotationEntry(DSL.name(alias), this);
    }

    @Override
    public AnnotationEntry as(Name alias) {
        return new AnnotationEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationEntry rename(String name) {
        return new AnnotationEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationEntry rename(Name name) {
        return new AnnotationEntry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Long, String, Long, String, Long, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
