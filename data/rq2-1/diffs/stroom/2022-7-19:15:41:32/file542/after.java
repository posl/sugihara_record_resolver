/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import stroom.proxy.repo.db.jooq.DefaultSchema;
import stroom.proxy.repo.db.jooq.Indexes;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.tables.records.ForwardAggregateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForwardAggregate extends TableImpl<ForwardAggregateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>forward_aggregate</code>
     */
    public static final ForwardAggregate FORWARD_AGGREGATE = new ForwardAggregate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForwardAggregateRecord> getRecordType() {
        return ForwardAggregateRecord.class;
    }

    /**
     * The column <code>forward_aggregate.id</code>.
     */
    public final TableField<ForwardAggregateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>forward_aggregate.update_time_ms</code>.
     */
    public final TableField<ForwardAggregateRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>forward_aggregate.fk_forward_dest_id</code>.
     */
    public final TableField<ForwardAggregateRecord, Integer> FK_FORWARD_DEST_ID = createField(DSL.name("fk_forward_dest_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>forward_aggregate.fk_aggregate_id</code>.
     */
    public final TableField<ForwardAggregateRecord, Long> FK_AGGREGATE_ID = createField(DSL.name("fk_aggregate_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>forward_aggregate.success</code>.
     */
    public final TableField<ForwardAggregateRecord, Boolean> SUCCESS = createField(DSL.name("success"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>forward_aggregate.error</code>.
     */
    public final TableField<ForwardAggregateRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>forward_aggregate.tries</code>.
     */
    public final TableField<ForwardAggregateRecord, Long> TRIES = createField(DSL.name("tries"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>forward_aggregate.new_position</code>.
     */
    public final TableField<ForwardAggregateRecord, Long> NEW_POSITION = createField(DSL.name("new_position"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>forward_aggregate.retry_position</code>.
     */
    public final TableField<ForwardAggregateRecord, Long> RETRY_POSITION = createField(DSL.name("retry_position"), SQLDataType.BIGINT, this, "");

    private ForwardAggregate(Name alias, Table<ForwardAggregateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForwardAggregate(Name alias, Table<ForwardAggregateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>forward_aggregate</code> table reference
     */
    public ForwardAggregate(String alias) {
        this(DSL.name(alias), FORWARD_AGGREGATE);
    }

    /**
     * Create an aliased <code>forward_aggregate</code> table reference
     */
    public ForwardAggregate(Name alias) {
        this(alias, FORWARD_AGGREGATE);
    }

    /**
     * Create a <code>forward_aggregate</code> table reference
     */
    public ForwardAggregate() {
        this(DSL.name("forward_aggregate"), null);
    }

    public <O extends Record> ForwardAggregate(Table<O> child, ForeignKey<O, ForwardAggregateRecord> key) {
        super(child, key, FORWARD_AGGREGATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NEW_POSITION_FORWARD_AGGREGATE_INDEX, Indexes.RETRY_POSITION_FORWARD_AGGREGATE_INDEX);
    }

    @Override
    public UniqueKey<ForwardAggregateRecord> getPrimaryKey() {
        return Keys.FORWARD_AGGREGATE__;
    }

    @Override
    public ForwardAggregate as(String alias) {
        return new ForwardAggregate(DSL.name(alias), this);
    }

    @Override
    public ForwardAggregate as(Name alias) {
        return new ForwardAggregate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForwardAggregate rename(String name) {
        return new ForwardAggregate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForwardAggregate rename(Name name) {
        return new ForwardAggregate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Integer, Long, Boolean, String, Long, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
