/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import stroom.proxy.repo.db.jooq.DefaultSchema;
import stroom.proxy.repo.db.jooq.Indexes;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.tables.records.SourceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Source extends TableImpl<SourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>source</code>
     */
    public static final Source SOURCE = new Source();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourceRecord> getRecordType() {
        return SourceRecord.class;
    }

    /**
     * The column <code>source.id</code>.
     */
    public final TableField<SourceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>source.file_store_id</code>.
     */
    public final TableField<SourceRecord, Long> FILE_STORE_ID = createField(DSL.name("file_store_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>source.fk_feed_id</code>.
     */
    public final TableField<SourceRecord, Long> FK_FEED_ID = createField(DSL.name("fk_feed_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>source.examined</code>.
     */
    public final TableField<SourceRecord, Boolean> EXAMINED = createField(DSL.name("examined"), SQLDataType.BOOLEAN.defaultValue(DSL.field("FALSE", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>source.deleted</code>.
     */
    public final TableField<SourceRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field("FALSE", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>source.item_count</code>.
     */
    public final TableField<SourceRecord, Integer> ITEM_COUNT = createField(DSL.name("item_count"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>source.new_position</code>.
     */
    public final TableField<SourceRecord, Long> NEW_POSITION = createField(DSL.name("new_position"), SQLDataType.BIGINT, this, "");

    private Source(Name alias, Table<SourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Source(Name alias, Table<SourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>source</code> table reference
     */
    public Source(String alias) {
        this(DSL.name(alias), SOURCE);
    }

    /**
     * Create an aliased <code>source</code> table reference
     */
    public Source(Name alias) {
        this(alias, SOURCE);
    }

    /**
     * Create a <code>source</code> table reference
     */
    public Source() {
        this(DSL.name("source"), null);
    }

    public <O extends Record> Source(Table<O> child, ForeignKey<O, SourceRecord> key) {
        super(child, key, SOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXAMINED_ITEM_COUNT_INDEX, Indexes.NEW_POSITION_SOURCE_INDEX, Indexes.SOURCE_FILE_STORE_ID);
    }

    @Override
    public UniqueKey<SourceRecord> getPrimaryKey() {
        return Keys.SOURCE__;
    }

    @Override
    public Source as(String alias) {
        return new Source(DSL.name(alias), this);
    }

    @Override
    public Source as(Name alias) {
        return new Source(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Source rename(String name) {
        return new Source(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Source rename(Name name) {
        return new Source(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Boolean, Boolean, Integer, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
