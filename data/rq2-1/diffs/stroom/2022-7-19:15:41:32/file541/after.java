/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import stroom.proxy.repo.db.jooq.DefaultSchema;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.tables.records.FeedRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feed extends TableImpl<FeedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>feed</code>
     */
    public static final Feed FEED = new Feed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedRecord> getRecordType() {
        return FeedRecord.class;
    }

    /**
     * The column <code>feed.id</code>.
     */
    public final TableField<FeedRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>feed.feed_name</code>.
     */
    public final TableField<FeedRecord, String> FEED_NAME = createField(DSL.name("feed_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>feed.type_name</code>.
     */
    public final TableField<FeedRecord, String> TYPE_NAME = createField(DSL.name("type_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private Feed(Name alias, Table<FeedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feed(Name alias, Table<FeedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>feed</code> table reference
     */
    public Feed(String alias) {
        this(DSL.name(alias), FEED);
    }

    /**
     * Create an aliased <code>feed</code> table reference
     */
    public Feed(Name alias) {
        this(alias, FEED);
    }

    /**
     * Create a <code>feed</code> table reference
     */
    public Feed() {
        this(DSL.name("feed"), null);
    }

    public <O extends Record> Feed(Table<O> child, ForeignKey<O, FeedRecord> key) {
        super(child, key, FEED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<FeedRecord> getPrimaryKey() {
        return Keys.FEED__;
    }

    @Override
    public Feed as(String alias) {
        return new Feed(DSL.name(alias), this);
    }

    @Override
    public Feed as(Name alias) {
        return new Feed(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feed rename(String name) {
        return new Feed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feed rename(Name name) {
        return new Feed(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
