/*
 * This file is generated by jOOQ.
 */
package stroom.cluster.lock.impl.db.jooq;


import javax.annotation.processing.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import stroom.cluster.lock.impl.db.jooq.tables.ClusterLock;
import stroom.cluster.lock.impl.db.jooq.tables.records.ClusterLockRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>stroom</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ClusterLockRecord, Integer> IDENTITY_CLUSTER_LOCK = Identities0.IDENTITY_CLUSTER_LOCK;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ClusterLockRecord> KEY_CLUSTER_LOCK_PRIMARY = UniqueKeys0.KEY_CLUSTER_LOCK_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<ClusterLockRecord, Integer> IDENTITY_CLUSTER_LOCK = Internal.createIdentity(ClusterLock.CLUSTER_LOCK, ClusterLock.CLUSTER_LOCK.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ClusterLockRecord> KEY_CLUSTER_LOCK_PRIMARY = Internal.createUniqueKey(ClusterLock.CLUSTER_LOCK, "KEY_cluster_lock_PRIMARY", ClusterLock.CLUSTER_LOCK.ID);
    }
}
