/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import stroom.proxy.repo.db.jooq.DefaultSchema;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.tables.records.ForwardDestRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForwardDest extends TableImpl<ForwardDestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>forward_dest</code>
     */
    public static final ForwardDest FORWARD_DEST = new ForwardDest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForwardDestRecord> getRecordType() {
        return ForwardDestRecord.class;
    }

    /**
     * The column <code>forward_dest.id</code>.
     */
    public final TableField<ForwardDestRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>forward_dest.name</code>.
     */
    public final TableField<ForwardDestRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ForwardDest(Name alias, Table<ForwardDestRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForwardDest(Name alias, Table<ForwardDestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>forward_dest</code> table reference
     */
    public ForwardDest(String alias) {
        this(DSL.name(alias), FORWARD_DEST);
    }

    /**
     * Create an aliased <code>forward_dest</code> table reference
     */
    public ForwardDest(Name alias) {
        this(alias, FORWARD_DEST);
    }

    /**
     * Create a <code>forward_dest</code> table reference
     */
    public ForwardDest() {
        this(DSL.name("forward_dest"), null);
    }

    public <O extends Record> ForwardDest(Table<O> child, ForeignKey<O, ForwardDestRecord> key) {
        super(child, key, FORWARD_DEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ForwardDestRecord> getPrimaryKey() {
        return Keys.FORWARD_DEST__;
    }

    @Override
    public ForwardDest as(String alias) {
        return new ForwardDest(DSL.name(alias), this);
    }

    @Override
    public ForwardDest as(Name alias) {
        return new ForwardDest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForwardDest rename(String name) {
        return new ForwardDest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForwardDest rename(Name name) {
        return new ForwardDest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
