/*
 * This file is generated by jOOQ.
 */
package stroom.data.store.impl.fs.db.jooq;


import stroom.data.store.impl.fs.db.jooq.tables.FsFeedPath;
import stroom.data.store.impl.fs.db.jooq.tables.FsMetaVolume;
import stroom.data.store.impl.fs.db.jooq.tables.FsTypePath;
import stroom.data.store.impl.fs.db.jooq.tables.FsVolume;
import stroom.data.store.impl.fs.db.jooq.tables.FsVolumeState;
import stroom.data.store.impl.fs.db.jooq.tables.records.FsFeedPathRecord;
import stroom.data.store.impl.fs.db.jooq.tables.records.FsMetaVolumeRecord;
import stroom.data.store.impl.fs.db.jooq.tables.records.FsTypePathRecord;
import stroom.data.store.impl.fs.db.jooq.tables.records.FsVolumeRecord;
import stroom.data.store.impl.fs.db.jooq.tables.records.FsVolumeStateRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import javax.annotation.processing.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>stroom</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<FsFeedPathRecord, Integer> IDENTITY_FS_FEED_PATH = Identities0.IDENTITY_FS_FEED_PATH;
    public static final Identity<FsTypePathRecord, Integer> IDENTITY_FS_TYPE_PATH = Identities0.IDENTITY_FS_TYPE_PATH;
    public static final Identity<FsVolumeRecord, Integer> IDENTITY_FS_VOLUME = Identities0.IDENTITY_FS_VOLUME;
    public static final Identity<FsVolumeStateRecord, Integer> IDENTITY_FS_VOLUME_STATE = Identities0.IDENTITY_FS_VOLUME_STATE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FsFeedPathRecord> KEY_FS_FEED_PATH_PRIMARY = UniqueKeys0.KEY_FS_FEED_PATH_PRIMARY;
    public static final UniqueKey<FsFeedPathRecord> KEY_FS_FEED_PATH_NAME = UniqueKeys0.KEY_FS_FEED_PATH_NAME;
    public static final UniqueKey<FsMetaVolumeRecord> KEY_FS_META_VOLUME_PRIMARY = UniqueKeys0.KEY_FS_META_VOLUME_PRIMARY;
    public static final UniqueKey<FsTypePathRecord> KEY_FS_TYPE_PATH_PRIMARY = UniqueKeys0.KEY_FS_TYPE_PATH_PRIMARY;
    public static final UniqueKey<FsTypePathRecord> KEY_FS_TYPE_PATH_NAME = UniqueKeys0.KEY_FS_TYPE_PATH_NAME;
    public static final UniqueKey<FsVolumeRecord> KEY_FS_VOLUME_PRIMARY = UniqueKeys0.KEY_FS_VOLUME_PRIMARY;
    public static final UniqueKey<FsVolumeRecord> KEY_FS_VOLUME_PATH = UniqueKeys0.KEY_FS_VOLUME_PATH;
    public static final UniqueKey<FsVolumeStateRecord> KEY_FS_VOLUME_STATE_PRIMARY = UniqueKeys0.KEY_FS_VOLUME_STATE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FsVolumeRecord, FsVolumeStateRecord> FS_VOLUME_FK_FS_VOLUME_STATE_ID = ForeignKeys0.FS_VOLUME_FK_FS_VOLUME_STATE_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<FsFeedPathRecord, Integer> IDENTITY_FS_FEED_PATH = Internal.createIdentity(FsFeedPath.FS_FEED_PATH, FsFeedPath.FS_FEED_PATH.ID);
        public static Identity<FsTypePathRecord, Integer> IDENTITY_FS_TYPE_PATH = Internal.createIdentity(FsTypePath.FS_TYPE_PATH, FsTypePath.FS_TYPE_PATH.ID);
        public static Identity<FsVolumeRecord, Integer> IDENTITY_FS_VOLUME = Internal.createIdentity(FsVolume.FS_VOLUME, FsVolume.FS_VOLUME.ID);
        public static Identity<FsVolumeStateRecord, Integer> IDENTITY_FS_VOLUME_STATE = Internal.createIdentity(FsVolumeState.FS_VOLUME_STATE, FsVolumeState.FS_VOLUME_STATE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<FsFeedPathRecord> KEY_FS_FEED_PATH_PRIMARY = Internal.createUniqueKey(FsFeedPath.FS_FEED_PATH, "KEY_fs_feed_path_PRIMARY", FsFeedPath.FS_FEED_PATH.ID);
        public static final UniqueKey<FsFeedPathRecord> KEY_FS_FEED_PATH_NAME = Internal.createUniqueKey(FsFeedPath.FS_FEED_PATH, "KEY_fs_feed_path_name", FsFeedPath.FS_FEED_PATH.NAME);
        public static final UniqueKey<FsMetaVolumeRecord> KEY_FS_META_VOLUME_PRIMARY = Internal.createUniqueKey(FsMetaVolume.FS_META_VOLUME, "KEY_fs_meta_volume_PRIMARY", FsMetaVolume.FS_META_VOLUME.META_ID, FsMetaVolume.FS_META_VOLUME.FS_VOLUME_ID);
        public static final UniqueKey<FsTypePathRecord> KEY_FS_TYPE_PATH_PRIMARY = Internal.createUniqueKey(FsTypePath.FS_TYPE_PATH, "KEY_fs_type_path_PRIMARY", FsTypePath.FS_TYPE_PATH.ID);
        public static final UniqueKey<FsTypePathRecord> KEY_FS_TYPE_PATH_NAME = Internal.createUniqueKey(FsTypePath.FS_TYPE_PATH, "KEY_fs_type_path_name", FsTypePath.FS_TYPE_PATH.NAME);
        public static final UniqueKey<FsVolumeRecord> KEY_FS_VOLUME_PRIMARY = Internal.createUniqueKey(FsVolume.FS_VOLUME, "KEY_fs_volume_PRIMARY", FsVolume.FS_VOLUME.ID);
        public static final UniqueKey<FsVolumeRecord> KEY_FS_VOLUME_PATH = Internal.createUniqueKey(FsVolume.FS_VOLUME, "KEY_fs_volume_path", FsVolume.FS_VOLUME.PATH);
        public static final UniqueKey<FsVolumeStateRecord> KEY_FS_VOLUME_STATE_PRIMARY = Internal.createUniqueKey(FsVolumeState.FS_VOLUME_STATE, "KEY_fs_volume_state_PRIMARY", FsVolumeState.FS_VOLUME_STATE.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<FsVolumeRecord, FsVolumeStateRecord> FS_VOLUME_FK_FS_VOLUME_STATE_ID = Internal.createForeignKey(stroom.data.store.impl.fs.db.jooq.Keys.KEY_FS_VOLUME_STATE_PRIMARY, FsVolume.FS_VOLUME, "fs_volume_fk_fs_volume_state_id", FsVolume.FS_VOLUME.FK_FS_VOLUME_STATE_ID);
    }
}
