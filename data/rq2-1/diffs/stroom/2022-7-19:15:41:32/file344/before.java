/*
 * This file is generated by jOOQ.
 */
package stroom.job.impl.db.jooq.tables;


import stroom.job.impl.db.jooq.Indexes;
import stroom.job.impl.db.jooq.Keys;
import stroom.job.impl.db.jooq.Stroom;
import stroom.job.impl.db.jooq.tables.records.JobNodeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobNode extends TableImpl<JobNodeRecord> {

    private static final long serialVersionUID = 411899448;

    /**
     * The reference instance of <code>stroom.job_node</code>
     */
    public static final JobNode JOB_NODE = new JobNode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobNodeRecord> getRecordType() {
        return JobNodeRecord.class;
    }

    /**
     * The column <code>stroom.job_node.id</code>.
     */
    public final TableField<JobNodeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.job_node.version</code>.
     */
    public final TableField<JobNodeRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.create_time_ms</code>.
     */
    public final TableField<JobNodeRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.create_user</code>.
     */
    public final TableField<JobNodeRecord, String> CREATE_USER = createField(DSL.name("create_user"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.update_time_ms</code>.
     */
    public final TableField<JobNodeRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.update_user</code>.
     */
    public final TableField<JobNodeRecord, String> UPDATE_USER = createField(DSL.name("update_user"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.job_id</code>.
     */
    public final TableField<JobNodeRecord, Integer> JOB_ID = createField(DSL.name("job_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.job_type</code>.
     */
    public final TableField<JobNodeRecord, Byte> JOB_TYPE = createField(DSL.name("job_type"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.node_name</code>.
     */
    public final TableField<JobNodeRecord, String> NODE_NAME = createField(DSL.name("node_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.task_limit</code>.
     */
    public final TableField<JobNodeRecord, Integer> TASK_LIMIT = createField(DSL.name("task_limit"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.job_node.schedule</code>.
     */
    public final TableField<JobNodeRecord, String> SCHEDULE = createField(DSL.name("schedule"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.job_node.enabled</code>.
     */
    public final TableField<JobNodeRecord, Boolean> ENABLED = createField(DSL.name("enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>stroom.job_node</code> table reference
     */
    public JobNode() {
        this(DSL.name("job_node"), null);
    }

    /**
     * Create an aliased <code>stroom.job_node</code> table reference
     */
    public JobNode(String alias) {
        this(DSL.name(alias), JOB_NODE);
    }

    /**
     * Create an aliased <code>stroom.job_node</code> table reference
     */
    public JobNode(Name alias) {
        this(alias, JOB_NODE);
    }

    private JobNode(Name alias, Table<JobNodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobNode(Name alias, Table<JobNodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JobNode(Table<O> child, ForeignKey<O, JobNodeRecord> key) {
        super(child, key, JOB_NODE);
    }

    @Override
    public Schema getSchema() {
        return Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOB_NODE_JOB_ID, Indexes.JOB_NODE_PRIMARY);
    }

    @Override
    public Identity<JobNodeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOB_NODE;
    }

    @Override
    public UniqueKey<JobNodeRecord> getPrimaryKey() {
        return Keys.KEY_JOB_NODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<JobNodeRecord>> getKeys() {
        return Arrays.<UniqueKey<JobNodeRecord>>asList(Keys.KEY_JOB_NODE_PRIMARY);
    }

    @Override
    public List<ForeignKey<JobNodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobNodeRecord, ?>>asList(Keys.JOB_ID);
    }

    public Job job() {
        return new Job(this, Keys.JOB_ID);
    }

    @Override
    public TableField<JobNodeRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public JobNode as(String alias) {
        return new JobNode(DSL.name(alias), this);
    }

    @Override
    public JobNode as(Name alias) {
        return new JobNode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobNode rename(String name) {
        return new JobNode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobNode rename(Name name) {
        return new JobNode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, Long, String, Long, String, Integer, Byte, String, Integer, String, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
