/*
 * This file is generated by jOOQ.
 */
package stroom.security.identity.db.jooq.tables;


import stroom.security.identity.db.jooq.Keys;
import stroom.security.identity.db.jooq.Stroom;
import stroom.security.identity.db.jooq.tables.records.TokenRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Token extends TableImpl<TokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.token</code>
     */
    public static final Token TOKEN = new Token();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenRecord> getRecordType() {
        return TokenRecord.class;
    }

    /**
     * The column <code>stroom.token.id</code>.
     */
    public final TableField<TokenRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.token.version</code>.
     */
    public final TableField<TokenRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.token.create_time_ms</code>.
     */
    public final TableField<TokenRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.token.create_user</code>.
     */
    public final TableField<TokenRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.token.update_time_ms</code>.
     */
    public final TableField<TokenRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.token.update_user</code>.
     */
    public final TableField<TokenRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.token.fk_account_id</code>.
     */
    public final TableField<TokenRecord, Integer> FK_ACCOUNT_ID = createField(DSL.name("fk_account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.token.fk_token_type_id</code>.
     */
    public final TableField<TokenRecord, Integer> FK_TOKEN_TYPE_ID = createField(DSL.name("fk_token_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.token.data</code>.
     */
    public final TableField<TokenRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.token.expires_on_ms</code>.
     */
    public final TableField<TokenRecord, Long> EXPIRES_ON_MS = createField(DSL.name("expires_on_ms"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.token.comments</code>.
     */
    public final TableField<TokenRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.token.enabled</code>.
     */
    public final TableField<TokenRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private Token(Name alias, Table<TokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Token(Name alias, Table<TokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.token</code> table reference
     */
    public Token(String alias) {
        this(DSL.name(alias), TOKEN);
    }

    /**
     * Create an aliased <code>stroom.token</code> table reference
     */
    public Token(Name alias) {
        this(alias, TOKEN);
    }

    /**
     * Create a <code>stroom.token</code> table reference
     */
    public Token() {
        this(DSL.name("token"), null);
    }

    public <O extends Record> Token(Table<O> child, ForeignKey<O, TokenRecord> key) {
        super(child, key, TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<TokenRecord, Integer> getIdentity() {
        return (Identity<TokenRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokenRecord> getPrimaryKey() {
        return Keys.KEY_TOKEN_PRIMARY;
    }

    @Override
    public List<ForeignKey<TokenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TOKEN_FK_ACCOUNT_ID, Keys.TOKEN_FK_TOKEN_TYPE_ID);
    }

    private transient Account _account;
    private transient TokenType _tokenType;

    /**
     * Get the implicit join path to the <code>stroom.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.TOKEN_FK_ACCOUNT_ID);

        return _account;
    }

    /**
     * Get the implicit join path to the <code>stroom.token_type</code> table.
     */
    public TokenType tokenType() {
        if (_tokenType == null)
            _tokenType = new TokenType(this, Keys.TOKEN_FK_TOKEN_TYPE_ID);

        return _tokenType;
    }

    @Override
    public TableField<TokenRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Token as(String alias) {
        return new Token(DSL.name(alias), this);
    }

    @Override
    public Token as(Name alias) {
        return new Token(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(String name) {
        return new Token(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(Name name) {
        return new Token(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, Long, String, Long, String, Integer, Integer, String, Long, String, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
