/*
 * This file is generated by jOOQ.
 */
package stroom.proxy.repo.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.proxy.repo.db.jooq.DefaultSchema;
import stroom.proxy.repo.db.jooq.Keys;
import stroom.proxy.repo.db.jooq.tables.records.SourceEntryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SourceEntry extends TableImpl<SourceEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>source_entry</code>
     */
    public static final SourceEntry SOURCE_ENTRY = new SourceEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourceEntryRecord> getRecordType() {
        return SourceEntryRecord.class;
    }

    /**
     * The column <code>source_entry.id</code>.
     */
    public final TableField<SourceEntryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>source_entry.extension</code>.
     */
    public final TableField<SourceEntryRecord, String> EXTENSION = createField(DSL.name("extension"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>source_entry.extension_type</code>.
     */
    public final TableField<SourceEntryRecord, Integer> EXTENSION_TYPE = createField(DSL.name("extension_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>source_entry.byte_size</code>.
     */
    public final TableField<SourceEntryRecord, Long> BYTE_SIZE = createField(DSL.name("byte_size"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>source_entry.fk_source_item_id</code>.
     */
    public final TableField<SourceEntryRecord, Long> FK_SOURCE_ITEM_ID = createField(DSL.name("fk_source_item_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private SourceEntry(Name alias, Table<SourceEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SourceEntry(Name alias, Table<SourceEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>source_entry</code> table reference
     */
    public SourceEntry(String alias) {
        this(DSL.name(alias), SOURCE_ENTRY);
    }

    /**
     * Create an aliased <code>source_entry</code> table reference
     */
    public SourceEntry(Name alias) {
        this(alias, SOURCE_ENTRY);
    }

    /**
     * Create a <code>source_entry</code> table reference
     */
    public SourceEntry() {
        this(DSL.name("source_entry"), null);
    }

    public <O extends Record> SourceEntry(Table<O> child, ForeignKey<O, SourceEntryRecord> key) {
        super(child, key, SOURCE_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SourceEntryRecord> getPrimaryKey() {
        return Keys.PK_SOURCE_ENTRY;
    }

    @Override
    public List<UniqueKey<SourceEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<SourceEntryRecord>>asList(Keys.PK_SOURCE_ENTRY);
    }

    @Override
    public List<ForeignKey<SourceEntryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SourceEntryRecord, ?>>asList(Keys.FK_SOURCE_ENTRY_SOURCE_ITEM_1);
    }

    private transient SourceItem _sourceItem;

    public SourceItem sourceItem() {
        if (_sourceItem == null)
            _sourceItem = new SourceItem(this, Keys.FK_SOURCE_ENTRY_SOURCE_ITEM_1);

        return _sourceItem;
    }

    @Override
    public SourceEntry as(String alias) {
        return new SourceEntry(DSL.name(alias), this);
    }

    @Override
    public SourceEntry as(Name alias) {
        return new SourceEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SourceEntry rename(String name) {
        return new SourceEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SourceEntry rename(Name name) {
        return new SourceEntry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Integer, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
