/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.analytics.impl.db.jooq.tables.AnalyticNotificationState;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalyticNotificationStateRecord extends UpdatableRecordImpl<AnalyticNotificationStateRecord> implements Record3<String, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>stroom.analytic_notification_state.fk_analytic_notification_uuid</code>.
     */
    public void setFkAnalyticNotificationUuid(String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>stroom.analytic_notification_state.fk_analytic_notification_uuid</code>.
     */
    public String getFkAnalyticNotificationUuid() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>stroom.analytic_notification_state.last_execution_time</code>.
     */
    public void setLastExecutionTime(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>stroom.analytic_notification_state.last_execution_time</code>.
     */
    public Long getLastExecutionTime() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>stroom.analytic_notification_state.message</code>.
     */
    public void setMessage(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.analytic_notification_state.message</code>.
     */
    public String getMessage() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Long, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return AnalyticNotificationState.ANALYTIC_NOTIFICATION_STATE.FK_ANALYTIC_NOTIFICATION_UUID;
    }

    @Override
    public Field<Long> field2() {
        return AnalyticNotificationState.ANALYTIC_NOTIFICATION_STATE.LAST_EXECUTION_TIME;
    }

    @Override
    public Field<String> field3() {
        return AnalyticNotificationState.ANALYTIC_NOTIFICATION_STATE.MESSAGE;
    }

    @Override
    public String component1() {
        return getFkAnalyticNotificationUuid();
    }

    @Override
    public Long component2() {
        return getLastExecutionTime();
    }

    @Override
    public String component3() {
        return getMessage();
    }

    @Override
    public String value1() {
        return getFkAnalyticNotificationUuid();
    }

    @Override
    public Long value2() {
        return getLastExecutionTime();
    }

    @Override
    public String value3() {
        return getMessage();
    }

    @Override
    public AnalyticNotificationStateRecord value1(String value) {
        setFkAnalyticNotificationUuid(value);
        return this;
    }

    @Override
    public AnalyticNotificationStateRecord value2(Long value) {
        setLastExecutionTime(value);
        return this;
    }

    @Override
    public AnalyticNotificationStateRecord value3(String value) {
        setMessage(value);
        return this;
    }

    @Override
    public AnalyticNotificationStateRecord values(String value1, Long value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnalyticNotificationStateRecord
     */
    public AnalyticNotificationStateRecord() {
        super(AnalyticNotificationState.ANALYTIC_NOTIFICATION_STATE);
    }

    /**
     * Create a detached, initialised AnalyticNotificationStateRecord
     */
    public AnalyticNotificationStateRecord(String fkAnalyticNotificationUuid, Long lastExecutionTime, String message) {
        super(AnalyticNotificationState.ANALYTIC_NOTIFICATION_STATE);

        setFkAnalyticNotificationUuid(fkAnalyticNotificationUuid);
        setLastExecutionTime(lastExecutionTime);
        setMessage(message);
    }
}
