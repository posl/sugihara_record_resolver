/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.AnalyticRuleRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalyticRule extends TableImpl<AnalyticRuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.analytic_rule</code>
     */
    public static final AnalyticRule ANALYTIC_RULE = new AnalyticRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalyticRuleRecord> getRecordType() {
        return AnalyticRuleRecord.class;
    }

    /**
     * The column <code>stroom.analytic_rule.id</code>.
     */
    public final TableField<AnalyticRuleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.analytic_rule.version</code>.
     */
    public final TableField<AnalyticRuleRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule.create_time_ms</code>.
     */
    public final TableField<AnalyticRuleRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule.create_user</code>.
     */
    public final TableField<AnalyticRuleRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule.update_time_ms</code>.
     */
    public final TableField<AnalyticRuleRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule.update_user</code>.
     */
    public final TableField<AnalyticRuleRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule.analytic_uuid</code>.
     */
    public final TableField<AnalyticRuleRecord, String> ANALYTIC_UUID = createField(DSL.name("analytic_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule.node</code>.
     */
    public final TableField<AnalyticRuleRecord, String> NODE = createField(DSL.name("node"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule.enabled</code>.
     */
    public final TableField<AnalyticRuleRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.analytic_rule.deleted</code>.
     */
    public final TableField<AnalyticRuleRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private AnalyticRule(Name alias, Table<AnalyticRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnalyticRule(Name alias, Table<AnalyticRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.analytic_rule</code> table reference
     */
    public AnalyticRule(String alias) {
        this(DSL.name(alias), ANALYTIC_RULE);
    }

    /**
     * Create an aliased <code>stroom.analytic_rule</code> table reference
     */
    public AnalyticRule(Name alias) {
        this(alias, ANALYTIC_RULE);
    }

    /**
     * Create a <code>stroom.analytic_rule</code> table reference
     */
    public AnalyticRule() {
        this(DSL.name("analytic_rule"), null);
    }

    public <O extends Record> AnalyticRule(Table<O> child, ForeignKey<O, AnalyticRuleRecord> key) {
        super(child, key, ANALYTIC_RULE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnalyticRuleRecord, Integer> getIdentity() {
        return (Identity<AnalyticRuleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnalyticRuleRecord> getPrimaryKey() {
        return Keys.KEY_ANALYTIC_RULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnalyticRuleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ANALYTIC_RULE_ANALYTIC_RULE_ANALYTIC_UUID);
    }

    @Override
    public TableField<AnalyticRuleRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public AnalyticRule as(String alias) {
        return new AnalyticRule(DSL.name(alias), this);
    }

    @Override
    public AnalyticRule as(Name alias) {
        return new AnalyticRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticRule rename(String name) {
        return new AnalyticRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticRule rename(Name name) {
        return new AnalyticRule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Long, String, Long, String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
