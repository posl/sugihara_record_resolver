/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.AnalyticProcessorFilterTrackerRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalyticProcessorFilterTracker extends TableImpl<AnalyticProcessorFilterTrackerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>stroom.analytic_processor_filter_tracker</code>
     */
    public static final AnalyticProcessorFilterTracker ANALYTIC_PROCESSOR_FILTER_TRACKER = new AnalyticProcessorFilterTracker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalyticProcessorFilterTrackerRecord> getRecordType() {
        return AnalyticProcessorFilterTrackerRecord.class;
    }

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.fk_analytic_processor_filter_uuid</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, String> FK_ANALYTIC_PROCESSOR_FILTER_UUID = createField(DSL.name("fk_analytic_processor_filter_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.last_poll_ms</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, Long> LAST_POLL_MS = createField(DSL.name("last_poll_ms"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.last_poll_task_count</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, Integer> LAST_POLL_TASK_COUNT = createField(DSL.name("last_poll_task_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.last_meta_id</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, Long> LAST_META_ID = createField(DSL.name("last_meta_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.last_event_id</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, Long> LAST_EVENT_ID = createField(DSL.name("last_event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.last_event_time</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, Long> LAST_EVENT_TIME = createField(DSL.name("last_event_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.meta_count</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, Long> META_COUNT = createField(DSL.name("meta_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>stroom.analytic_processor_filter_tracker.event_count</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, Long> EVENT_COUNT = createField(DSL.name("event_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.analytic_processor_filter_tracker.message</code>.
     */
    public final TableField<AnalyticProcessorFilterTrackerRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    private AnalyticProcessorFilterTracker(Name alias, Table<AnalyticProcessorFilterTrackerRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnalyticProcessorFilterTracker(Name alias, Table<AnalyticProcessorFilterTrackerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.analytic_processor_filter_tracker</code>
     * table reference
     */
    public AnalyticProcessorFilterTracker(String alias) {
        this(DSL.name(alias), ANALYTIC_PROCESSOR_FILTER_TRACKER);
    }

    /**
     * Create an aliased <code>stroom.analytic_processor_filter_tracker</code>
     * table reference
     */
    public AnalyticProcessorFilterTracker(Name alias) {
        this(alias, ANALYTIC_PROCESSOR_FILTER_TRACKER);
    }

    /**
     * Create a <code>stroom.analytic_processor_filter_tracker</code> table
     * reference
     */
    public AnalyticProcessorFilterTracker() {
        this(DSL.name("analytic_processor_filter_tracker"), null);
    }

    public <O extends Record> AnalyticProcessorFilterTracker(Table<O> child, ForeignKey<O, AnalyticProcessorFilterTrackerRecord> key) {
        super(child, key, ANALYTIC_PROCESSOR_FILTER_TRACKER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public UniqueKey<AnalyticProcessorFilterTrackerRecord> getPrimaryKey() {
        return Keys.KEY_ANALYTIC_PROCESSOR_FILTER_TRACKER_PRIMARY;
    }

    @Override
    public List<ForeignKey<AnalyticProcessorFilterTrackerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ANALYTIC_PROCESSOR_FILTER_UUID);
    }

    private transient AnalyticProcessorFilter _analyticProcessorFilter;

    /**
     * Get the implicit join path to the
     * <code>stroom.analytic_processor_filter</code> table.
     */
    public AnalyticProcessorFilter analyticProcessorFilter() {
        if (_analyticProcessorFilter == null)
            _analyticProcessorFilter = new AnalyticProcessorFilter(this, Keys.FK_ANALYTIC_PROCESSOR_FILTER_UUID);

        return _analyticProcessorFilter;
    }

    @Override
    public AnalyticProcessorFilterTracker as(String alias) {
        return new AnalyticProcessorFilterTracker(DSL.name(alias), this);
    }

    @Override
    public AnalyticProcessorFilterTracker as(Name alias) {
        return new AnalyticProcessorFilterTracker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticProcessorFilterTracker rename(String name) {
        return new AnalyticProcessorFilterTracker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticProcessorFilterTracker rename(Name name) {
        return new AnalyticProcessorFilterTracker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Long, Integer, Long, Long, Long, Long, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
