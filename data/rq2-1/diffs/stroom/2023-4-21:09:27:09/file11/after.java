/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.AnalyticRuleStateRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalyticRuleState extends TableImpl<AnalyticRuleStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.analytic_rule_state</code>
     */
    public static final AnalyticRuleState ANALYTIC_RULE_STATE = new AnalyticRuleState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalyticRuleStateRecord> getRecordType() {
        return AnalyticRuleStateRecord.class;
    }

    /**
     * The column <code>stroom.analytic_rule_state.id</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.analytic_rule_state.version</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule_state.create_time_ms</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule_state.create_user</code>.
     */
    public final TableField<AnalyticRuleStateRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule_state.update_time_ms</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule_state.update_user</code>.
     */
    public final TableField<AnalyticRuleStateRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule_state.analytic_uuid</code>.
     */
    public final TableField<AnalyticRuleStateRecord, String> ANALYTIC_UUID = createField(DSL.name("analytic_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.analytic_rule_state.last_meta_id</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Long> LAST_META_ID = createField(DSL.name("last_meta_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.analytic_rule_state.last_event_id</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Long> LAST_EVENT_ID = createField(DSL.name("last_event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.analytic_rule_state.last_event_time</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Long> LAST_EVENT_TIME = createField(DSL.name("last_event_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.analytic_rule_state.last_execution_time</code>.
     */
    public final TableField<AnalyticRuleStateRecord, Long> LAST_EXECUTION_TIME = createField(DSL.name("last_execution_time"), SQLDataType.BIGINT, this, "");

    private AnalyticRuleState(Name alias, Table<AnalyticRuleStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnalyticRuleState(Name alias, Table<AnalyticRuleStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.analytic_rule_state</code> table reference
     */
    public AnalyticRuleState(String alias) {
        this(DSL.name(alias), ANALYTIC_RULE_STATE);
    }

    /**
     * Create an aliased <code>stroom.analytic_rule_state</code> table reference
     */
    public AnalyticRuleState(Name alias) {
        this(alias, ANALYTIC_RULE_STATE);
    }

    /**
     * Create a <code>stroom.analytic_rule_state</code> table reference
     */
    public AnalyticRuleState() {
        this(DSL.name("analytic_rule_state"), null);
    }

    public <O extends Record> AnalyticRuleState(Table<O> child, ForeignKey<O, AnalyticRuleStateRecord> key) {
        super(child, key, ANALYTIC_RULE_STATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnalyticRuleStateRecord, Integer> getIdentity() {
        return (Identity<AnalyticRuleStateRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnalyticRuleStateRecord> getPrimaryKey() {
        return Keys.KEY_ANALYTIC_RULE_STATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnalyticRuleStateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ANALYTIC_RULE_STATE_ANALYTIC_RULE_STATE_ANALYTIC_UUID);
    }

    @Override
    public TableField<AnalyticRuleStateRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public AnalyticRuleState as(String alias) {
        return new AnalyticRuleState(DSL.name(alias), this);
    }

    @Override
    public AnalyticRuleState as(Name alias) {
        return new AnalyticRuleState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticRuleState rename(String name) {
        return new AnalyticRuleState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalyticRuleState rename(Name name) {
        return new AnalyticRuleState(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Long, String, Long, String, String, Long, Long, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
