/*-
 * ========================LICENSE_START=================================
 * restheart-commons
 * %%
 * Copyright (C) 2019 - 2022 SoftInstigate
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.restheart;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.LoggerContext;

import com.github.mustachejava.DefaultMustacheFactory;
import com.github.mustachejava.MustacheNotFoundException;
import com.google.common.collect.Maps;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.jxpath.JXPathContext;
import org.restheart.utils.ConfigurationUtils;
import org.restheart.utils.URLUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.SafeConstructor;

import static org.restheart.ConfigurationKeys.*;
import static org.restheart.utils.ConfigurationUtils.*;

/**
 * Class that holds the configuration.
 *
 * @author Andrea Di Cesare {@literal <andrea@softinstigate.com>}
 */
public class Configuration {

    /**
     * the version is read from the JAR's MANIFEST.MF file, which is automatically
     * generated by the Maven build process
     */
    public static final String VERSION = Configuration.class.getPackage().getImplementationVersion() == null
        ? "unknown, not packaged"
        : Configuration.class.getPackage().getImplementationVersion();

    static final Logger LOGGER = LoggerFactory.getLogger(Configuration.class);

    public static final String DEFAULT_ROUTE = "0.0.0.0";

    /**
     * hold the path of the configuration file
     */
    private static Path PATH = null;

    private static final Listener DEFAULT_HTTP_LISTENER = new Listener(true, "localhost", 8080);
    private static final TLSListener DEFAULT_HTTPS_LISTENER = new TLSListener(false, "localhost", 4443, null, null, null);
    private static final Listener DEFAULT_AJP_LISTENER = new Listener(false, "localhost", 8009);

    private final Listener httpListener;
    private final Listener ajpListener;
    private final TLSListener httpsListener;
    private final String instanceName;
    private final String pluginsDirectory;
    private final List<ProxiedResource> proxies;
    private final List<StaticResouce> staticResources;
    private final String logFilePath;
    private final Level logLevel;
    private final boolean logToConsole;
    private final boolean logToFile;
    private final List<String> traceHeaders;
    private final int requestsLimit;
    private final int ioThreads;
    private final int workerThreads;
    private final int bufferSize;
    private final boolean directBuffers;
    private final boolean forceGzipEncoding;
    private final Map<String, Object> connectionOptions;
    private final Integer logExchangeDump;
    private final boolean ansiConsole;
    private final boolean allowUnescapedCharactersInUrl;

    private Map<String, Object> conf;

    /**
     * Creates a new instance of Configuration from the configuration file For any
     * missing property the default value is used.
     *
     * @param conf   the key-value configuration map
     * @param silent
     * @throws org.restheart.ConfigurationException
     */
    private Configuration(Map<String, Object> conf, final Path confFilePath, boolean silent) throws ConfigurationException {
        PATH = confFilePath;

        this.conf = conf;

        ansiConsole = asBoolean(conf, ANSI_CONSOLE_KEY, true, silent);

        if (findOrDefault(conf, Listener.HTTP_LISTENER_KEY, null, true) != null) {
            httpListener = new Listener(conf, Listener.HTTP_LISTENER_KEY, DEFAULT_HTTP_LISTENER, silent);
        } else {
            httpListener = DEFAULT_HTTP_LISTENER;
        }

        if (findOrDefault(conf, TLSListener.HTTPS_LISTENER_KEY, null, true) != null) {
            httpsListener = new TLSListener(conf, TLSListener.HTTPS_LISTENER_KEY, DEFAULT_HTTPS_LISTENER, silent);
        } else {
            httpsListener = DEFAULT_HTTPS_LISTENER;
        }

        if (findOrDefault(conf, Listener.AJP_LISTENER_KEY, null, true) != null) {
            ajpListener = new Listener(conf, Listener.AJP_LISTENER_KEY, DEFAULT_AJP_LISTENER, silent);
        } else {
            ajpListener = DEFAULT_AJP_LISTENER;
        }

        instanceName = asString(conf, INSTANCE_NAME_KEY, DEFAULT_INSTANCE_NAME, silent);

        proxies = ProxiedResource.build(conf, silent);

        staticResources = StaticResouce.build(conf, silent);

        pluginsDirectory = asString(conf, PLUGINS_DIRECTORY_PATH_KEY, null, silent);

        logFilePath = asString(conf, LOG_FILE_PATH_KEY, URLUtils.removeTrailingSlashes(System.getProperty("java.io.tmpdir")).concat(File.separator + "restheart.log"), silent);
        String _logLevel = asString(conf, LOG_LEVEL_KEY, "INFO", silent);
        logToConsole = asBoolean(conf, ENABLE_LOG_CONSOLE_KEY, true, silent);
        logToFile = asBoolean(conf, ENABLE_LOG_FILE_KEY, true, silent);

        Level level;
        try {
            level = Level.valueOf(_logLevel);
        } catch (Exception e) {
            if (!silent) {
                LOGGER.info("wrong value for parameter {}: {}, using its default value {}", "log-level", _logLevel, "INFO");
            }
            level = Level.INFO;
        }

        logLevel = level;

        traceHeaders = asListOfStrings(conf, REQUESTS_LOG_TRACE_HEADERS_KEY, Collections.emptyList(), silent);

        requestsLimit = asInteger(conf, REQUESTS_LIMIT_KEY, 100, silent);
        ioThreads = asInteger(conf, IO_THREADS_KEY, 2, silent);
        workerThreads = asInteger(conf, WORKER_THREADS_KEY, 32, silent);
        bufferSize = asInteger(conf, BUFFER_SIZE_KEY, 16384, silent);
        directBuffers = asBoolean(conf, DIRECT_BUFFERS_KEY, true, silent);
        forceGzipEncoding = asBoolean(conf, FORCE_GZIP_ENCODING_KEY, false, silent);
        logExchangeDump = asInteger(conf, LOG_REQUESTS_LEVEL_KEY, 0, silent);
        connectionOptions = asMap(conf, CONNECTION_OPTIONS_KEY, null, silent);
        allowUnescapedCharactersInUrl = asBoolean(conf, ALLOW_UNESCAPED_CHARACTERS_IN_URL, true, silent);
    }

    @Override
    public String toString() {
        var sw = new StringWriter();
        new Yaml().dump(conf, sw);

        return sw.toString();
    }

    public <V extends Object> V getOrDefault(final String key, final V defaultValue) {
        return ConfigurationUtils.getOrDefault(this, key, defaultValue, true);
    }

    public Map<String, Object> toMap() {
        return Collections.unmodifiableMap(this.conf);
    }

    /**
     * @return the proxies
     */
    public List<ProxiedResource> getProxies() {
        return Collections.unmodifiableList(proxies);
    }

    /**
     * @return the staticResources
     */
    public List<StaticResouce> getStaticResources() {
        return Collections.unmodifiableList(staticResources);
    }

    /**
     *
     * @return true if the Ansi console is enabled
     */
    public boolean isAnsiConsole() {
        return ansiConsole;
    }

    /**
     * @return the httpListener
     */
    public Listener httpListener() {
        return httpListener;
    }

    /**
     * @return the httpsListener
     */
    public TLSListener httpsListener() {
        return httpsListener;
    }

    /**
     * @return the ajpListener
     */
    public Listener ajpListener() {
        return ajpListener;
    }

    /**
     * @return the pluginsDirectory
     */
    public String getPluginsDirectory() {
        return this.pluginsDirectory;
    }

    /**
     * @return the logFilePath
     */
    public String getLogFilePath() {
        return logFilePath;
    }

    /**
     * @return the logLevel
     */
    public Level getLogLevel() {
        var logbackConfigurationFile = System.getProperty("logback.configurationFile");
        if (logbackConfigurationFile != null && !logbackConfigurationFile.isEmpty()) {
            var loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();
            var logger = loggerContext.getLogger("org.restheart.security");
            return logger.getLevel();
        }

        return logLevel;
    }

    /**
     * @return the logToConsole
     */
    public boolean isLogToConsole() {
        return logToConsole;
    }

    /**
     * @return the logToFile
     */
    public boolean isLogToFile() {
        return logToFile;
    }

    public List<String> getTraceHeaders() {
        return Collections.unmodifiableList(traceHeaders);
    }

    /**
     * @return the ioThreads
     */
    public int getIoThreads() {
        return ioThreads;
    }

    /**
     * @return the workerThreads
     */
    public int getWorkerThreads() {
        return workerThreads;
    }

    /**
     * @return the bufferSize
     */
    public int getBufferSize() {
        return bufferSize;
    }

    /**
     * @return the directBuffers
     */
    public boolean isDirectBuffers() {
        return directBuffers;
    }

    /**
     * @return the forceGzipEncoding
     */
    public boolean isForceGzipEncoding() {
        return forceGzipEncoding;
    }

    /**
     * @return the requestsLimit
     */
    public int getRequestsLimit() {
        return requestsLimit;
    }

    /**
     *
     * @return the logExchangeDump Boolean
     */
    public Integer logExchangeDump() {
        return logExchangeDump;
    }

    /**
     * @return the connectionOptions
     */
    public Map<String, Object> getConnectionOptions() {
        return Collections.unmodifiableMap(connectionOptions);
    }

    /**
     * @return the instanceName
     */
    public String getInstanceName() {
        return instanceName;
    }

    public boolean isAllowUnescapedCharactersInUrl() {
        return allowUnescapedCharactersInUrl;
    }

    /**
     *
     * @return the path of the configuration file
     */
    public static Path getPath() {
        return PATH;
    }

    static boolean isParametric(final Path confFilePath) throws IOException {
        try (var sc = new Scanner(confFilePath, "UTF-8")) {
            return sc.findAll(Pattern.compile("\\{\\{.*\\}\\}")).limit(1).count() > 0;
        }
    }

    public class Builder {
        /**
         *
         * @return the default configuration
         */
        public static Configuration build(boolean silent) {
            return build(null, null, silent);
        }

        /**
         *
         * @param confFile
         * @return return the configuration from confFile and propFile
         */
        public static Configuration build(Path confFilePath, Path propFilePath, boolean silent) throws ConfigurationException {
            if (confFilePath == null) {
                var stream = Configuration.class.getResourceAsStream("/restheart-default-config.yml");
                try (var confReader = new InputStreamReader(stream)) {
                    return build(confReader, null, null, silent);
                } catch (IOException ieo) {
                    throw new ConfigurationException("Error reading default configuration file", ieo);
                }
            } else {
                try (var confReader = new BufferedReader(new FileReader(confFilePath.toFile()))) {
                    return build(confReader, confFilePath, propFilePath, silent);
                } catch (MustacheNotFoundException | FileNotFoundException ex) {
                    throw new ConfigurationException("Configuration file not found: " + confFilePath);
                } catch (IOException ieo) {
                    throw new ConfigurationException("Error reading configuration file " + confFilePath, ieo);
                }
            }
        }

        /**
         *
         * @param confFile
         * @return return the configuration from confFile and propFile
         */
        private static Configuration build(Reader confReader, Path confFilePath, Path propFilePath, boolean silent) throws ConfigurationException {
            var m = new DefaultMustacheFactory().compile(confReader, "configuration-file");

            var confFileParams = Arrays.asList(m.getCodes());

            if (confFileParams.isEmpty()) {
                // configuration file is not parametric
                Map<String, Object> confMap = new Yaml(new SafeConstructor(new LoaderOptions())).load(confReader);

                return new Configuration(overrideConfiguration(confMap, silent), confFilePath, silent);
            } else {
                // configuration is parametric
                if (propFilePath == null) {
                    // check if parameters are defined via env vars
                    var allResolved = confFileParams.stream().filter(c -> c != null && c.getName() != null).map(c -> c.getName()).allMatch(n -> valueFromEnv(n, true) != null);

                    if (allResolved) {
                        final var p = new Properties();
                        confFileParams.stream()
                            .filter(c -> c != null && c.getName() != null)
                            .map(c -> c.getName())
                            .forEach(n -> p.put(n, valueFromEnv(n, silent)));

                        final var writer = new StringWriter();
                        m.execute(writer, p);

                        Map<String, Object> confMap = new Yaml(new SafeConstructor(new LoaderOptions())).load(writer.toString());
                        return new Configuration(overrideConfiguration(confMap, silent), confFilePath, silent);
                    } else {
                        var unbound = confFileParams.stream()
                            .filter(c -> c != null && c.getName() != null)
                            .map(c -> c.getName())
                            .filter(n -> valueFromEnv(n, true) == null)
                            .collect(Collectors.toList());

                        throw new ConfigurationException("Configuration is parametric but no properties file or environment variables have been specified."
                                + " Unbound parameters: " + unbound.toString()
                                + ". You can use -e option to specify the properties file or set them via environment variables"
                                + ". For more information check https://restheart.org/docs/setup/#configuration-files");
                    }
                } else {
                    try (var propsReader = new InputStreamReader(new FileInputStream(propFilePath.toFile()), "UTF-8")) {
                        final var p = new Properties();
                        p.load(propsReader);

                        //  overwrite properties from env vars
                        //  if Properties has a property called 'foo-bar'
                        //  and the environment variable RH_FOO_BAR is defined
                        //  the value of the latter is used
                        p.replaceAll((k,v) -> {
                            if (k instanceof String sk) {
                                var vfe = valueFromEnv(sk, silent);
                                return vfe != null ? vfe : v;
                            } else {
                                return v;
                            }
                        });

                        final var writer = new StringWriter();
                        m.execute(writer, p);

                        Map<String, Object> confMap = new Yaml(new SafeConstructor(new LoaderOptions())).load(writer.toString());
                        return new Configuration(overrideConfiguration(confMap, silent), confFilePath, silent);
                    } catch (FileNotFoundException fnfe) {
                        throw new ConfigurationException("Properties file not found: " + propFilePath, fnfe);
                    } catch (IOException ieo) {
                        throw new ConfigurationException("Error reading configuration file " + propFilePath, ieo);
                    }
                }
            }
        }
    }

    /**
     *
     * @param confMap
     * @return
     */
    private static Map<String, Object> overrideConfiguration(Map<String, Object> confMap, final boolean silent) {
        final var PROP_NAME = "RHO";

        var ctx = JXPathContext.newContext(confMap);
        ctx.setLenient(true);

        if (System.getenv().containsKey(PROP_NAME)) {
            var overrides = overrides(System.getenv().get(PROP_NAME), silent, silent);

            if (!silent) {
                LOGGER.info("Overriding configuration parameters from RHO environment variable:");
            }

            overrides.stream().forEachOrdered(o -> {
                if (!silent) {
                    LOGGER.info("\t{} -> {}", o.path(), o.value());
                }

                try {
                    createPathAndSetValue(ctx, o.path(), o.value());
                } catch(Throwable ise) {
                    LOGGER.error("Wrong configuration override {}, {}", o, ise.getMessage());
                }
            });
        } else {
            return confMap;
        }

        return confMap;
    }

    private static void createPathAndSetValue(JXPathContext ctx, String path, Object value) {
        createParents(ctx, path);
        ctx.createPathAndSetValue(path, value);
    }

    private static void createParents(JXPathContext ctx, String path) {
        if (path.lastIndexOf("/") == 0) {
            // root
            if (ctx.getValue(path) == null) {
                ctx.createPathAndSetValue(path, Maps.newLinkedHashMap());
            }
        } else {
            var parentPath = path.substring(0, path.lastIndexOf("/"));

            if (ctx.getValue(parentPath) == null) {
                createParents(ctx, parentPath);
                ctx.createPathAndSetValue(parentPath, Maps.newLinkedHashMap());
            }
        }
    }
}

record Listener(boolean enabled, String host, int port) {
    public static final String HTTP_LISTENER_KEY = "http-listener";
    public static final String AJP_LISTENER_KEY = "ajp-listener";
    public static final String ENABLED_KEY = "enabled";
    public static final String HOST_KEY = "host";
    public static final String PORT_KEY = "port";

    public Listener(Map<String, Object> conf, String listenerKey, Listener defaultValue, boolean silent) {
        this(findOrDefault(conf, "/" + listenerKey + "/" + ENABLED_KEY, defaultValue.enabled(), silent),
            findOrDefault(conf, "/" + listenerKey + "/" + HOST_KEY, defaultValue.host(), silent),
            findOrDefault(conf, "/" + listenerKey + "/" + PORT_KEY, defaultValue.port(), silent));
    }
}

record TLSListener(boolean enabled, String host, int port, String keystorePath, String keystorePwd, String certificatePwd) {
    public static final String HTTPS_LISTENER_KEY = "https-listener";
    public static final String ENABLED_KEY = "enabled";
    public static final String HOST_KEY = "host";
    public static final String PORT_KEY = "port";
    public static final String KEYSTORE_PATH_KEY = "keystore-path";
    public static final String KEYSTOPRE_PWD_KEY = "keystore-password";
    public static final String CERT_PWD_KEY = "certificate-password";

    public TLSListener(Map<String, Object> conf, String listenerKey, TLSListener defaultValue, boolean silent) {
        this(findOrDefault(conf, "/" + listenerKey + "/" + ENABLED_KEY, defaultValue.enabled(), silent),
            findOrDefault(conf, "/" + listenerKey + "/" +  HOST_KEY, defaultValue.host(), silent),
            findOrDefault(conf,"/" + listenerKey + "/" +  PORT_KEY, defaultValue.port(), silent),
            findOrDefault(conf, "/" + listenerKey + "/" + KEYSTORE_PATH_KEY, defaultValue.keystorePath(), silent),
            findOrDefault(conf, "/" + listenerKey + "/" + KEYSTOPRE_PWD_KEY, defaultValue.keystorePwd(), silent),
            findOrDefault(conf, "/" + listenerKey + "/" + CERT_PWD_KEY, defaultValue.certificatePwd(), silent));
    }

    @Override
    public String toString() {
        return "{enabled: " + enabled + ", " +
                "host: " + host + ", " +
                "port: " + port + ", " +
                "keystorePath: " + keystorePath + ", " +
                "keystorePwd: "  + (keystorePwd == null ? "null" : "******") + ", " +
                "certificatePwd:"  + (certificatePwd == null ? "null" : "******") + "}";
    }
}

record ProxiedResource (String name,
    String location,
    List<String> proxyPass,
    boolean rewriteHostHeader,
    int connectionPerThread,
    int maxQueueSize,
    int softMaxConnectionsPerThread,
    int connectionsTTL,
    int problemServerRetry) {
    public static final String PROXIED_RESOURCES_KEY = "proxies";

    public static final String PROXY_NAME = "name";
    public static final String PROXY_LOCATION_KEY = "location";
    public static final String PROXY_PASS_KEY = "proxy-pass";

    public static final String PROXY_REWRITE_HOST_HEADER = "rewrite-host-header";
    public static final String PROXY_CONNECTIONS_PER_THREAD = "connections-per-thread";
    public static final String PROXY_MAX_QUEUE_SIZE = "max-queue-size";
    public static final String PROXY_SOFT_MAX_CONNECTIONS_PER_THREAD = "soft-max-connections-per-thread";
    public static final String PROXY_TTL = "connections-ttl";
    public static final String PROXY_PROBLEM_SERVER_RETRY = "problem-server-retry";

    public ProxiedResource(Map<String, Object> conf, boolean silent) {
        this(getOrDefault(conf, PROXY_NAME, null, silent),
            getOrDefault(conf, PROXY_LOCATION_KEY, null, silent),
            _proxyPass(conf, silent),
            // following are optional paramenter, so get them always in silent mode
            getOrDefault(conf, PROXY_REWRITE_HOST_HEADER, true, true),
            getOrDefault(conf, PROXY_CONNECTIONS_PER_THREAD, 10, true),
            getOrDefault(conf, PROXY_MAX_QUEUE_SIZE, 0, true),
            getOrDefault(conf, PROXY_SOFT_MAX_CONNECTIONS_PER_THREAD, 5, true),
            getOrDefault(conf, PROXY_TTL, -1, true),
            getOrDefault(conf, PROXY_PROBLEM_SERVER_RETRY, 10, true));
    }

    private static List<String> _proxyPass(Map<String, Object> conf, boolean silent) {
        var _proxyPass = getOrDefault(conf, PROXY_PASS_KEY, null, silent);

        if (_proxyPass == null) {
            return new ArrayList<String>();
        } else if (_proxyPass instanceof String s) {
            var ret = new ArrayList<String>();
            ret.add(s);
            return ret;
        } else if (_proxyPass instanceof List<?> l) {
            l.stream().filter(p -> !(p instanceof String)).forEach(ip -> Configuration.LOGGER.warn("Invalid proxy-pass {} ", ip));
            return l.stream().filter(p -> p instanceof String).map(p -> (String) p).collect(Collectors.toList());
        } else {
            Configuration.LOGGER.warn("Invalid proxy-pass value {}", _proxyPass);
            return new ArrayList<String>();
        }
    }

    public static List<ProxiedResource> build(Map<String, Object> conf, boolean silent) {
        var proxies = asListOfMaps(conf, PROXIED_RESOURCES_KEY, null, silent);

        if (proxies != null) {
            return proxies.stream().map(p -> new ProxiedResource(p, silent)).collect(Collectors.toList());
        } else {
            return new ArrayList<>();
        }
    }
}

record StaticResouce(String what, String where, String welcomeFile, boolean embedded) {
    public static final String STATIC_RESOURCES_MOUNTS_KEY = "static-resources";
    public static final String STATIC_RESOURCES_MOUNT_WHAT_KEY = "what";
    public static final String STATIC_RESOURCES_MOUNT_WHERE_KEY = "where";
    public static final String STATIC_RESOURCES_MOUNT_WELCOME_FILE_KEY = "welcome-file";
    public static final String STATIC_RESOURCES_MOUNT_EMBEDDED_KEY = "embedded";

    public StaticResouce(Map<String, Object> conf, boolean silent) {
        this(getOrDefault(conf, STATIC_RESOURCES_MOUNT_WHAT_KEY, null, silent),
            getOrDefault(conf, STATIC_RESOURCES_MOUNT_WHERE_KEY, null, silent),
            // following are optional paramenter, so get them always in silent mode
            getOrDefault(conf, STATIC_RESOURCES_MOUNT_WELCOME_FILE_KEY, "index.html", true),
            getOrDefault(conf, STATIC_RESOURCES_MOUNT_EMBEDDED_KEY, false, true));
    }

    public static List<StaticResouce> build(Map<String, Object> conf, boolean silent) {
        var staticResouces = asListOfMaps(conf, STATIC_RESOURCES_MOUNTS_KEY, null, silent);

        if (staticResouces != null) {
            return staticResouces.stream().map(p -> new StaticResouce(p, silent)).collect(Collectors.toList());
        } else {
            return new ArrayList<>();
        }
    }
}