/*-
 * ========================LICENSE_START=================================
 * restheart-commons
 * %%
 * Copyright (C) 2019 - 2022 SoftInstigate
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.restheart.configuration;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.LoggerContext;

import com.github.mustachejava.DefaultMustacheFactory;
import com.github.mustachejava.MustacheNotFoundException;
import com.google.common.collect.Maps;

import static org.restheart.configuration.Utils.*;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.jxpath.JXPathContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.SafeConstructor;

/**
 * Class that holds the configuration.
 *
 * @author Andrea Di Cesare {@literal <andrea@softinstigate.com>}
 */
public class Configuration {

    /**
     * the version is read from the JAR's MANIFEST.MF file, which is automatically
     * generated by the Maven build process
     */
    public static final String VERSION = Configuration.class.getPackage().getImplementationVersion() == null
        ? "unknown, not packaged"
        : Configuration.class.getPackage().getImplementationVersion();

    static final Logger LOGGER = LoggerFactory.getLogger(Configuration.class);

    public static final String DEFAULT_ROUTE = "0.0.0.0";

    /**
     * hold the path of the configuration file
     */
    private static Path PATH = null;

    private static final Listener DEFAULT_HTTP_LISTENER = new Listener(true, "localhost", 8080);
    private static final TLSListener DEFAULT_HTTPS_LISTENER = new TLSListener(false, "localhost", 4443, null, null, null);
    private static final Listener DEFAULT_AJP_LISTENER = new Listener(false, "localhost", 8009);

    /**
     * undertow connetction options
     *
     * See
     * http://undertow.io/undertow-docs/undertow-docs-1.3.0/index.html#common-listener-optionshttp://undertow.io/undertow-docs/undertow-docs-1.3.0/index.html#common-listener-options
     */
    public static final String CONNECTION_OPTIONS_KEY = "connection-options";

    private final Listener httpListener;
    private final Listener ajpListener;
    private final TLSListener httpsListener;
    private final List<ProxiedResource> proxies;
    private final List<StaticResource> staticResources;
    private final CoreModule coreModule;
    private final Logging logging;
    private final Map<String, Object> connectionOptions;

    private Map<String, Object> conf;

    /**
     * Creates a new instance of Configuration from the configuration file For any
     * missing property the default value is used.
     *
     * @param conf   the key-value configuration map
     * @param silent
     * @throws org.restheart.configuration.ConfigurationException
     */
    private Configuration(Map<String, Object> conf, final Path confFilePath, boolean silent) throws ConfigurationException {
        PATH = confFilePath;

        this.conf = conf;

        this.coreModule = CoreModule.build(conf, silent);


        if (findOrDefault(conf, Listener.HTTP_LISTENER_KEY, null, true) != null) {
            httpListener = new Listener(conf, Listener.HTTP_LISTENER_KEY, DEFAULT_HTTP_LISTENER, silent);
        } else {
            httpListener = DEFAULT_HTTP_LISTENER;
        }

        if (findOrDefault(conf, TLSListener.HTTPS_LISTENER_KEY, null, true) != null) {
            httpsListener = new TLSListener(conf, TLSListener.HTTPS_LISTENER_KEY, DEFAULT_HTTPS_LISTENER, silent);
        } else {
            httpsListener = DEFAULT_HTTPS_LISTENER;
        }

        if (findOrDefault(conf, Listener.AJP_LISTENER_KEY, null, true) != null) {
            ajpListener = new Listener(conf, Listener.AJP_LISTENER_KEY, DEFAULT_AJP_LISTENER, silent);
        } else {
            ajpListener = DEFAULT_AJP_LISTENER;
        }

        proxies = ProxiedResource.build(conf, silent);

        staticResources = StaticResource.build(conf, silent);

        logging = Logging.build(conf, silent);

        connectionOptions = asMap(conf, CONNECTION_OPTIONS_KEY, null, silent);
    }

    @Override
    public String toString() {
        var sw = new StringWriter();
        new Yaml().dump(conf, sw);

        return sw.toString();
    }

    public <V extends Object> V getOrDefault(final String key, final V defaultValue) {
        return Utils.getOrDefault(this, key, defaultValue, true);
    }

    public Map<String, Object> toMap() {
        return Collections.unmodifiableMap(this.conf);
    }

    public CoreModule coreModule() {
        return coreModule;
    }

    /**
     * @return the proxies
     */
    public List<ProxiedResource> getProxies() {
        return Collections.unmodifiableList(proxies);
    }

    /**
     * @return the staticResources
     */
    public List<StaticResource> getStaticResources() {
        return Collections.unmodifiableList(staticResources);
    }

    /**
     * @return the httpListener
     */
    public Listener httpListener() {
        return httpListener;
    }

    /**
     * @return the httpsListener
     */
    public TLSListener httpsListener() {
        return httpsListener;
    }

    /**
     * @return the ajpListener
     */
    public Listener ajpListener() {
        return ajpListener;
    }


    /**
     * @return the logLevel
     */
    public Level getLogLevel() {
        var logbackConfigurationFile = System.getProperty("logback.configurationFile");
        if (logbackConfigurationFile != null && !logbackConfigurationFile.isEmpty()) {
            var loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();
            var logger = loggerContext.getLogger("org.restheart");
            return logger.getLevel();
        }

        return logging.logLevel();
    }

    public Logging logging() {
        return logging;
    }

    /**
     * @return the connectionOptions
     */
    public Map<String, Object> getConnectionOptions() {
        return Collections.unmodifiableMap(connectionOptions);
    }

    /**
     *
     * @return the path of the configuration file
     */
    public static Path getPath() {
        return PATH;
    }

    static boolean isParametric(final Path confFilePath) throws IOException {
        try (var sc = new Scanner(confFilePath, "UTF-8")) {
            return sc.findAll(Pattern.compile("\\{\\{.*\\}\\}")).limit(1).count() > 0;
        }
    }

    public class Builder {
        /**
         *
         * @return the default configuration
         */
        public static Configuration build(boolean silent) {
            return build(null, null, silent);
        }

        /**
         *
         * @param confFile
         * @return return the configuration from confFile and propFile
         */
        public static Configuration build(Path confFilePath, Path propFilePath, boolean silent) throws ConfigurationException {
            if (confFilePath == null) {
                var stream = Configuration.class.getResourceAsStream("/restheart-default-config.yml");
                try (var confReader = new InputStreamReader(stream)) {
                    return build(confReader, null, null, silent);
                } catch (IOException ieo) {
                    throw new ConfigurationException("Error reading default configuration file", ieo);
                }
            } else {
                try (var confReader = new BufferedReader(new FileReader(confFilePath.toFile()))) {
                    return build(confReader, confFilePath, propFilePath, silent);
                } catch (MustacheNotFoundException | FileNotFoundException ex) {
                    throw new ConfigurationException("Configuration file not found: " + confFilePath);
                } catch (IOException ieo) {
                    throw new ConfigurationException("Error reading configuration file " + confFilePath, ieo);
                }
            }
        }

        /**
         *
         * @param confFile
         * @return return the configuration from confFile and propFile
         */
        private static Configuration build(Reader confReader, Path confFilePath, Path propFilePath, boolean silent) throws ConfigurationException {
            var m = new DefaultMustacheFactory().compile(confReader, "configuration-file");

            var confFileParams = Arrays.asList(m.getCodes());

            if (confFileParams.isEmpty()) {
                // configuration file is not parametric
                Map<String, Object> confMap = new Yaml(new SafeConstructor(new LoaderOptions())).load(confReader);

                return new Configuration(overrideConfiguration(confMap, silent), confFilePath, silent);
            } else {
                // configuration is parametric
                if (propFilePath == null) {
                    // check if parameters are defined via env vars
                    var allResolved = confFileParams.stream().filter(c -> c != null && c.getName() != null).map(c -> c.getName()).allMatch(n -> valueFromEnv(n, true) != null);

                    if (allResolved) {
                        final var p = new Properties();
                        confFileParams.stream()
                            .filter(c -> c != null && c.getName() != null)
                            .map(c -> c.getName())
                            .forEach(n -> p.put(n, valueFromEnv(n, silent)));

                        final var writer = new StringWriter();
                        m.execute(writer, p);

                        Map<String, Object> confMap = new Yaml(new SafeConstructor(new LoaderOptions())).load(writer.toString());
                        return new Configuration(overrideConfiguration(confMap, silent), confFilePath, silent);
                    } else {
                        var unbound = confFileParams.stream()
                            .filter(c -> c != null && c.getName() != null)
                            .map(c -> c.getName())
                            .filter(n -> valueFromEnv(n, true) == null)
                            .collect(Collectors.toList());

                        throw new ConfigurationException("Configuration is parametric but no properties file or environment variables have been specified."
                                + " Unbound parameters: " + unbound.toString()
                                + ". You can use -e option to specify the properties file or set them via environment variables"
                                + ". For more information check https://restheart.org/docs/setup/#configuration-files");
                    }
                } else {
                    try (var propsReader = new InputStreamReader(new FileInputStream(propFilePath.toFile()), "UTF-8")) {
                        final var p = new Properties();
                        p.load(propsReader);

                        //  overwrite properties from env vars
                        //  if Properties has a property called 'foo-bar'
                        //  and the environment variable RH_FOO_BAR is defined
                        //  the value of the latter is used
                        p.replaceAll((k,v) -> {
                            if (k instanceof String sk) {
                                var vfe = valueFromEnv(sk, silent);
                                return vfe != null ? vfe : v;
                            } else {
                                return v;
                            }
                        });

                        final var writer = new StringWriter();
                        m.execute(writer, p);

                        Map<String, Object> confMap = new Yaml(new SafeConstructor(new LoaderOptions())).load(writer.toString());
                        return new Configuration(overrideConfiguration(confMap, silent), confFilePath, silent);
                    } catch (FileNotFoundException fnfe) {
                        throw new ConfigurationException("Properties file not found: " + propFilePath, fnfe);
                    } catch (IOException ieo) {
                        throw new ConfigurationException("Error reading configuration file " + propFilePath, ieo);
                    }
                }
            }
        }
    }

    /**
     *
     * @param confMap
     * @return
     */
    private static Map<String, Object> overrideConfiguration(Map<String, Object> confMap, final boolean silent) {
        final var PROP_NAME = "RHO";

        var ctx = JXPathContext.newContext(confMap);
        ctx.setLenient(true);

        if (System.getenv().containsKey(PROP_NAME)) {
            var overrides = overrides(System.getenv().get(PROP_NAME), silent, silent);

            if (!silent) {
                LOGGER.info("Overriding configuration parameters from RHO environment variable:");
            }

            overrides.stream().forEachOrdered(o -> {
                if (!silent) {
                    LOGGER.info("\t{} -> {}", o.path(), o.value());
                }

                try {
                    createPathAndSetValue(ctx, o.path(), o.value());
                } catch(Throwable ise) {
                    LOGGER.error("Wrong configuration override {}, {}", o, ise.getMessage());
                }
            });
        } else {
            return confMap;
        }

        return confMap;
    }

    private static void createPathAndSetValue(JXPathContext ctx, String path, Object value) {
        createParents(ctx, path);
        ctx.createPathAndSetValue(path, value);
    }

    private static void createParents(JXPathContext ctx, String path) {
        if (path.lastIndexOf("/") == 0) {
            // root
            if (ctx.getValue(path) == null) {
                ctx.createPathAndSetValue(path, Maps.newLinkedHashMap());
            }
        } else {
            var parentPath = path.substring(0, path.lastIndexOf("/"));

            if (ctx.getValue(parentPath) == null) {
                createParents(ctx, parentPath);
                ctx.createPathAndSetValue(parentPath, Maps.newLinkedHashMap());
            }
        }
    }
}
