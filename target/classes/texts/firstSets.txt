BLOCK_STATEMENTS=[protected, -, int, null, $identifier$, boolean, ;, var, interface, do, $textBlock$, try, if, static, permits, return, provides, true, switch, char, void, (, $string$, uses, break, enum, opens, @, byte, throw, class, $floatingPoint$, continue, strictfp, public, non-sealed, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, private, this, --, module, $integer$, exports, to, float, while, final, for, open, ++, +, abstract, long, short]
[[ $TYPE_PARAMETERS ]]$=[<]
SWITCH_BLOCK_STATEMENT_GROUP=[default, case]
{{ $CONSTANT_MODIFIER }}$=[final, @, public, static]
ARRAY_TYPE=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, opens, byte, open, long, short]
[[ $CLASS_PERMITS ]]$=[permits]
CAST_EXPRESSION=[(]
METHOD_BODY=[{, ,]
INTERFACE_EXTENDS=[extends]
VARIABLE_DECLARATOR=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
WHILE_STATEMENT=[while]
BREAK_STATEMENT=[break]
CONSTRUCTOR_DECLARATOR=[uses, with, provides, module, opens, open, exports, to, requires, transitive, <, $identifier$]
TYPE_VARIABLE=[uses, with, provides, module, @, opens, open, exports, to, requires, transitive, $identifier$]
[[ $WILDCARD_BOUNDS ]]$=[extends, super]
{{ $; RESOURCE }}$=[;]
VARIABLE_DECLARATOR_ID=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
MODULE_DIRECTIVE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
IF_THEN_STATEMENT=[if]
STATEMENT_NO_SHORT_IF=[-, int, null, $identifier$, boolean, ;, var, do, $textBlock$, try, if, permits, return, provides, true, switch, char, void, (, $string$, uses, break, opens, byte, @, throw, $floatingPoint$, continue, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, this, --, module, $integer$, exports, to, float, while, for, open, ++, +, long, short]
BASIC_FOR_STATEMENT=[for]
[[ $, RECORD_COMPONENT ]]$=[,]
CONDITIONAL_AND_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
NUMERIC_TYPE=[int, byte, double, char, long, float, short]
INSTANCE_INITIALIZER=[{]
NULL_LITERAL=[null]
[[ $; ]]$=[;]
{{ $, INTERFACE_TYPE }}$=[,]
CLASS_OR_INTERFACE_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, @, opens, open, record, requires, yield, transitive]
METHOD_MODIFIER=[protected, private, final, @, strictfp, public, native, synchronized, abstract, static]
SWITCH_RULE=[default, case]
INTEGRAL_TYPE=[int, byte, char, long, short]
TOP_LEVEL_CLASS_OR_INTERFACE_DECLARATION=[protected, private, sealed, ;, final, enum, @, class, record, strictfp, interface, public, non-sealed, abstract, static]
ENHANCED_FOR_STATEMENT_NO_SHORT_IF=[for]
ELEMENT_VALUE_PAIR_LIST=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $ENUM_CONSTANT_MODIFIER }}$=[@]
RECORD_HEADER=[(]
EXCEPTION_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, @, opens, open, record, requires, yield, transitive]
[[ $TYPE_ARGUMENTS_OR_DIAMOND ]]$=[<]
[[ $THROWS ]]$=[throws]
{{ $METHOD_MODIFIER }}$=[protected, private, final, @, strictfp, public, native, synchronized, abstract, static]
SWITCH_EXPRESSION=[switch]
TYPE_BOUND=[extends]
ENUM_DECLARATION=[protected, private, final, enum, sealed, @, strictfp, public, non-sealed, abstract, static]
RESOURCE=[int, new, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, final, @, opens, byte, open, $floatingPoint$, long, short]
{{ $ANNOTATION }}$=[@]
{{ ${{ $ANNOTATION }}$ [ ] }}$=[@, []
LABELED_STATEMENT=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
CLASS_LITERAL=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, void, float, uses, byte, opens, open, long, short]
ARRAY_ACCESS=[int, new, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
[[ $= VARIABLE_INITIALIZER ]]$=[=]
TYPE_ARGUMENT_LIST=[int, sealed, ?, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, opens, byte, open, long, short]
FOR_STATEMENT_NO_SHORT_IF=[for]
[[ $RECORD_COMPONENT_LIST ]]$=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, byte, opens, open, long, short]
CLASS_IMPLEMENTS=[implements]
ADDITIVE_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
[[ $ENUM_BODY_DECLARATIONS ]]$=[;]
LAMBDA_PARAMETER_TYPE=[permits, int, provides, module, sealed, double, exports, to, char, $identifier$, float, boolean, uses, with, var, byte, opens, open, record, requires, yield, transitive, long, short]
ELEMENT_VALUE=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, {, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, @, opens, byte, open, $floatingPoint$, ++, +, long, short]
RESOURCE_SPECIFICATION=[(]
{{ $, TYPE_PARAMETER }}$=[,]
[[ $open ]]$=[open]
EXCLUSIVE_OR_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
{{ $INTERFACE_METHOD_MODIFIER }}$=[private, default, @, strictfp, public, static, abstract]
CLASS_EXTENDS=[extends]
DO_STATEMENT=[do]
NORMAL_ANNOTATION=[@]
CATCH_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
ELEMENT_VALUE_LIST=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, {, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, @, opens, byte, open, $floatingPoint$, ++, +, long, short]
ENUM_BODY=[{]
{{ $| CLASS_TYPE }}$=[|]
ANNOTATION_INTERFACE_BODY=[{]
FORMAL_PARAMETER_LIST=[int, sealed, double, ,, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
{{ $RECORD_BODY_DECLARATION }}$=[protected, int, sealed, double, volatile, $identifier$, boolean, with, ;, var, {, record, interface, requires, yield, transitive, static, private, permits, transient, provides, module, exports, native, to, synchronized, char, void, float, uses, final, enum, opens, @, byte, open, class, strictfp, public, non-sealed, <, abstract, long, short]
DIM_EXPR=[@, []
STATEMENT=[-, int, null, $identifier$, boolean, ;, var, do, $textBlock$, try, if, permits, return, provides, true, switch, char, void, (, $string$, uses, break, opens, byte, @, throw, $floatingPoint$, continue, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, this, --, module, $integer$, exports, to, float, while, for, open, ++, +, long, short]
VARIABLE_DECLARATOR_LIST=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
CLASS_INSTANCE_CREATION_EXPRESSION=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
[[ $, ]]$=[,]
[[ $BLOCK_STATEMENT ]]$=[protected, -, int, null, $identifier$, boolean, ;, var, interface, do, $textBlock$, try, if, static, permits, return, provides, true, switch, char, void, (, $string$, uses, break, enum, opens, @, byte, throw, class, $floatingPoint$, continue, strictfp, public, non-sealed, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, private, this, --, module, $integer$, exports, to, float, while, final, for, open, ++, +, abstract, long, short]
[[ $CATCHES ]]$=[catch]
AND_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
SWITCH_BLOCK=[{]
COMPILATION_UNIT=[protected, private, module, sealed, package, ;, final, import, enum, @, open, class, record, strictfp, interface, public, non-sealed, abstract, static]
RETURN_STATEMENT=[return]
WHILE_STATEMENT_NO_SHORT_IF=[while]
BASIC_FOR_STATEMENT_NO_SHORT_IF=[for]
[[ $to MODULE_NAME {{ $, MODULE_NAME }}$ ]]$=[to]
{{ $CLASS_BODY_DECLARATION }}$=[protected, int, sealed, double, volatile, $identifier$, boolean, ;, with, var, {, record, interface, requires, yield, transitive, static, private, permits, transient, provides, module, exports, native, to, synchronized, char, void, float, uses, final, enum, @, opens, byte, open, class, strictfp, public, non-sealed, <, abstract, long, short]
TYPE_ARGUMENT=[int, sealed, ?, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, opens, byte, open, long, short]
[[ $TYPE_ARGUMENTS ]]$=[<]
THROW_STATEMENT=[throw]
[[ $RECEIVER_PARAMETER , ]]$=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, byte, opens, open, long, short]
FOR_UPDATE=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, --, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, long, short]
{{ $CLASS_MODIFIER }}$=[protected, private, final, sealed, @, strictfp, public, non-sealed, abstract, static]
UNANN_CLASS_OR_INTERFACE_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
ASSERT_STATEMENT=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
{{ $REQUIRES_MODIFIER }}$=[transitive, static]
SINGLE_ELEMENT_ANNOTATION=[@]
RECORD_COMPONENT=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, byte, opens, open, long, short]
[[ $ENUM_CONSTANT_LIST ]]$=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, @, open, record, requires, yield, transitive]
UNARY_EXPRESSION_NOT_PLUS_MINUS=[new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
VARIABLE_ACCESS=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
CATCH_FORMAL_PARAMETER=[permits, provides, module, sealed, exports, to, $identifier$, final, uses, with, var, @, opens, open, record, requires, yield, transitive]
ENUM_CONSTANT=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, @, open, record, requires, yield, transitive]
INTERFACE_TYPE_LIST=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, @, opens, open, record, requires, yield, transitive]
RESULT=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, void, float, uses, byte, opens, open, long, short]
STATIC_INITIALIZER=[static]
POST_INCREMENT_EXPRESSION=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
LAMBDA_BODY=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, {, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
ELEMENT_VALUE_PAIR=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $, VARIABLE_INITIALIZER }}$=[,]
[[ $ARGUMENT_LIST ]]$=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
CONSTANT_MODIFIER=[final, @, public, static]
{{ $SWITCH_RULE }}$=[default, case]
{{ $INTERFACE_MODIFIER }}$=[protected, private, sealed, @, strictfp, public, non-sealed, abstract, static]
DEFAULT_VALUE=[default]
{{ $ADDITIONAL_BOUND }}$=[&]
CLASS_MEMBER_DECLARATION=[protected, int, sealed, double, volatile, $identifier$, boolean, ;, with, var, record, interface, requires, yield, transitive, static, private, permits, transient, provides, module, exports, native, to, synchronized, char, void, float, final, uses, enum, @, byte, opens, class, open, strictfp, public, non-sealed, <, abstract, long, short]
TYPE_PARAMETER_LIST=[uses, with, provides, module, opens, @, open, exports, to, requires, transitive, $identifier$]
LAMBDA_PARAMETER=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
FOR_INIT=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, --, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, final, @, opens, byte, open, $floatingPoint$, ++, long, short]
ANNOTATION_INTERFACE_MEMBER_DECLARATION=[protected, int, sealed, double, $identifier$, boolean, ;, with, var, record, interface, requires, yield, transitive, static, private, permits, provides, module, exports, to, char, float, final, uses, enum, @, byte, opens, class, open, strictfp, public, non-sealed, abstract, long, short]
[[ $CLASS_BODY ]]$=[{]
INCLUSIVE_OR_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
FINALLY=[finally]
EXPRESSION=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT=[-, int, null, $identifier$, boolean, ;, var, do, $textBlock$, try, permits, return, provides, true, switch, char, void, (, $string$, uses, break, opens, byte, @, throw, $floatingPoint$, continue, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, this, --, module, $integer$, exports, to, float, open, ++, +, long, short]
PRIMITIVE_TYPE=[boolean, int, @, byte, double, char, long, float, short]
{{ $ANNOTATION_INTERFACE_ELEMENT_MODIFIER }}$=[@, public, abstract]
{{ $, ELEMENT_VALUE }}$=[,]
TYPE_IDENTIFIER=[uses, with, provides, module, opens, open, exports, to, requires, transitive, $identifier$]
CONDITIONAL_OR_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
FIELD_ACCESS=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
RECORD_BODY=[{]
UNQUALIFIED_METHOD_IDENTIFIER=[permits, module, provides, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, transitive]
{{ $CATCH_CLAUSE }}$=[catch]
DIMS=[@, []
STATEMENT_EXPRESSION=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, --, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, long, short]
MODULE_DECLARATION=[module, @, open]
LAMBDA_PARAMETERS=[permits, provides, module, sealed, exports, to, (, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
DIM_EXPRS=[@, []
{{ $BLOCK_STATEMENT }}$=[protected, -, int, null, $identifier$, boolean, ;, var, interface, do, $textBlock$, try, if, static, permits, return, provides, true, switch, char, void, (, $string$, uses, break, enum, opens, @, byte, throw, class, $floatingPoint$, continue, strictfp, public, non-sealed, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, private, this, --, module, $integer$, exports, to, float, while, final, for, open, ++, +, abstract, long, short]
RECORD_BODY_DECLARATION=[protected, int, sealed, double, volatile, $identifier$, boolean, with, ;, var, {, record, interface, requires, yield, transitive, static, private, permits, transient, provides, module, exports, native, to, synchronized, char, void, float, uses, final, enum, opens, @, byte, open, class, strictfp, public, non-sealed, <, abstract, long, short]
PACKAGE_OR_TYPE_NAME=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
UNANN_TYPE=[permits, int, provides, module, sealed, double, exports, to, char, $identifier$, float, boolean, uses, with, var, byte, opens, open, record, requires, yield, transitive, long, short]
{{ $, TYPE_NAME }}$=[,]
INTERFACE_MEMBER_DECLARATION=[protected, int, sealed, default, double, $identifier$, boolean, ;, with, var, record, interface, requires, yield, transitive, static, private, permits, provides, module, exports, to, char, void, float, final, uses, enum, @, byte, opens, class, open, strictfp, public, non-sealed, <, abstract, long, short]
VARIABLE_MODIFIER=[final, @]
LAMBDA_PARAMETER_LIST=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, final, opens, @, byte, open, long, short]
POSTFIX_EXPRESSION=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
FORMAL_PARAMETER=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
SHIFT_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
BLOCK=[{]
ORDINARY_COMPILATION_UNIT=[protected, private, sealed, package, ;, final, import, enum, @, class, record, strictfp, interface, public, non-sealed, abstract, static]
ASSIGNMENT_EXPRESSION=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
AMBIGUOUS_NAME=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $, MODULE_NAME }}$=[,]
[[ $INTERFACE_PERMITS ]]$=[permits]
EQUALITY_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
EXPLICIT_CONSTRUCTOR_INVOCATION=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, <, long, short]
[[ $VARIABLE_INITIALIZER_LIST ]]$=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, {, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
IDENTIFIER=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $PACKAGE_MODIFIER }}$=[@]
CLASS_PERMITS=[permits]
UNARY_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
FOR_STATEMENT=[for]
TYPE_PARAMETERS=[<]
TYPE_ARGUMENTS_OR_DIAMOND=[<]
[[ $BLOCK_STATEMENTS ]]$=[protected, -, int, null, $identifier$, boolean, ;, var, interface, do, $textBlock$, try, if, static, permits, return, provides, true, switch, char, void, (, $string$, uses, break, enum, opens, @, byte, throw, class, $floatingPoint$, continue, strictfp, public, non-sealed, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, private, this, --, module, $integer$, exports, to, float, while, final, for, open, ++, +, abstract, long, short]
UNQUALIFIED_CLASS_INSTANCE_CREATION_EXPRESSION=[new]
TYPE=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, opens, byte, open, long, short]
INTERFACE_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, @, opens, open, record, requires, yield, transitive]
WILDCARD_BOUNDS=[extends, super]
ENHANCED_FOR_STATEMENT=[for]
{{ $, FORMAL_PARAMETER }}$=[,]
RECEIVER_PARAMETER=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, byte, opens, open, long, short]
CONSTANT_EXPRESSION=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
REFERENCE_TYPE=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, opens, byte, open, long, short]
PRIMARY_NO_NEW_ARRAY=[int, new, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, true, module, $integer$, exports, to, char, void, (, float, $string$, uses, byte, opens, @, $floatingPoint$, open, long, short]
NORMAL_CLASS_DECLARATION=[protected, private, final, sealed, @, class, strictfp, public, non-sealed, abstract, static]
TYPE_NAME=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $, EXCEPTION_TYPE }}$=[,]
{{ $SWITCH_LABEL : }}$=[default, case]
[[ $INTERFACE_EXTENDS ]]$=[extends]
FIELD_DECLARATION=[protected, int, sealed, double, volatile, $identifier$, boolean, with, var, record, requires, yield, transitive, static, private, permits, transient, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, public, long, short]
{{ $. {{ $ANNOTATION }}$ IDENTIFIER }}$=[.]
FLOATING_POINT_TYPE=[double, float]
METHOD_NAME=[permits, module, provides, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, transitive]
ADDITIONAL_BOUND=[&]
LEFT_HAND_SIDE=[int, new, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
METHOD_REFERENCE=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, @, byte, open, $floatingPoint$, long, short]
LABELED_STATEMENT_NO_SHORT_IF=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
TYPE_PARAMETER_MODIFIER=[@]
INSTANCE_OF_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
INTERFACE_MODIFIER=[protected, private, sealed, @, strictfp, public, non-sealed, abstract, static]
YIELD_STATEMENT=[yield]
CLASS_DECLARATION=[protected, private, sealed, final, enum, @, class, record, strictfp, public, non-sealed, abstract, static]
[[ $ELEMENT_VALUE_PAIR_LIST ]]$=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $, VARIABLE_DECLARATOR }}$=[,]
REQUIRES_MODIFIER=[transitive, static]
PATTERN=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
SIMPLE_TYPE_NAME=[uses, with, provides, module, opens, open, exports, to, requires, transitive, $identifier$]
CONDITIONAL_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
METHOD_INVOCATION=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
CONSTRUCTOR_DECLARATION=[protected, private, provides, module, exports, to, $identifier$, uses, with, @, opens, open, public, requires, transitive, <]
[[ $TYPE_BOUND ]]$=[extends]
MULTIPLICATIVE_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
{{ $ANNOTATION_INTERFACE_MEMBER_DECLARATION }}$=[protected, int, sealed, double, $identifier$, boolean, ;, with, var, record, interface, requires, yield, transitive, static, private, permits, provides, module, exports, to, char, float, final, uses, enum, @, byte, opens, class, open, strictfp, public, non-sealed, abstract, long, short]
VARIABLE_ARITY_RECORD_COMPONENT=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, byte, opens, open, long, short]
TYPE_PATTERN=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
BLOCK_STATEMENT=[protected, -, int, null, $identifier$, boolean, ;, var, interface, do, $textBlock$, try, if, static, permits, return, provides, true, switch, char, void, (, $string$, uses, break, enum, opens, @, byte, throw, class, $floatingPoint$, continue, strictfp, public, non-sealed, new, sealed, double, !, false, with, {, record, super, requires, yield, transitive, ~, private, this, --, module, $integer$, exports, to, float, while, final, for, open, ++, +, abstract, long, short]
PRE_INCREMENT_EXPRESSION=[++]
[[ $IDENTIFIER . ]]$=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
NORMAL_INTERFACE_DECLARATION=[protected, private, sealed, @, strictfp, interface, public, non-sealed, abstract, static]
STATEMENT_EXPRESSION_LIST=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, --, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, long, short]
UNANN_PRIMITIVE_TYPE=[boolean, int, byte, double, char, long, float, short]
UNANN_INTERFACE_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
LOCAL_CLASS_OR_INTERFACE_DECLARATION=[protected, private, sealed, final, enum, @, class, record, strictfp, interface, public, non-sealed, abstract, static]
METHOD_DECLARATION=[protected, int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, static, private, permits, provides, module, exports, native, to, synchronized, char, void, float, final, uses, @, byte, opens, open, strictfp, public, <, abstract, long, short]
CONTINUE_STATEMENT=[continue]
ENUM_BODY_DECLARATIONS=[;]
[[ $CLASS_IMPLEMENTS ]]$=[implements]
{{ $CONSTRUCTOR_MODIFIER }}$=[protected, private, @, public]
RECORD_COMPONENT_LIST=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, byte, opens, open, long, short]
[[ $FORMAL_PARAMETER_LIST ]]$=[int, sealed, double, ,, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
MODULAR_COMPILATION_UNIT=[import, module, @, open]
ANNOTATION_INTERFACE_ELEMENT_MODIFIER=[@, public, abstract]
ANNOTATION_INTERFACE_ELEMENT_DECLARATION=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, @, byte, opens, open, public, abstract, long, short]
CLASS_MODIFIER=[protected, private, final, sealed, @, strictfp, public, non-sealed, abstract, static]
TYPE_IMPORT_ON_DEMAND_DECLARATION=[import]
CONSTANT_DECLARATION=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, static, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, public, long, short]
{{ $FIELD_MODIFIER }}$=[protected, private, final, transient, @, public, volatile, static]
PACKAGE_MODIFIER=[@]
RECORD_COMPONENT_MODIFIER=[@]
INTERFACE_BODY=[{]
CLASS_BODY_DECLARATION=[protected, int, sealed, double, volatile, $identifier$, boolean, ;, with, var, {, record, interface, requires, yield, transitive, static, private, permits, transient, provides, module, exports, native, to, synchronized, char, void, float, uses, final, enum, @, opens, byte, open, class, strictfp, public, non-sealed, <, abstract, long, short]
CASE_CONSTANT=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
{{ $INTERFACE_MEMBER_DECLARATION }}$=[protected, int, sealed, default, double, $identifier$, boolean, ;, with, var, record, interface, requires, yield, transitive, static, private, permits, provides, module, exports, to, char, void, float, final, uses, enum, @, byte, opens, class, open, strictfp, public, non-sealed, <, abstract, long, short]
[[ $ELEMENT_VALUE_LIST ]]$=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, {, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, @, opens, byte, open, $floatingPoint$, ++, +, long, short]
CATCHES=[catch]
[[ $CLASS_EXTENDS ]]$=[extends]
{{ $VARIABLE_MODIFIER }}$=[final, @]
VARIABLE_INITIALIZER=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, {, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
{{ $IMPORT_DECLARATION }}$=[import]
CATCH_CLAUSE=[catch]
ANNOTATION_INTERFACE_DECLARATION=[protected, private, sealed, @, strictfp, public, non-sealed, abstract, static]
WILDCARD=[@, ?]
TRY_WITH_RESOURCES_STATEMENT=[try]
TYPE_PARAMETER=[uses, with, provides, module, opens, @, open, exports, to, requires, transitive, $identifier$]
PRE_DECREMENT_EXPRESSION=[--]
[[ $PACKAGE_DECLARATION ]]$=[@, package]
EMPTY_STATEMENT=[;]
RECORD_DECLARATION=[protected, private, final, sealed, @, record, strictfp, public, non-sealed, abstract, static]
TYPE_ARGUMENTS=[<]
[[ $( [[ $ARGUMENT_LIST ]]$ ) ]]$=[(]
PACKAGE_DECLARATION=[@, package]
[[ $IDENTIFIER ]]$=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $DIM_EXPR }}$=[@, []
IF_THEN_ELSE_STATEMENT=[if]
SINGLE_TYPE_IMPORT_DECLARATION=[import]
INTERFACE_PERMITS=[permits]
CLASS_OR_INTERFACE_TYPE_TO_INSTANTIATE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, @, open, record, requires, yield, transitive]
{{ $[ ] }}$=[[]
LOCAL_VARIABLE_DECLARATION_STATEMENT=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
{{ $, LAMBDA_PARAMETER }}$=[,]
{{ $SWITCH_BLOCK_STATEMENT_GROUP }}$=[default, case]
POST_DECREMENT_EXPRESSION=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
{{ $, CASE_CONSTANT }}$=[,]
METHOD_DECLARATOR=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
[[ $FOR_UPDATE ]]$=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, --, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, long, short]
{{ $, EXPRESSION }}$=[,]
ARGUMENT_LIST=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
CLASS_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, @, opens, open, record, requires, yield, transitive]
[[ $DIMS ]]$=[@, []
[[ $FOR_INIT ]]$=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, --, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, final, @, opens, byte, open, $floatingPoint$, ++, long, short]
{{ $TOP_LEVEL_CLASS_OR_INTERFACE_DECLARATION }}$=[protected, private, sealed, ;, final, enum, @, class, record, strictfp, interface, public, non-sealed, abstract, static]
[[ $DEFAULT_VALUE ]]$=[default]
MODULE_NAME=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
INTERFACE_METHOD_MODIFIER=[private, default, @, strictfp, public, static, abstract]
EXCEPTION_TYPE_LIST=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, @, opens, open, record, requires, yield, transitive]
ASSIGNMENT_OPERATOR=[=, <<=, -=, +=, %=, |=, *=, &=, >>=, ^=, /=, >>>=]
LOCAL_VARIABLE_TYPE=[permits, int, provides, module, sealed, double, exports, to, char, $identifier$, float, boolean, uses, with, var, byte, opens, open, record, requires, yield, transitive, long, short]
METHOD_HEADER=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, void, float, uses, byte, opens, open, <, long, short]
PACKAGE_NAME=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
ENUM_CONSTANT_MODIFIER=[@]
{{ $, ENUM_CONSTANT }}$=[,]
UNANN_ARRAY_TYPE=[permits, int, provides, module, sealed, double, exports, to, char, $identifier$, float, boolean, uses, with, var, opens, byte, open, record, requires, yield, transitive, long, short]
{{ $TYPE_PARAMETER_MODIFIER }}$=[@]
SWITCH_LABEL=[default, case]
RESOURCE_LIST=[int, new, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, final, @, opens, byte, open, $floatingPoint$, long, short]
LOCAL_VARIABLE_DECLARATION=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
SINGLE_STATIC_IMPORT_DECLARATION=[import]
ENUM_CONSTANT_LIST=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, @, open, record, requires, yield, transitive]
{{ $, TYPE_ARGUMENT }}$=[,]
INTERFACE_DECLARATION=[protected, private, sealed, @, strictfp, interface, public, non-sealed, abstract, static]
{{ $. IDENTIFIER }}$=[.]
SYNCHRONIZED_STATEMENT=[(]
CONSTRUCTOR_MODIFIER=[protected, private, @, public]
ARRAY_INITIALIZER=[{]
ELEMENT_VALUE_ARRAY_INITIALIZER=[{]
THROWS=[throws]
INTERFACE_METHOD_DECLARATION=[int, default, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, static, private, permits, provides, module, exports, to, char, void, float, uses, @, byte, opens, open, strictfp, public, <, abstract, long, short]
IF_THEN_ELSE_STATEMENT_NO_SHORT_IF=[if]
{{ $MODULE_DIRECTIVE }}$=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
{{ $, IDENTIFIER }}$=[,]
EXPRESSION_NAME=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
MARKER_ANNOTATION=[@]
CLASS_BODY=[{]
CONSTRUCTOR_BODY=[{]
EXPRESSION_STATEMENT=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, --, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, long, short]
ASSIGNMENT=[int, new, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, long, short]
BOOLEAN_LITERAL=[true, false]
{{ $RECORD_COMPONENT_MODIFIER }}$=[@]
FIELD_MODIFIER=[protected, private, final, transient, @, public, volatile, static]
[[ $EXPRESSION ]]$=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
UNANN_REFERENCE_TYPE=[permits, int, provides, module, sealed, double, exports, to, char, $identifier$, float, boolean, uses, with, var, opens, byte, open, record, requires, yield, transitive, long, short]
{{ $, ELEMENT_VALUE_PAIR }}$=[,]
SWITCH_STATEMENT=[(]
[[ $FINALLY ]]$=[finally]
COMPACT_CONSTRUCTOR_DECLARATION=[protected, private, provides, module, exports, to, $identifier$, uses, with, opens, @, open, public, requires, transitive]
[[ $LAMBDA_PARAMETER_LIST ]]$=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, uses, final, opens, @, byte, open, long, short]
PRIMARY=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, true, module, $integer$, exports, to, char, void, (, float, $string$, uses, byte, opens, @, $floatingPoint$, open, long, short]
TRY_STATEMENT=[try]
LAMBDA_EXPRESSION=[permits, provides, module, sealed, exports, to, (, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
ANNOTATION=[@]
VARIABLE_INITIALIZER_LIST=[-, int, new, sealed, null, double, !, false, $identifier$, boolean, with, var, {, record, super, requires, $textBlock$, yield, transitive, ~, permits, this, provides, module, true, --, switch, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
[[ $EXPLICIT_CONSTRUCTOR_INVOCATION ]]$=[new, int, sealed, null, double, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, transitive, permits, this, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, <, long, short]
{{ $, STATEMENT_EXPRESSION }}$=[,]
IMPORT_DECLARATION=[import]
RELATIONAL_EXPRESSION=[-, new, int, sealed, null, double, !, false, $identifier$, boolean, with, var, record, super, requires, $textBlock$, yield, ~, transitive, permits, this, --, switch, provides, module, true, $integer$, exports, to, char, void, (, float, $string$, uses, opens, byte, @, open, $floatingPoint$, ++, +, long, short]
UNANN_CLASS_TYPE=[permits, provides, module, sealed, exports, to, $identifier$, uses, with, var, opens, open, record, requires, yield, transitive]
UNANN_TYPE_VARIABLE=[uses, with, provides, module, opens, open, exports, to, requires, transitive, $identifier$]
ARRAY_CREATION_EXPRESSION=[new]
LITERAL=[$string$, true, null, $integer$, $floatingPoint$, $textBlock$, false]
VARIABLE_ARITY_PARAMETER=[int, sealed, double, $identifier$, boolean, with, var, record, requires, yield, transitive, permits, provides, module, exports, to, char, float, final, uses, @, byte, opens, open, long, short]
STATIC_IMPORT_ON_DEMAND_DECLARATION=[import]